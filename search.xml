<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>程序员必备小工具</title>
      <link href="posts/df7e4c26.html"/>
      <url>posts/df7e4c26.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="程序员必备小工具"><a href="#程序员必备小工具" class="headerlink" title="程序员必备小工具"></a>程序员必备小工具</h1><h2 id="Markdown（Typora）："><a href="#Markdown（Typora）：" class="headerlink" title="Markdown（Typora）："></a>Markdown（Typora）：</h2><p>插入代码：</p><p>左上角数字旁边` *3;后选择语言</p><p>` ``</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是插入的一段代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-SVN（版本管理工具）："><a href="#git-SVN（版本管理工具）：" class="headerlink" title="git/SVN（版本管理工具）："></a>git/SVN（版本管理工具）：</h2><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="PlasticSCM（游戏版本管理工具）："><a href="#PlasticSCM（游戏版本管理工具）：" class="headerlink" title="PlasticSCM（游戏版本管理工具）："></a>PlasticSCM（游戏版本管理工具）：</h2><h2 id="Maven（项目管理工具）"><a href="#Maven（项目管理工具）" class="headerlink" title="Maven（项目管理工具）"></a>Maven（项目管理工具）</h2><h2 id="Emmet-前端便捷开发语法：（完成）"><a href="#Emmet-前端便捷开发语法：（完成）" class="headerlink" title="Emmet 前端便捷开发语法：（完成）"></a>Emmet 前端便捷开发语法：（完成）</h2><h3 id="后代：-gt"><a href="#后代：-gt" class="headerlink" title="后代：>"></a>后代：&gt;</h3><p>缩写为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">table&gt;tr&gt;th&gt;td*2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="兄弟："><a href="#兄弟：" class="headerlink" title="兄弟：+"></a>兄弟：+</h3><p>缩写为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">div+p+table+tr+td<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式为；</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上级："><a href="#上级：" class="headerlink" title="上级：^"></a>上级：^</h3><p>缩写为：</p><ol><li><pre class="line-numbers language-html" data-language="html"><code class="language-html">div+div&gt;p&gt;span+em^bq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>展开式为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>缩写为</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">div+div&gt;p&gt;span+em^^bq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组："><a href="#分组：" class="headerlink" title="分组：()"></a>分组：()</h3><ol><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.缩写为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="乘法："><a href="#乘法：" class="headerlink" title="乘法：*"></a>乘法：*</h3><p>缩写为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">ul&gt;li*5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自增符号："><a href="#自增符号：" class="headerlink" title="自增符号：$"></a>自增符号：$</h3><ol><li>缩写为：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">ul&gt;li.item$*5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>缩写为：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">h$[title=item$]{Header $}*3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Header 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Header 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Header 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>缩写式为：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">ul&gt;li.item$$$*5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式输出：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item001<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item002<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item003<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item004<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item005<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">ul&gt;li.item$@-*5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">ul&gt;li.item$@3*5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ID和类属性"><a href="#ID和类属性" class="headerlink" title="ID和类属性"></a>ID和类属性</h3><ol><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">#header<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">.title<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">form#search.wide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wide<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">p.class1.class2.class3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class1 class2 class3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><ol><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">p[title="Hello world"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello world<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">td[rowspan=2 colspan=3 title]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">[a='value1' b="value2"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">a</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value1<span class="token punctuation">"</span></span> <span class="token attr-name">b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文本："><a href="#文本：" class="headerlink" title="文本：{}"></a>文本：{}</h3><ol><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">a{Click me}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="隐式标签"><a href="#隐式标签" class="headerlink" title="隐式标签"></a>隐式标签</h3><ol><li>缩写</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">em&gt;.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>缩写</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">ul&gt;.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">table&gt;.row&gt;.col<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML标签语法"><a href="#HTML标签语法" class="headerlink" title="HTML标签语法"></a>HTML标签语法</h2><p>所有未知的缩写标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">hangge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hangge</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hangge</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本HTML标签：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><a href=""></a href=""></p><p>(3)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">a:link<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><a href="http: "=""></a href="http:></p><p>(4)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">a:mail<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><a href="mailto:"></a href="mailto:"></p><p>(5)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">abbr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``abbr</code> <code>title``=``""``&gt;&lt;/``abbr``&gt;</code></p><p>(6)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">acronym<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``acronym</code> <code>title``=``""``&gt;&lt;/``acronym``&gt;</code></p><p>(7)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">base<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``base</code> <code>href``=``""</code> <code>/&gt;</code></p><p>(8)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">basefont<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``basefont</code> <code>/&gt;</code></p><p>(9)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">br<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``br</code> <code>/&gt;</code></p><p>(10)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">frame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``frame</code> <code>/&gt;</code></p><p>(11)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">hr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``hr</code> <code>/&gt;</code></p><p>(12)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">bdo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``bdo</code> <code>dir``=``""``&gt;&lt;/``bdo``&gt;</code></p><p>(13)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">bdo:r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``bdo</code> <code>dir``=``"rtl"``&gt;&lt;/``bdo``&gt;</code></p><p>(14)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">bdo:l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``bdo</code> <code>dir``=``"ltr"``&gt;&lt;/``bdo``&gt;</code></p><p>(15)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">col<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``col</code> <code>/&gt;</code></p><p>(16)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"stylesheet"</code> <code>href``=``""</code> <code>/&gt;</code></p><p>(17)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link:css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"stylesheet"</code> <code>href``=``"style.css"</code> <code>/&gt;</code></p><p>(18)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link:print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"stylesheet"</code> <code>href``=``"print.css"</code> <code>media``=``"print"</code> <code>/&gt;</code></p><p>(19)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link:favicon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"shortcut icon"</code> <code>type``=``"image/x-icon"</code> <code>href``=``"favicon.ico"</code> <code>/&gt;</code></p><p>(20)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link:touch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"apple-touch-icon"</code> <code>href``=``"favicon.png"</code> <code>/&gt;</code></p><p>(21)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link:rss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"alternate"</code> <code>type``=``"application/rss+xml"</code> <code>title``=``"RSS"</code> <code>href``=``"rss.xml"</code> <code>/&gt;</code></p><p>(22)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">link:atom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``link</code> <code>rel``=``"alternate"</code> <code>type``=``"application/atom+xml"</code> <code>title``=``"Atom"</code> <code>href``=``"atom.xml"</code> <code>/&gt;</code></p><p>(23)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">meta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><meta ></meta ></p><p>(24)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">meta:utf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><meta http-equiv="content-type" content="text html;charset="UTF-8&quot;&nbsp;/"></meta http-equiv="content-type" content="text></p><p>(25)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">meta:win<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><meta http-equiv="content-type" content="text html;charset="windows-1251&quot;&nbsp;/"></meta http-equiv="content-type" content="text></p><p>(26)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">meta:vp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><meta name="viewport" content="width=device-width, user-scalable="no," initial-scale="1.0," maximum-scale="1.0," minimum-scale="1.0&quot;&nbsp;/"></meta name="viewport" content="width=device-width,></p><p>(27)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">meta:compat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><meta http-equiv="x-ua-compatible" content="ie=7" ></meta http-equiv="x-ua-compatible" content="ie=7" ></p><p>(28)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">style<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><style></style><p>(29)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><script></script><p>(30)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">script:src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><script src=""><p>(31)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p>https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="<img src="" alt="" ></img src="" alt="" ></p><p>(32)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">iframe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><iframe src="" frameborder="0"></iframe src="" frameborder="0"></p><p>(33)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">embed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``embed</code> <code>src``=``""</code> <code>type``=``""</code> <code>/&gt;</code></p><p>(34)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``object</code> <code>data``=``""</code> <code>type``=``""``&gt;&lt;/``object``&gt;</code></p><p>(35)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">param<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``param</code> <code>name``=``""</code> <code>value``=``""</code> <code>/&gt;</code></p><p>(36)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">map<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``map</code> <code>name``=``""``&gt;&lt;/``map``&gt;</code></p><p>(37)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">area<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``area</code> <code>shape``=``""</code> <code>coords``=``""</code> <code>href``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(38)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">area:d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``area</code> <code>shape``=``"default"</code> <code>href``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(39)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">area:c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``area</code> <code>shape``=``"circle"</code> <code>coords``=``""</code> <code>href``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(40)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">area:r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``area</code> <code>shape``=``"rect"</code> <code>coords``=``""</code> <code>href``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(41)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">area:p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``area</code> <code>shape``=``"poly"</code> <code>coords``=``""</code> <code>href``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(42)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">form<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``form</code> <code>action``=``""``&gt;&lt;/``form``&gt;</code></p><p>(43)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">form:get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``form</code> <code>action``=``""</code> <code>method``=``"get"``&gt;&lt;/``form``&gt;</code></p><p>(44)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">form:post<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``form</code> <code>action``=``""</code> <code>method``=``"post"``&gt;&lt;/``form``&gt;</code></p><p>(45)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">label<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``label</code> <code>for``=``""``&gt;&lt;/``label``&gt;</code></p><p>(46)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"text"</code> <code>/&gt;</code></p><p>(47)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">inp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"text"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(48)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:hidden<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input[type=hidden name]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"hidden"</code> <code>name``=``""</code> <code>/&gt;</code></p><p>(49)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:h <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:hidden</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"hidden"</code> <code>name``=``""</code> <code>/&gt;</code></p><p>(50)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:text, input:t <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"text"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(51)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=search]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"search"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(52)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:email <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=email]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"email"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(53)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=url]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"text"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(54)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=password]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"url"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(55)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:password</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"password"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(56)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:datetime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=datetime]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"datetime"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(57)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=date]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"date"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(58)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:datetime-local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=datetime-local]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"datetime-local"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(59)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:month<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=month]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"month"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(60)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:week<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=week]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"week"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(61)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:time <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=time]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"time"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(62)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=number]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"number"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(63)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=color]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"color"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(64)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:checkbox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=checkbox]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"checkbox"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(65)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:checkbox</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"checkbox"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(66)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:radio <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=radio]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"radio"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(67)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:radio</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"radio"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(68)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:range<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=range]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"range"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(69)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp[type=file]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"file"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(70)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:file</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"file"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(71)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"submit"</code> <code>value``=``""</code> <code>/&gt;</code></p><p>(72)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:submit</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"submit"</code> <code>value``=``""</code> <code>/&gt;</code></p><p>(73)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"image"</code> <code>src``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(74)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:i <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:image</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"image"</code> <code>src``=``""</code> <code>alt``=``""</code> <code>/&gt;</code></p><p>(75)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:button<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"button"</code> <code>value``=``""</code> <code>/&gt;</code></p><p>(76)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:b <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:button</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"button"</code> <code>value``=``""</code> <code>/&gt;</code></p><p>(77)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">isindex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``isindex</code> <code>/&gt;</code></p><p>(78)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:reset <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：input:button[type=reset]</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"reset"</code> <code>value``=``""</code> <code>/&gt;</code></p><p>(79)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">select<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``select</code> <code>name``=``""</code> <code>id``=``""``&gt;&lt;/``select``&gt;</code></p><p>(80)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">option<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``option</code> <code>value``=``""``&gt;&lt;/``option``&gt;</code></p><p>(81)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">textarea<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``textarea</code> <code>name``=``""</code> <code>id``=``""</code> <code>cols``=``"30"</code> <code>rows``=``"10"``&gt;&lt;/``textarea``&gt;</code></p><p>(82)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">menu:context<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：menu[type=context]&gt;</p><p>展开输出↓</p><p><code>&lt;``menu</code> <code>type``=``"context"``&gt;&lt;/``menu``&gt;</code></p><p>(83)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">menu:c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：menu:context</p><p>展开输出↓</p><p><code>&lt;``menu</code> <code>type``=``"context"``&gt;&lt;/``menu``&gt;</code></p><p>(84)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">menu:toolbar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：menu[type=toolbar]&gt;</p><p>展开输出↓</p><p><code>&lt;``menu</code> <code>type``=``"toolbar"``&gt;&lt;/``menu``&gt;</code></p><p>(85)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">menu:t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：menu:toolbar</p><p>展开输出↓</p><p><code>&lt;``menu</code> <code>type``=``"toolbar"``&gt;&lt;/``menu``&gt;</code></p><p>(86)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">video<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><video src=""></video src=""></p><p>(87)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">audio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><audio src=""></audio src=""></p><p>(88)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">html:xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``html</code> <code>xmlns``=``"http://www.w3.org/1999/xhtml"``&gt;&lt;/``html``&gt;</code></p><p>(89)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``keygen</code> <code>/&gt;</code></p><p>(90)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开输出↓</p><p><code>&lt;``command</code> <code>/&gt;</code></p><p>(91)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">bq <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：blockquote</p><p>展开输出↓</p><p><code>&lt;``blockquote``&gt;&lt;/``blockquote``&gt;</code></p><p>(92)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">acr <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：acronym</p><p>展开输出↓</p><p><code>&lt;``acronym</code> <code>title``=``""``&gt;&lt;/``acronym``&gt;</code></p><p>(93)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">fig <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：figcaption</p><p>展开输出↓</p><figure></figure><p>(94)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">figc  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：figcaption</p><p>展开输出↓</p><p><code>&lt;``figcaption``&gt;&lt;/``figcaption``&gt;</code></p><p>(95)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">ifr <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：iframe</p><p>展开输出↓</p><p><iframe src="" frameborder="0"></iframe src="" frameborder="0"></p><p>(96)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">emb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：embed</p><p>展开输出↓</p><p><code>&lt;``embed</code> <code>src``=``""</code> <code>type``=``""</code> <code>/&gt;</code></p><p>(97)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">obj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：object</p><p>展开输出↓</p><p><code>&lt;``object</code> <code>data``=``""</code> <code>type``=``""``&gt;&lt;/``object``&gt;</code></p><p>(98)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：source</p><p>展开输出↓</p><p><code>&lt;``source``&gt;&lt;/``source``&gt;</code></p><p>(99)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：caption</p><p>展开输出↓</p><p><code>&lt;``caption``&gt;&lt;/``caption``&gt;</code></p><p>(100)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">colg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：colgroup</p><p>展开输出↓</p><p><code>&lt;``colgroup``&gt;&lt;/``colgroup``&gt;</code></p><p>(101)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:text, input:t <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"text"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(102)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">input:text, input:t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：inp</p><p>展开输出↓</p><p><code>&lt;``input</code> <code>type``=``"text"</code> <code>name``=``""</code> <code>id``=``""</code> <code>/&gt;</code></p><p>(103)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">btn:r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：button[type=reset]</p><p>展开输出↓</p><p><code>&lt;``button</code> <code>type``=``"reset"``&gt;&lt;/``button``&gt;</code></p><p>(104)缩写↓</p><p>Copy</p><pre class="line-numbers language-none"><code class="language-none">btn:s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名：button[type=submit]</p><p>展开输出↓</p><p><code>&lt;``button</code> <code>type``=``"submit"``&gt;&lt;/``button``&gt;</code></p><h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><h3 id="Css模块使用模糊搜索来查找未知缩写"><a href="#Css模块使用模糊搜索来查找未知缩写" class="headerlink" title="Css模块使用模糊搜索来查找未知缩写"></a>Css模块使用模糊搜索来查找未知缩写</h3><p>如： == <code>ov-h</code> == <code>ovh</code> == <code>oh</code></p><p>如果没有找到缩写，则转换为属性名称:<code>foo-bar</code> → <code>foo-bar: |;</code></p><p>您可以使用连字符作为前缀缩写以生成供应商的前缀属性： <code>-foo</code></p><h3 id="常用样式简写"><a href="#常用样式简写" class="headerlink" title="常用样式简写"></a>常用样式简写</h3><ol><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">pos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">position:relative<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>缩写：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展开式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">top:;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></script src="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#多线程与网络编程（建设中）</title>
      <link href="posts/e4db942a.html"/>
      <url>posts/e4db942a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-网络编程与多线程"><a href="#C-网络编程与多线程" class="headerlink" title="C# 网络编程与多线程"></a>C# 网络编程与多线程</h1><h1 id="多线程："><a href="#多线程：" class="headerlink" title="多线程："></a>多线程：</h1><h2 id="Thread类："><a href="#Thread类：" class="headerlink" title="Thread类："></a>Thread类：</h2><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Thread();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>Name</td><td>属性，获取或设置线程的名称</td></tr><tr><td>Priority</td><td>属性，获取或设置线程的优先级</td></tr><tr><td>ThreadState</td><td>属性，获取线程当前的状态</td></tr><tr><td>IsAlive</td><td>属性，获取当前线程是否处于启动状态</td></tr><tr><td>IsBackground</td><td>属性，获取或设置值，表示该线程是否为后台线程</td></tr><tr><td>CurrentThread<br>CurrentContext</td><td>属性，获取当前正在运行的线程<br>属性，获取正在其中执行的当前上下文</td></tr><tr><td>Start()</td><td>方法，启动线程</td></tr><tr><td>Sleep(int millisecondsTimout)</td><td>方法，将当前线程暂停指定的毫秒数</td></tr><tr><td>Suspend()</td><td>方法，挂起当前线程（已经被弃用）</td></tr><tr><td>Join()</td><td>方法，阻塞调用线程，直到某个线程终止为止</td></tr><tr><td>Interrupt()</td><td>方法，中断当前线程</td></tr><tr><td>Resume()</td><td>方法，继续已经挂起的线程（已经被弃用）</td></tr><tr><td>Abort()</td><td>方法，终止线程</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">创建线程：class Programe{  public static void CallToChildThread{    Console.WriteLine("子线程开始");  }  static void main(String[] args){  ThreadStart child = new ThreadStart(CallToChildThread); //调用子线程中的方法  Console.WriteLine("主线程开始");  Thread childThread = new Thread(child);  //创建子线程  childThread.Start();  Console.ReadKey();  }}销毁线程：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="网络编程："><a href="#网络编程：" class="headerlink" title="网络编程："></a>网络编程：</h1><p>using System.Net</p><h2 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a>POP3协议</h2><p>构造方法：</p><p>常用API:</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>USER</td><td>此命令与下面的pass命令若都发送成功，将使状态转换</td></tr><tr><td>PASS</td><td>用户名所对应的密码</td></tr><tr><td>APOP</td><td>MD5消息摘要</td></tr><tr><td>STAT</td><td>请求服务器发回关于邮箱统计资料（邮件总数和总字节数）</td></tr><tr><td>UIDL</td><td>回送邮件唯一标识符</td></tr><tr><td>LIST</td><td>回送邮件数量和每个邮件的大小</td></tr><tr><td>RETR</td><td>回送由参数标识的邮件的全部文本</td></tr><tr><td>DELE</td><td>服务器将由参数标识的邮件标记为删除，由QUIT命令执行</td></tr><tr><td>RSET</td><td>服务器将重置所有标记为删除的邮件，用于撤消DELE命令</td></tr><tr><td>TOP</td><td>服务器将回送由参数标识的邮件前n行内容，n是正整数</td></tr><tr><td>NOOP</td><td>服务器返回一个肯定的响应，不做任何操作</td></tr><tr><td>QUIT</td><td>退出</td></tr></tbody></table><p>注意：SMTP服务器使用的端口号一般为25，POP服务器使用的端口号一般为110。</p><h2 id="Dns类："><a href="#Dns类：" class="headerlink" title="Dns类："></a>Dns类：</h2><p>静态类（无法创建实例），用于从 Internet 域名系统 (DNS) 检索有关特定主机的信息。DNS查询中的主机信息在类的IPHostEntry实例中返回。如果指定的主机在DNS数据库中有多个条目，IPHost则包含多个IP地址和别名。</p><p>常用API:</p><table><thead><tr><th>BeginGetHostAddresses(String, AsyncCallback, Object)</th><th>异步返回指定主机的 Internet 协议 (IP) 地址。</th></tr></thead><tbody><tr><td>BeginGetHostByName(String, AsyncCallback, Object)</td><td><strong>已过时。</strong>开始异步请求关于指定 DNS 主机名的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 信息。</td></tr><tr><td>BeginGetHostEntry(IPAddress, AsyncCallback, Object)</td><td>将 IP 地址异步解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td>BeginGetHostEntry(String, AsyncCallback, Object)</td><td>将主机名或 IP 地址异步解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td>BeginResolve(String, AsyncCallback, Object)</td><td><strong>已过时。</strong>开始异步请求将 DNS 主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.ipaddress?view=net-6.0">IPAddress</a> 实例。</td></tr><tr><td>EndGetHostAddresses(IAsyncResult)</td><td>结束对 DNS 信息的异步请求。</td></tr><tr><td>EndGetHostByName(IAsyncResult)</td><td><strong>已过时。</strong>结束对 DNS 信息的异步请求。</td></tr><tr><td>EndGetHostEntry(IAsyncResult)</td><td>结束对 DNS 信息的异步请求。</td></tr><tr><td>EndResolve(IAsyncResult)</td><td><strong>已过时。</strong>结束对 DNS 信息的异步请求。</td></tr><tr><td>GetHostAddresses(String)</td><td>返回指定主机的 Internet 协议 (IP) 地址。</td></tr><tr><td>GetHostAddresses(String, AddressFamily)</td><td>返回指定主机的 Internet 协议 (IP) 地址。</td></tr><tr><td>GetHostAddressesAsync(String)</td><td>返回指定主机的 Internet 协议 (IP) 地址以作为异步操作。</td></tr><tr><td>GetHostAddressesAsync(String, AddressFamily, CancellationToken)</td><td>返回指定主机的 Internet 协议 (IP) 地址以作为异步操作。</td></tr><tr><td>GetHostAddressesAsync(String, CancellationToken)</td><td>返回指定主机的 Internet 协议 (IP) 地址以作为异步操作。</td></tr><tr><td>GetHostByAddress(IPAddress)</td><td><strong>已过时。</strong>根据指定的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.ipaddress?view=net-6.0">IPAddress</a> 创建 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td>GetHostByAddress(String)</td><td><strong>已过时。</strong>根据 IP 地址创建 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td>GetHostByName(String)</td><td><strong>已过时。</strong>获取指定 DNS 主机名的 DNS 信息。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.dns.gethostentry?view=net-6.0#system-net-dns-gethostentry(system-net-ipaddress)">GetHostEntry(IPAddress)</a></td><td>将 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.dns.gethostentry?view=net-6.0#system-net-dns-gethostentry(system-string)">GetHostEntry(String)</a></td><td>将主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.dns.gethostentry?view=net-6.0#system-net-dns-gethostentry(system-string-system-net-sockets-addressfamily)">GetHostEntry(String, AddressFamily)</a></td><td>将主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.dns.gethostentryasync?view=net-6.0#system-net-dns-gethostentryasync(system-net-ipaddress)">GetHostEntryAsync(IPAddress)</a></td><td>将 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例以作为异步操作。</td></tr><tr><td>GetHostEntryAsync(String)</td><td>将主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例以作为异步操作。</td></tr><tr><td>GetHostEntryAsync(String, AddressFamily, CancellationToken)</td><td>将主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例以作为异步操作。</td></tr><tr><td>GetHostEntryAsync(String, CancellationToken)</td><td>将主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例以作为异步操作。</td></tr><tr><td>GetHostName()</td><td>获取本地计算机的主机名。</td></tr><tr><td>Resolve(String)</td><td><strong>已过时。</strong>将 DNS 主机名或 IP 地址解析为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.iphostentry?view=net-6.0">IPHostEntry</a> 实例。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="IDAddress类"><a href="#IDAddress类" class="headerlink" title="IDAddress类"></a>IDAddress类</h2><p>IPAddress类包含计算机在IP网络上的地址，它主要用来提供网际协议（IP）地址。</p><p>IPAddress类的常用字段、属性、方法及说明</p><table><thead><tr><th>字段、属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>Any字段</td><td>提供一个IP地址，指示服务器应侦听所有网络接口上的客户端活动。此字段为只读</td></tr><tr><td>Broadcast字段</td><td>提供IP广播地址。此字段为只读</td></tr><tr><td>Loopoback字段</td><td>提供IP环回地址。此字段为只读</td></tr><tr><td>None字段</td><td>提供指示不应使用任何网络接口的IP地址。此字段为只读</td></tr><tr><td>Address属性</td><td>网际协议（IP）地址</td></tr><tr><td>AddressFamily属性</td><td>获取IP地址的地址族</td></tr><tr><td>IsIPv6LinkLocal属性</td><td>获取地址是否为IPv6链接本地地址</td></tr><tr><td>IsIPv6Multicast属性</td><td>获取地址是否为IPv6多路广播全局地址</td></tr><tr><td>IsIPv6SiteLocal属性</td><td>获取地址是否为IPv6站点本地地址</td></tr><tr><td>ScopeId属性</td><td>获取或设置IPv6地址范围标识符</td></tr><tr><td>GetAddressBytes方法</td><td>以字节数组形式提供IPAddress的副本</td></tr><tr><td>IsLoopback方法</td><td>指示指定的IP地址是否是环回地址</td></tr><tr><td>Parse方法</td><td>将IP地址字符串转换为IPAddress实例</td></tr><tr><td>TryParse方法</td><td>确定字符串是否为有效的IP地址</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="IPEndPoint类"><a href="#IPEndPoint类" class="headerlink" title="IPEndPoint类"></a>IPEndPoint类</h2><p>IPEndPoint类包含应用程序连接到主机上的服务所需的主机和本地或远程端口信息。通过组合服务的主机IP地址和端口号，IPEndPoint类形成到服务的连接点，它主要用来将网络端点表示为IP地址和端口号。</p><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">IPEndPont(Int64,Int32);IPEndPonint(long address,int port);//代码示例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>字段及属性</th><th>说明</th></tr></thead><tbody><tr><td>MaxPort字段</td><td>指定可以分配给Port属性的最大值。MaxPort值设置为0x0000FFFF。此字段为只读</td></tr><tr><td>MinPort字段</td><td>指定可以分配给Port属性的最小值。此字段为只读</td></tr><tr><td>Address属性</td><td>获取或设置终结点的IP地址</td></tr><tr><td>AddressFamily属性</td><td>获取网际协议（IP）地址族</td></tr><tr><td>Port属性</td><td>获取或设置终结点的端口号</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="WebClient类"><a href="#WebClient类" class="headerlink" title="WebClient类"></a>WebClient类</h2><p>WebClient类提供向URI标识的任何本地、Intranet或Internet资源发送数据以及从这些资源接收数据的公共方法。</p><p>表4  WebClient类的常用属性、方法及说明</p><table><thead><tr><th>属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>BaseAddress属性</td><td>获取或设置WebClient发出请求的基URI</td></tr><tr><td>Encoding属性</td><td>获取和设置用于上载和下载字符串的Encoding</td></tr><tr><td>Headers属性</td><td>获取或设置与请求关联的标头名称/值对集合</td></tr><tr><td>QueryString属性</td><td>获取或设置与请求关联的查询名称/值对集合</td></tr><tr><td>ResponseHeaders属性</td><td>获取与响应关联的标头名称/值对集合</td></tr><tr><td>DownloadData方法</td><td>以Byte数组形式通过指定的URI下载</td></tr><tr><td>DownloadFile方法</td><td>将具有指定URI的资源下载到本地文件</td></tr><tr><td>DownloadString方法</td><td>以String或URI形式下载指定的资源</td></tr><tr><td>OpenRead方法</td><td>为从具有指定URI的资源下载的数据打开一个可读的流</td></tr><tr><td>OpenWrite方法</td><td>打开一个流以将数据写入具有指定URI的资源</td></tr><tr><td>UploadData方法</td><td>将数据缓冲区上载到具有指定URI的资源</td></tr><tr><td>UploadFile方法</td><td>将本地文件上载到具有指定URI的资源</td></tr><tr><td>UploadString方法</td><td>将指定的字符串上载到指定的资源</td></tr><tr><td>UploadValues方法</td><td>将名称/值集合上载到具有指定URI的资源</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="WebRequest-WebResponse类"><a href="#WebRequest-WebResponse类" class="headerlink" title="WebRequest/WebResponse类"></a>WebRequest/WebResponse类</h2><ul><li><p>WebRequest类是.NET Framework的请求/响应模型的抽象基类，用于访问Internet数据。使用该请求/响应模型的应用程序可以用协议不可知的方式从Internet请求数据，在这种方式下，应用程序处理WebRequest类的实例，而协议特定的子类则执行请求的具体细节。</p></li><li><p>WebResponse类也是抽象基类，应用程序可以使用WebResponse类的实例以协议不可知的方式参与请求和响应事务，而从WebResponse类派生的协议类携带请求的详细信息。另外，需要注意的是，客户端应用程序不直接创建WebResponse对象，而是通过对WebRequest实例调用GetResponse方法来进行创建。</p></li></ul><p>WebRequest类的常用属性、方法及说明</p><table><thead><tr><th>属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>ConnectionGroupName属性</td><td>当在子类中重写时，获取或设置请求的连接组的名称</td></tr><tr><td>ContentLength属性</td><td>当在子类中被重写时，获取或设置所发送的请求数据的内容长度</td></tr><tr><td>ContentType属性</td><td>当在子类中被重写时，获取或设置所发送的请求数据的内容类型</td></tr><tr><td>Headers属性</td><td>当在子类中被重写时，获取或设置与请求关联的标头名称/值对的集合</td></tr><tr><td>Method属性</td><td>当在子类中被重写时，获取或设置要在此请求中使用的协议方法</td></tr><tr><td>RequestUri属性</td><td>当在子类中被重写时，获取与请求关联的Internet资源的URI</td></tr><tr><td>Timeout属性</td><td>获取或设置请求超时前的时间长度</td></tr><tr><td>Abort方法</td><td>中止请求</td></tr><tr><td>BeginGetResponse方法</td><td>当在子类中被重写时，开始对Internet资源的异步请求</td></tr><tr><td>Create方法</td><td>初始化新的WebRequest</td></tr><tr><td>EndGetResponse方法</td><td>当在子类中重写时，返回WebResponse</td></tr><tr><td>GetRequestStream方法</td><td>当在子类中重写时，返回用于将数据写入Internet资源的Stream</td></tr><tr><td>GetResponse方法</td><td>当在子类中被重写时，返回对Internet请求的响应</td></tr><tr><td>RegisterPrefix方法</td><td>为指定的URI注册WebRequest子代</td></tr></tbody></table><p>WebResponse类中的常用属性、方法及说明如表6所示。</p><p>表6  WebResponse类的常用属性、方法及说明</p><table><thead><tr><th>属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>ContentLength属性</td><td>当在子类中重写时，获取或设置接收的数据的内容长度</td></tr><tr><td>ContentType属性</td><td>当在派生类中重写时，获取或设置接收的数据的内容类型</td></tr><tr><td>Headers属性</td><td>当在派生类中重写时，获取与此请求关联的标头名称/值对的集合</td></tr><tr><td>ResponseUri属性</td><td>当在派生类中重写时，获取实际响应此请求的Internet资源的URI</td></tr><tr><td>Close方法</td><td>当由子类重写时，将关闭响应流</td></tr><tr><td>GetResponseStream方法</td><td>当在子类中重写时，从Internet资源返回数据流</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h1><p>using System.Socket</p><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>AddressFamily</td><td>获取Socket的地址族</td></tr><tr><td>Available</td><td>获取已经从网络接收且可供读取的数据量</td></tr><tr><td>Connected</td><td>获取一个值，该值指示Socket是在上次Send还是Receive操作时连接到远程主机</td></tr><tr><td>Handle</td><td>获取Socket的操作系统句柄</td></tr><tr><td>LocalEndPoint</td><td>获取本地终结点</td></tr><tr><td>ProtocolType</td><td>获取Socket的协议类型</td></tr><tr><td>RemoteEndPoint</td><td>获取远程终结点</td></tr><tr><td>SendTimeout</td><td>获取或设置一个值，该值指定之后同步Send调用将超时的时间长度</td></tr></tbody></table><p>常用方法：表8  Socket类的常用方法及说明</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>为新建连接创建新的Socket</td></tr><tr><td>BeginAccept</td><td>开始一个异步操作来接受一个传入的连接尝试</td></tr><tr><td>BeginConnect</td><td>开始一个对远程主机连接的异步请求</td></tr><tr><td>BeginDisconnect</td><td>开始异步请求从远程终结点断开连接</td></tr><tr><td>BeginReceive</td><td>开始从连接的Socket中异步接收数据</td></tr><tr><td>BeginSend</td><td>将数据异步发送到连接的Socket</td></tr><tr><td>BeginSendFile</td><td>将文件异步发送到连接的Socket对象</td></tr><tr><td>BeginSendTo</td><td>向特定远程主机异步发送数据</td></tr><tr><td>Close</td><td>关闭Socket连接并释放所有关联的资源</td></tr><tr><td>Connect</td><td>建立与远程主机的连接</td></tr><tr><td>Disconnect</td><td>关闭套接字连接并允许重用套接字</td></tr><tr><td>EndAccept</td><td>异步接受传入的连接尝试</td></tr><tr><td>EndConnect</td><td>结束挂起的异步连接请求</td></tr><tr><td>EndDisconnect</td><td>结束挂起的异步断开连接请求</td></tr><tr><td>EndReceive</td><td>结束挂起的异步读取</td></tr><tr><td>EndSend</td><td>结束挂起的异步发送</td></tr><tr><td>EndSendFile</td><td>结束文件的挂起异步发送</td></tr><tr><td>EndSendTo</td><td>结束挂起的、向指定位置进行的异步发送</td></tr><tr><td>Listen</td><td>将Socket置于侦听状态</td></tr><tr><td>Receive</td><td>接收来自绑定的Socket的数据</td></tr><tr><td>Send</td><td>将数据发送到连接的Socket</td></tr><tr><td>SendFile</td><td>将文件和可选数据异步发送到连接的Socket</td></tr><tr><td>SendTo</td><td>将数据发送到特定终结点</td></tr><tr><td>Shutdown</td><td>禁用某Socket上的发送和接收</td></tr></tbody></table><h2 id="TcpClient-TcpListener"><a href="#TcpClient-TcpListener" class="headerlink" title="TcpClient/TcpListener"></a>TcpClient/TcpListener</h2><ol><li>TcpClient类用于在同步阻止模式下通过网络来连接、发送和接收流数据。为使TcpClient连接并交换数据，使用TCP ProtocolType类创建的TcpListener实例或Socket实例必须侦听是否有传入的连接请求。可以使用下面两种方法之一连接到该侦听器。</li></ol><ul><li><p>创建一个TcpClient，并调用3个可用的Connect方法之一。</p></li><li><p>使用远程主机的主机名和端口号创建TcpClient，此构造函数将自动尝试一个连接。</p></li></ul><ol start="2"><li>TcpListener类用于在阻止同步模式下侦听和接受传入的连接请求。可使用TcpClient类或Socket类来连接TcpListener，并且可以使用IPEndPoint、本地IP地址及端口号或者仅使用端口号来创建TcpListener实例对象。</li></ol><p>表9  TcpClient类的常用属性、方法及说明</p><table><thead><tr><th>属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>Available属性</td><td>获取已经从网络接收且可供读取的数据量</td></tr><tr><td>Client属性</td><td>获取或设置基础Socket</td></tr><tr><td>Connected属性</td><td>获取一个值，该值指示TcpClient的基础Socket是否已连接到远程主机</td></tr><tr><td>ReceiveBufferSize属性</td><td>获取或设置接收缓冲区的大小</td></tr><tr><td>ReceiveTimeout属性</td><td>获取或设置在初始化一个读取操作以后TcpClient等待接收数据的时间量</td></tr><tr><td>SendBufferSize属性</td><td>获取或设置发送缓冲区的大小</td></tr><tr><td>SendTimeout属性</td><td>获取或设置TcpClient等待发送操作成功完成的时间量</td></tr><tr><td>BeginConnect方法</td><td>开始一个对远程主机连接的异步请求</td></tr><tr><td>Close方法</td><td>释放此TcpClient实例，而不关闭基础连接</td></tr><tr><td>Connect方法</td><td>使用指定的主机名和端口号将客户端连接到TCP主机</td></tr><tr><td>EndConnect方法</td><td>异步接受传入的连接尝试</td></tr><tr><td>GetStream方法</td><td>返回用于发送和接收数据的NetworkStream</td></tr></tbody></table><p>TcpListener类的常用属性、方法及说明如表10所示。</p><p>表10  TcpListener类的常用属性、方法及说明</p><table><thead><tr><th>属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>LocalEndpoint属性</td><td>获取当前TcpListener的基础EndPoint</td></tr><tr><td>Server属性</td><td>获取基础网络Socket</td></tr><tr><td>AcceptSocket/AcceptTcpClient方法</td><td>接受挂起的连接请求</td></tr><tr><td>BeginAcceptSocket/BeginAcceptTcpClient方法</td><td>开始一个异步操作来接受一个传入的连接尝试</td></tr><tr><td>EndAcceptSocket方法</td><td>异步接受传入的连接尝试，并创建新的Socket来处理远程主机通信</td></tr><tr><td>EndAcceptTcpClient方法</td><td>异步接受传入的连接尝试，并创建新的TcpClient来处理远程主机通信</td></tr><tr><td>Start方法</td><td>开始侦听传入的连接请求</td></tr><tr><td>Stop方法</td><td>关闭侦听器</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UdpClient类"><a href="#UdpClient类" class="headerlink" title="UdpClient类"></a>UdpClient类</h2><p>UdpClient类用于在阻止同步模式下发送和接收无连接UDP数据报。因为UDP是无连接传输协议，所以不需要在发送和接收数据前建立远程主机连接，但可以选择使用下面两种方法之一来建立默认远程主机。</p><ul><li><p>使用远程主机名和端口号作为参数创建UdpClient类的实例。</p></li><li><p>创建UdpClient类的实例，然后调用Connect方法。</p></li></ul><p>UdpClient类的常用属性、方法及说明</p><table><thead><tr><th>属性及方法</th><th>说明</th></tr></thead><tbody><tr><td>Available属性</td><td>获取从网络接收的可读取的数据量</td></tr><tr><td>Client属性</td><td>获取或设置基础网络Socket</td></tr><tr><td>BeginReceive方法</td><td>从远程主机异步接收数据报</td></tr><tr><td>BeginSend方法</td><td>将数据报异步发送到远程主机</td></tr><tr><td>Close方法</td><td>关闭UDP连接</td></tr><tr><td>Connect方法</td><td>建立默认远程主机</td></tr><tr><td>EndReceive方法</td><td>结束挂起的异步接收</td></tr><tr><td>EndSend方法</td><td>结束挂起的异步发送</td></tr><tr><td>Receive方法</td><td>返回已由远程主机发送的UDP数据报</td></tr><tr><td>Send方法</td><td>将UDP数据报发送到远程主机</td></tr></tbody></table><p>代码示例：</p><h1 id="MailMessage类"><a href="#MailMessage类" class="headerlink" title="MailMessage类"></a>MailMessage类</h1><p>using System.Net.Mail</p><h2 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h2><h2 id="SmtmpClient"><a href="#SmtmpClient" class="headerlink" title="SmtmpClient"></a>SmtmpClient</h2>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript知识体系</title>
      <link href="posts/89207bf2.html"/>
      <url>posts/89207bf2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>javaScript介绍：</p><p>JS 是当前最流行、应用最广泛的客户端脚本语言，在 Web 开发领域有着举足轻重的地位，是成为一名优秀前端工程师的必备技能之一。</p><p>相比于其它编程语言，学习 JS 有以下几个优势：</p><ul><li>JavaScript 是最流行的客户端脚本语言，有着简单易学的特点。学有所成后，您可以使用一些基于 JavaScript 的框架（例如 JQuery、Node.js）来开发前端或后端应用程序；</li><li>JavaScript 可以在 Web 浏览器中运行，因此学习 JavaScript，您不需要配置任何特殊的运行环境；</li><li>JavaScript 的应用非常广泛，例如移动应用开发、桌面应用开发、Web 游戏开发等都会用到 JavaScript，为 JavaScript 程序员提供了更多的就业机会；</li><li>JavaScript 有着大量的优质框架和库，借助这些框架和库可以大大减少您的开发时间。</li></ul><p>JavaScript的应用范围：</p><ol><li><p>Web前端网页开发：</p></li><li><p>移动应用开发：</p></li><li><p>Web游戏开发：</p></li><li><p>后端Web应用开发：</p></li></ol><h1 id="JavaScript整理："><a href="#JavaScript整理：" class="headerlink" title="JavaScript整理："></a>JavaScript整理：</h1><p>导读：</p><p>引入JavaScript文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>  <span class="token attr-name">as</span> <span class="token attr-name">"script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="面向过程-面向对象："><a href="#面向过程-面向对象：" class="headerlink" title="面向过程/面向对象："></a>面向过程/面向对象：</h1><h2 id="选择分支：（完成）"><a href="#选择分支：（完成）" class="headerlink" title="选择分支：（完成）"></a>选择分支：（完成）</h2><h3 id="if、if-else："><a href="#if、if-else：" class="headerlink" title="if、if-else："></a>if、if-else：</h3><p>if-else</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 当表达式成立时要执行的代码</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment">// 当表达式不成立时要执行的代码</span><span class="token punctuation">}</span><span class="token comment">//N个else if语句</span><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 条件表达式 1 为真时执行的代码</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式 <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 条件表达式 2 为真时执行的代码</span><span class="token punctuation">}</span><span class="token operator">...</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token constant">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 条件表达式 N 为真时执行的代码</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 所有条件表达式都为假时要执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>提示：if else if else 语句在执行过程中，当遇到成立的条件表达式时，会立即执行其后<code>{ }</code>中的代码，然后退出整个 if else if else 语句，若后续代码中还有成立的条件表达式，则不会执行。</p></li><li><p>注意事项：使用嵌套 if else 时，如果只有一行语句，也应该使用大括号包裹起来，避免条件歧义。</p></li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>if-elesDemo网页测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dayOfWeek <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dayOfWeek<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>dayOfWeek<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是一段测试文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"未执行的测试文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Switch：（完成）"><a href="#Switch：（完成）" class="headerlink" title="Switch：（完成）"></a>Switch：（完成）</h3><p>语法规范：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token operator">:</span>        statements1  <span class="token comment">// 当表达式的结果等于 value1 时，则执行该代码</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token operator">:</span>        statements2  <span class="token comment">// 当表达式的结果等于 value2 时，则执行该代码</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">case</span> valueN<span class="token operator">:</span>        statementsN  <span class="token comment">// 当表达式的结果等于 valueN 时，则执行该代码</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">:</span>        statements  <span class="token comment">// 如果没有与表达式相同的值，则执行该代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>switch 语句根据表达式的值，依次与 case 子句中的值进行比较：</p><ul><li>如果两者相等，则执行其后的语句段，当遇到 break 关键字时则跳出整个 switch 语句。</li><li>如果不相等，则继续匹配下一个 case。</li><li>switch 语句包含一个可选的 default 关键字，如果在前面的 case 中没有找到相等的条件，则执行 default 后面的语句段。</li></ul><p>**break关键字 **</p><p>  switch 语句是逐行执行的，当 switch 语句找到一个与之匹配的 case 子句时，不仅会执行该子句对应的代码，还会继续向后执行，直至 switch 语句结束。为了防止这种情况产生，需要在每个 case 子句的末尾使用 break 来跳出 switch 语句。</p><p>break 除了可以用来跳出 switch 语句外，还可以用来跳出循环语句（for、for in、while、do while 等）  </p><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>if-elesDemo网页测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dayOfWeek <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*if(dayOfWeek&gt;0&amp;&amp;dayOfWeek&lt;6){alert("这是一段测试文字");}else{alert("未执行的测试文字");}*/</span><span class="token keyword">switch</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"今天是星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"输出值溢出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环分支：（完成）"><a href="#循环分支：（完成）" class="headerlink" title="循环分支：（完成）"></a>循环分支：（完成）</h2><h3 id="for-foreach-for-of："><a href="#for-foreach-for-of：" class="headerlink" title="for / foreach/for of："></a>for / foreach/for of：</h3><p>构造方法：</p><ol><li>for</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*参数列表：initialization：为一个表达式或者变量声明，我们通常将该步骤称为“初始化计数器变量”，在循环过程中只会执行一次；condition：为一个条件表达式，与 while 循环中的条件表达式功能相同，通常用来与计数器的值进行比较，以确定是否进行循环，通过该表达式可以设置循环的次数；increment：为一个表达式，用来在每次循环结束后更新（递增或递减）计数器的值。*/</span><span class="token keyword">for</span><span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 要执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>for-each：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>variable <span class="token keyword">in</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//要执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>for-of</li></ol><p>代码示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//for</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"Clark"</span><span class="token punctuation">,</span> <span class="token string">"surname"</span><span class="token operator">:</span> <span class="token string">"Kent"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"36"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>person<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    docunment<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// for-each</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"Clark"</span><span class="token punctuation">,</span> <span class="token string">"surname"</span><span class="token operator">:</span> <span class="token string">"Kent"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"36"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 遍历对象中的所有属性</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;"</span> <span class="token operator">+</span> prop <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> person<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/p&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do-while-while："><a href="#do-while-while：" class="headerlink" title="do while/while："></a>do while/while：</h3><p>语法规范：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment">// 需要执行的代码</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while与do while循环区别：</p><ol><li>while当不满足循环条件便直接退出，do while 循环即使不满足循环条件也执行一次循环体</li><li>do while 循环与 while 循环还有一点不同，那就是 do while 循环的末尾需要使用分号<code>;</code>进行结尾，而 while 循环则不需要。</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      sum <span class="token operator">+=</span>i<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"100数之和为"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*        var i=1;var sum=0;do {    sum += i;    i++;} while (i &lt;= 100);document.write("1 + 2 + 3 + ... + 98 + 99 + 100 = " + sum)       */</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript对象："><a href="#JavaScript对象：" class="headerlink" title="JavaScript对象："></a>JavaScript对象：</h1><h2 id="RegExp类："><a href="#RegExp类：" class="headerlink" title="RegExp类："></a>RegExp类：</h2><h2 id="Number类："><a href="#Number类：" class="headerlink" title="Number类："></a>Number类：</h2><p>与其他编程语言不同，JavaScript中的数字并不区分整数与浮点数，统一使用 IEEE754 标准（二进制浮点数算术标准）的 64 位浮点格式表示数字，能表示的最大值（Number.MAX_VALUE）为 ±1.7976931348623157e+308，最小值（Number.MIN_VALUE）为 ±5e-324。</p><p>构造函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NUmber</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Number.MAX_VALUE</td><td>JavaScript 中所能表示的最大值</td></tr><tr><td>Number.MIN_VALUE</td><td>JavaScript 中所能表示的最小值</td></tr><tr><td>Number.NaN</td><td>非数字</td></tr><tr><td>Number.NEGATIVE_INFINITY</td><td>负无穷，在溢出时返回</td></tr><tr><td>Number.POSITIVE_INFINITY</td><td>正无穷，在溢出时返回</td></tr><tr><td>Number.EPSILON</td><td>表示 1 与 Number 所能表示的大于 1 的最小浮点数之间的差</td></tr><tr><td>Number.MIN_SAFE_INTEGER</td><td>最小安全整数，即 -9007199254740991</td></tr><tr><td>Number.MAX_SAFE_INTEGER</td><td>最大安全整数，即 9007199254740991</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Number.parseFloat()</td><td>将字符串转换成浮点数，和全局方法 parseFloat() 作用相同</td></tr><tr><td>Number.parseInt()</td><td>将字符串转换成整型数字，和全局方法 parseInt() 作用相同</td></tr><tr><td>Number.isFinite()</td><td>判断 Number 对象是否为有穷数</td></tr><tr><td>Number.isInteger()</td><td>判断 Number 对象是否为整数</td></tr><tr><td>Number.isNaN()</td><td>判断 Number 对象是否为 NaN 类型</td></tr><tr><td>Number.isSafeInteger()</td><td>判断 Number 对象是否为安全整数，即范围为 -(2⁵³ - 1)到 2⁵³ - 1 之间的整数</td></tr><tr><td>Number.toString()</td><td>把 Number 对象转换为字符串，使用指定的基数</td></tr><tr><td>Number.toLocaleString()</td><td>把 Number 对象转换为字符串，使用本地数字格式顺序</td></tr><tr><td>Number.toFixed()</td><td>把 Number 对象转换为字符串，结果的小数点后有指定位数的数字</td></tr><tr><td>Number.toExponential()</td><td>把 Number 对象的值转换为指数计数法</td></tr><tr><td>Number.toPrecision()</td><td>把 Number 对象格式化为指定的长度</td></tr><tr><td>Number.valueOf()</td><td>返回一个 Number 对象的基本数字值</td></tr></tbody></table><h3 id="±Infinity（无穷-∞）"><a href="#±Infinity（无穷-∞）" class="headerlink" title="±Infinity（无穷 ∞）"></a>±Infinity（无穷 ∞）</h3><p>Infinity 是一个特殊的值，表示无穷大。当一个表达式的运算结果超过了 JavaScript 所能表示的数字上限或下限时，JavaScript 就会使用 Infinity 或 -Infinity 表示这个结果，其中 Infinity 表示正无穷大，-Infinity 表示负无穷大。示例代码如下：</p><p>代码示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="NaN（非数字）"><a href="#NaN（非数字）" class="headerlink" title="NaN（非数字）"></a>NaN（非数字）</h3><p>以下几种操作会返回NaN</p><ul><li>使用函数无法将参数转换为数字时会返回 NaN，例如 parseInt(“abc”)、new Number(“abc”)；</li><li>结果不是实数的数学运算，例如 Math.sqrt(-1)；</li><li>任何操作数中包含 NaN 的表达式，例如 5 * NaN；</li><li>涉及字符串的非加法运算，且字符串无法自动转换为数字，例如 “foo” / 5。</li></ul><p>代码示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Date类："><a href="#Date类：" class="headerlink" title="Date类："></a>Date类：</h2><p>构造方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*参数列表：milliseconds（毫秒）：若提供一个数值作为参数，则会将这个参数视为一个以毫秒为单位的时间值，并返回自 1970-01-01 00:00:00 起，经过指定毫秒数的时间，例如 new Date(5000) 会返回一个 1970-01-01 00:00:00 经过 5000 毫秒之后的时间；datestring（日期字符串）：若提供一个字符串形式的日期作为参数，则会将其转换为具体的时间，日期的字符串形式有两种，如下所示：YYYY/MM/dd HH:mm:ss（推荐）：若省略时间部分，则返回的 Date 对象的时间为 00:00:00；YYYY-MM-dd HH:mm:ss：若省略时间部分，则返回的 Date 对象的时间为 08:00:00（加上本地时区），若不省略，在 IE 浏览器中会转换失败。将具体的年月日、时分秒转换为 Date 对象，其中：year：表示年，为了避免错误的产生，推荐使用四位的数字来表示年份；month：表示月，0 代表 1 月，1 代表 2 月，以此类推；date：表示月份中的某一天，1 代表 1 号，2 代表 2 号，以此类推；hour：表示时，以 24 小时制表示，取值范围为 0 ~ 23；minute：表示分，取值范围为 0 ~ 59；second：表示秒，取值范围为 0 ~ 59；millisecond：表示毫秒，取值范围为 0 ~ 999。*/</span><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>datestring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> date<span class="token punctuation">[</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">,</span> millisecond<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>getTime()<br>getTimezoneOffset()<br>getUTCDate()<br>getUTCDay()<br>getUTCMonth()<br>getUTCFullYear()<br>getUTCHours()<br>getUTCMinutes()<br>getUTCSeconds()<br>getUTCMilliseconds()</td><td>返回 1970 年 1 月 1 日至今的毫秒数<br>返回本地时间与格林威治标准时间 (GMT) 的分钟差<br>根据通用时间从 Date 对象返回月中的一天 (1 ~ 31)<br>根据通用时间从 Date 对象返回周中的一天 (0 ~ 6)<br>根据通用时间从 Date 对象返回月份 (0 ~ 11)<br>根据通用时间从 Date 对象返回四位数的年份<br>根据通用时间返回 Date 对象的小时 (0 ~ 23)<br>根据通用时间返回 Date 对象的分钟 (0 ~ 59)<br>根据通用时间返回 Date 对象的秒钟 (0 ~ 59)<br>根据通用时间返回 Date 对象的毫秒(0 ~ 999)</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math类：（完成）"><a href="#Math类：（完成）" class="headerlink" title="Math类：（完成）"></a>Math类：（完成）</h2><p>主要属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>E</td><td>返回算术常量 e，即自然对数的底数（约等于 2.718）</td></tr><tr><td>LN2</td><td>返回 2 的自然对数（约等于 0.693）</td></tr><tr><td>LN10</td><td>返回 10 的自然对数（约等于 2.302）</td></tr><tr><td>LOG2E</td><td>返回以 2 为底的 e 的对数（约等于 1.443）</td></tr><tr><td>LOG10E</td><td>返回以 10 为底的 e 的对数（约等于 0.434）</td></tr><tr><td>PI</td><td>返回圆周率 π（约等于 3.14159）</td></tr><tr><td>SQRT1_2</td><td>返回返回 2 的平方根的倒数（约等于 0.707）</td></tr><tr><td>SQRT2</td><td>返回 2 的平方根（约等于 1.414）</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>abs(x);<br>acos(x);<br>acosh(x);<br>asin(x);<br>asinh(x);<br>atan(x);<br>atan2h(x);<br>atan2(y,x);</td><td></td></tr><tr><td>cbrt(x);</td><td></td></tr><tr><td>ceil(x);</td><td></td></tr><tr><td>cos(x);<br>cosh(x);</td><td></td></tr><tr><td>exp(x)<br>expm1(x)</td><td></td></tr><tr><td>floor(x);<br>fround(x)</td><td></td></tr><tr><td>hypot([x,[y….]]);</td><td></td></tr><tr><td>imul(x,y)</td><td></td></tr><tr><td>log1p(x);<br>log(x)<br>log10(x);</td><td></td></tr><tr><td>max(x,[y,[…….]]);<br>min(x,[y,[……..]]);</td><td></td></tr><tr><td>pow(x,y);</td><td></td></tr><tr><td>random(x);</td><td></td></tr><tr><td>round(x);</td><td></td></tr><tr><td>sign(x);<br>sin(x);<br>sqrt(x);</td><td></td></tr><tr><td>tan(x);<br>tanh(x);</td><td></td></tr><tr><td>toSource();</td><td></td></tr><tr><td>trunc(x);</td><td></td></tr><tr><td>valueOf(x);</td><td></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Math类功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">E</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 输出：2.718281828459045</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出：0.6931471805599453</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN10</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 输出：2.302585092994046</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出：1.4426950408889634</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LOG10E</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出：0.4342944819032518</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 输出：3.141592653589793</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">SQRT1_2</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出：0.7071067811865476</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">SQRT2</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出：1.4142135623730951</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.1415</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 输出：3.1415</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出：1.0471975511965979</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.45</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 输出：2</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 输出：2.718281828459045</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">5.99</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 输出：5</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 输出：1.791759469228055</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出：9</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出：1</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 输出：0.9172594288928195</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出：8</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 输出：-1</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出：11.180339887498949</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Array类：（完成）"><a href="#Array类：（完成）" class="headerlink" title="Array类：（完成）"></a>Array类：（完成）</h2><p>常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回创建数组对象的原型函数</td></tr><tr><td>length</td><td>设置或返回数组中元素的个数</td></tr><tr><td>prototype</td><td>通过该属性您可以向对象中添加属性和方法</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat()</td><td>拼接两个或更多的数组，并返回结果</td></tr><tr><td>copyWithin()</td><td>从数组的指定位置拷贝元素到数组的另一个指定位置中</td></tr><tr><td>entries()</td><td>返回数组的可迭代对象</td></tr><tr><td>every()</td><td>检测数值元素的每个元素是否都符合条件</td></tr><tr><td>fill()</td><td>使用一个固定值来填充数组</td></tr><tr><td>filter()</td><td>检测数值元素，并返回符合条件所有元素的数组</td></tr><tr><td>find()</td><td>返回符合传入函数条件的数组元素</td></tr><tr><td>findIndex()</td><td>返回符合传入函数条件的数组元素索引</td></tr><tr><td>forEach()</td><td>数组每个元素都执行一次回调函数</td></tr><tr><td>from()</td><td>通过给定的对象中创建一个数组</td></tr><tr><td>includes()</td><td>判断一个数组是否包含一个指定的值</td></tr><tr><td>indexOf()</td><td>搜索数组中的元素，并返回它所在的位置</td></tr><tr><td>isArray()</td><td>判断对象是否为数组</td></tr><tr><td>join()</td><td>把数组的所有元素放入一个字符串</td></tr><tr><td>keys()</td><td>返回数组的可迭代对象，包含原始数组的键（key）</td></tr><tr><td>lastIndexOf()</td><td>搜索数组中的元素，并返回它最后出现的位置</td></tr><tr><td>map()</td><td>通过指定函数处理数组的每个元素，并返回处理后的数组</td></tr><tr><td>pop()</td><td>删除数组的最后一个元素并返回删除的元素</td></tr><tr><td>push()</td><td>向数组的末尾添加一个或更多元素，并返回数组的长度</td></tr><tr><td>reduce()</td><td>累加（从左到右）数组中的所有元素，并返回结果</td></tr><tr><td>reduceRight()</td><td>累加（从右到左）数组中的所有元素，并返回结果</td></tr><tr><td>reverse()</td><td>反转数组中元素的顺序</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>slice()</td><td>截取数组的一部分，并返回这个新的数组</td></tr><tr><td>some()</td><td>检测数组元素中是否有元素符合指定条件</td></tr><tr><td>sort()</td><td>对数组的元素进行排序</td></tr><tr><td>splice()</td><td>从数组中添加或删除元素</td></tr><tr><td>toString()</td><td>把数组转换为字符串，并返回结果</td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回新数组的长度</td></tr><tr><td>valueOf()</td><td>返回数组对象的原始值</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>无标题文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> variation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"测试元素1"</span><span class="token punctuation">,</span><span class="token string">"测试元素2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>variation<span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">"变量名"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>variation<span class="token punctuation">.</span>constructor <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：function Array() { [native code] </span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>variation<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出：2</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>variation<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//输出：变量名</span>    <span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Papaya"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 返回：[object Array Iterator]</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回：true</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"grape"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 返回：grape,grape,grape,grape,grape</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Papaya"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Mango"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 返回：4</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 返回：true</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 返回：Orange-Banana-Apple-Papaya-Mango</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Banana"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 返回：1</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// 返回：Mango</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Watermelon"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 返回：5</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"Lemon"</span><span class="token punctuation">,</span><span class="token string">"Pineapple"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回：7</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 返回：Pineapple,Orange,Banana,Apple</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 返回：Apple,Banana,Lemon,Orange,Papaya,Pineapple,Watermelon</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 返回：Apple,Banana,Lemon,Orange,Papaya,Pineapple,Watermelon    </span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Browser对象："><a href="#Browser对象：" class="headerlink" title="Browser对象："></a>Browser对象：</h1><h2 id="Windows对象：（完成）"><a href="#Windows对象：（完成）" class="headerlink" title="Windows对象：（完成）"></a>Windows对象：（完成）</h2><p>常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>closed</td><td>返回窗口是否已被关闭</td></tr><tr><td>defaultStatus</td><td>设置或返回窗口状态栏中的默认文本</td></tr><tr><td>document</td><td>对 Document 对象的只读引用</td></tr><tr><td>frames</td><td>返回窗口中所有已经命名的框架集合，集合由 Window 对象组成，每个 Window 对象在窗口中含有一个  或 <iframe> 标签</td></tr><tr><td>history</td><td>对 History 对象的只读引用，该对象中包含了用户在浏览器中访问过的 URL</td></tr><tr><td>innerHeight</td><td>返回浏览器窗口的高度，不包含工具栏与滚动条</td></tr><tr><td>innerWidth</td><td>返回浏览器窗口的宽度，不包含工具栏与滚动条</td></tr><tr><td>localStorage</td><td>在浏览器中以键值对的形式保存某些数据，保存的数据没有过期时间，会永久保存在浏览器中，直至手动删除</td></tr><tr><td>length</td><td>返回当前窗口中 <iframe> 框架的数量</td></tr><tr><td>location</td><td>引用窗口或框架的 Location 对象，该对象中包含当前 URL 的有关信息</td></tr><tr><td>name</td><td>设置或返回窗口的名称</td></tr><tr><td>navigator</td><td>对 Navigator 对象的只读引用，该对象中包含当前浏览器的有关信息</td></tr><tr><td>opener</td><td>返回对创建此窗口的 window 对象的引用</td></tr><tr><td>outerHeight</td><td>返回浏览器窗口的完整高度，包含工具栏与滚动条</td></tr><tr><td>outerWidth</td><td>返回浏览器窗口的完整宽度，包含工具栏与滚动条</td></tr><tr><td>pageXOffset</td><td>设置或返回当前页面相对于浏览器窗口左上角沿水平方向滚动的距离</td></tr><tr><td>pageYOffset</td><td>设置或返回当前页面相对于浏览器窗口左上角沿垂直方向滚动的距离</td></tr><tr><td>parent</td><td>返回父窗口</td></tr><tr><td>screen</td><td>对 Screen 对象的只读引用，该对象中包含计算机屏幕的相关信息</td></tr><tr><td>screenLeft</td><td>返回浏览器窗口相对于计算机屏幕的 X 坐标</td></tr><tr><td>screenTop</td><td>返回浏览器窗口相对于计算机屏幕的 Y 坐标</td></tr><tr><td>screenX</td><td>返回浏览器窗口相对于计算机屏幕的 X 坐标</td></tr><tr><td>sessionStorage</td><td>在浏览器中以键值对的形式存储一些数据，数据会在关闭浏览器窗口或标签页之后删除</td></tr><tr><td>screenY</td><td>返回浏览器窗口相对于计算机屏幕的 Y 坐标</td></tr><tr><td>self</td><td>返回对 window 对象的引用</td></tr><tr><td>status</td><td>设置窗口状态栏的文本</td></tr><tr><td>top</td><td>返回最顶层的父窗口</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span>defaultStatus <span class="token operator">=</span> <span class="token string">"JavaScript"</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>defaultStatus <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：JavaScript</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出：314</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出：539</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 输出：0</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 输出：file:///F:/code/index.html</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>opener <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 输出：null</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>outerHeight <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出：558</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>outerWidth <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出：555</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>parent <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 输出：[object Window]</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenLeft <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出：2263</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenTop <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出：401</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenX <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出：2263</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenY <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出：401</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>在浏览器窗口中弹出一个提示框，提示框中有一个确认按钮</td></tr><tr><td>atob()</td><td>解码一个 base-64 编码的字符串</td></tr><tr><td>btoa()</td><td>创建一个 base-64 编码的字符串</td></tr><tr><td>blur()</td><td>把键盘焦点从顶层窗口移开</td></tr><tr><td>clearInterval()</td><td>取消由 setInterval() 方法设置的定时器</td></tr><tr><td>clearTimeout()</td><td>取消由 setTimeout() 方法设置的定时器</td></tr><tr><td>close()</td><td>关闭某个浏览器窗口</td></tr><tr><td>confirm()</td><td>在浏览器中弹出一个对话框，对话框带有一个确认按钮和一个取消按钮</td></tr><tr><td>createPopup()</td><td>创建一个弹出窗口，注意：只有 IE 浏览器支持该方法</td></tr><tr><td>focus()</td><td>使一个窗口获得焦点</td></tr><tr><td>getSelection()</td><td>返回一个 Selection 对象，对象中包含用户选中的文本或光标当前的位置</td></tr><tr><td>getComputedStyle()</td><td>获取指定元素的 CSS 样式</td></tr><tr><td>matchMedia()</td><td>返回一个 MediaQueryList 对象，表示指定的媒体查询解析后的结果</td></tr><tr><td>moveBy()</td><td>将浏览器窗口移动指定的像素</td></tr><tr><td>moveTo()</td><td>将浏览器窗口移动到一个指定的坐标</td></tr><tr><td>open()</td><td>打开一个新的浏览器窗口或查找一个已命名的窗口</td></tr><tr><td>print()</td><td>打印当前窗口的内容</td></tr><tr><td>prompt()</td><td>显示一个可供用户输入的对话框</td></tr><tr><td>resizeBy()</td><td>按照指定的像素调整窗口的大小，即将窗口的尺寸增加或减少指定的像素</td></tr><tr><td>resizeTo()</td><td>将窗口的大小调整到指定的宽度和高度</td></tr><tr><td>scroll()</td><td>已废弃。您可以使用 scrollTo() 方法来替代</td></tr><tr><td>scrollBy()</td><td>将窗口的内容滚动指定的像素</td></tr><tr><td>scrollTo()</td><td>将窗口的内容滚动到指定的坐标</td></tr><tr><td>setInterval()</td><td>创建一个定时器，按照指定的时长（以毫秒计）来不断调用指定的函数或表达式</td></tr><tr><td>setTimeout()</td><td>创建一个定时器，在经过指定的时长（以毫秒计）后调用指定函数或表达式，只执行一次</td></tr><tr><td>stop()</td><td>停止页面载入</td></tr><tr><td>postMessage()</td><td>安全地实现跨源通信</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show_tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>此处显示点击按钮的效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBtoa()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>btoa()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAtob()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>atob()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAlert()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>alert()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myConfirm()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>confirm()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myOpen()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>open()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMoveBy()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>moveBy()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMoveTo()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>moveTo()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPrint()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>print()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPrompt()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>prompt()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myResizeBy()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>resizeBy()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myClose()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>close()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> ptag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'show_tag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> str<span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">myBtoa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            str <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myAtob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请先点击 btoa() 按钮"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是一个提示框！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> x<span class="token punctuation">;</span>            <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"按下按钮!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                x <span class="token operator">=</span> <span class="token string">"你按下了\"确定\"按钮!"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                x <span class="token operator">=</span> <span class="token string">"你按下了\"取消\"按钮!"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> myWin<span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">myOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myWin <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token punctuation">(</span>myWin <span class="token operator">!=</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> myWin<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                myWin <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'width=200,height=100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myMoveBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myWin <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> myWin<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">myOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myWin<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myMoveTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myWin <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> myWin<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">myOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myWin<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入你的名字。"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> name <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"你好 "</span> <span class="token operator">+</span> name  <span class="token operator">+</span> <span class="token string">"! 今天感觉如何?"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                ptag<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"你没有输入任何内容"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myResizeBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myWin <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> myWin<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">myOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myWin<span class="token punctuation">.</span><span class="token function">resizeBy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myWin <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myWin <span class="token operator">!=</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> myWin<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> myWin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Navigator对象：（完成）"><a href="#Navigator对象：（完成）" class="headerlink" title="Navigator对象：（完成）"></a>Navigator对象：（完成）</h2><p>主要用途：</p><ol><li>Navigator对象中存储与浏览器相关的信息，例如名称、版本。我们可以通过Navigator属性来获取浏览器的基本信息</li><li>window对象时一个全局对象，因此可以省略前缀window。例如window.navigator.appName可以简写为navigator.appName。</li></ol><p>主要属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>appCodeName</td><td>返回当前浏览器的内部名称（开发代号）</td></tr><tr><td>appName</td><td>返回浏览器的官方名称</td></tr><tr><td>appVersion</td><td>返回浏览器的平台和版本信息</td></tr><tr><td>cookieEnabled</td><td>返回浏览器是否启用 cookie，启用返回 true，禁用返回 false</td></tr><tr><td>onLine</td><td>返回浏览器是否联网，联网则返回 true，断网则返回 false</td></tr><tr><td>platform</td><td>返回浏览器运行的操作系统平台</td></tr><tr><td>userAgent</td><td>返回浏览器的厂商和版本信息，即浏览器运行的操作系统、浏览器的版本、名称</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>javaEnabled()</td><td>返回浏览器是否支持运行 Java Applet 小程序，支持则返回 true，不支持则返回 false</td></tr><tr><td>sendBeacon()</td><td>向浏览器异步传输少量数据</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Screen对象：（完成）"><a href="#Screen对象：（完成）" class="headerlink" title="Screen对象：（完成）"></a>Screen对象：（完成）</h2><p>主要用途：</p><ol><li>screen 对象中包含了有关计算机屏幕的信息，例如分辨率、宽度、高度等，我们可以通过 window 对象的 screen 属性来获取它。</li><li>由于window对象时全局属性，可以省略。例如windows.screen.height可以简写为screen.height</li></ol><p>主要属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>availTop</td><td>返回屏幕上方边界的第一个像素点（大多数情况下返回 0）</td></tr><tr><td>availLeft</td><td>返回屏幕左边边界的第一个像素点（大多数情况下返回 0）</td></tr><tr><td>availHeight</td><td>返回屏幕的高度（不包括 Windows 任务栏）</td></tr><tr><td>availWidth</td><td>返回屏幕的宽度（不包括 Windows 任务栏）</td></tr><tr><td>colorDepth</td><td>返回屏幕的颜色深度（color depth），根据 CSSOM（CSS 对象模型）视图，为兼容起见，该值总为 24。</td></tr><tr><td>height</td><td>返回屏幕的完整高度</td></tr><tr><td>pixelDepth</td><td>返回屏幕的位深度/色彩深度（bit depth），根据 CSSOM（CSS 对象模型）视图，为兼容起见，该值总为 24</td></tr><tr><td>width</td><td>返回屏幕的完整宽度</td></tr><tr><td>orientation</td><td>返回当前屏幕的方向</td></tr></tbody></table><p>代码示例：</p><h2 id="History对象：（完成）"><a href="#History对象：（完成）" class="headerlink" title="History对象：（完成）"></a>History对象：（完成）</h2><p>常用属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>返回浏览历史的数目，包含当前已经加载的页面。</td></tr><tr><td>scrollRestoration</td><td>利用浏览器特性，使我们在返回上一页或者下一页时，将页面滚动到之前浏览的位置，该属性有两个值，分别是 auto（表示滚动）与 manual（表示不滚动）。</td></tr><tr><td>state</td><td>返回浏览器在当前 URL 下的状态信息，如果没有调用过 pushState() 或 replaceState() 方法，则返回默认值 null。</td></tr></tbody></table><p>常用方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>back()</td><td>参照当前页面，返回历史记录中的上一条记录（即返回上一页），您也可以通过点击浏览器工具栏中的<code>←</code>按钮来实现同样的效果。</td></tr><tr><td>forward()</td><td>参照当前页面，前往历史记录中的下一条记录（即前进到下一页），您也可以通过点击浏览器工具栏中的<code>→</code>按钮来实现同样的效果。</td></tr><tr><td>go()</td><td>参照当前页面，根据给定参数，打开指定的历史记录，例如 -1 表示返回上一页，1 表示返回下一页。</td></tr><tr><td>pushState()</td><td>向浏览器的历史记录中插入一条新的历史记录。</td></tr><tr><td>replaceState()</td><td>使用指定的数据、名称和 URL 来替换当前历史记录。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>无标题文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBack()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Back方法测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForward()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>forward方法测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myGo()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>go方法测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPushState()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pushState方法测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myReplaceState()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>replaceState方法测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">myBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入一个整数'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myPushState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'page_id'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'user_id'</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">'JavaScript'</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'index.html'</span>            history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">myReplaceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'page_id'</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'user_id'</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">'history'</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'index.html'</span>            history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Location对象：（完成）"><a href="#Location对象：（完成）" class="headerlink" title="Location对象：（完成）"></a>Location对象：（完成）</h2><p>常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>hash</td><td>返回一个 URL 中锚的部分，例如：<a href="http://c.biancheng.net/#js">http://c.biancheng.net#js</a> 中的 #js。</td></tr><tr><td>host</td><td>返回一个 URL 的主机名和端口号，例如 <a href="http://c.biancheng.net:8080。">http://c.biancheng.net:8080。</a></td></tr><tr><td>hostname</td><td>返回一个 URL 的主机名，例如 <a href="http://c.biancheng.net./">http://c.biancheng.net。</a></td></tr><tr><td>href</td><td>返回一个完整的 URL，例如 <a href="http://c.biancheng.net/javascript/location-object.html%E3%80%82">http://c.biancheng.net/javascript/location-object.html。</a></td></tr><tr><td>pathname</td><td>返回一个 URL 中的路径部分，开头有个<code>/</code>。</td></tr><tr><td>port</td><td>返回一个 URL 中的端口号，如果 URL 中不包含明确的端口号，则返回一个空字符串<code>&#39; &#39;</code>。</td></tr><tr><td>protocol</td><td>返回一个 URL 协议，即 URL 中冒号<code>:</code>及其之前的部分，例如 http: 和 https:。</td></tr><tr><td>search</td><td>返回一个 URL 中的查询部分，即 URL 中<code>?</code>及其之后的一系列查询参数。</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assign()</td><td>加载指定的 URL，即载入指定的文档。</td></tr><tr><td>reload()</td><td>重新加载当前 URL。</td></tr><tr><td>replace()</td><td>用指定 URL 替换当前的文档，与 assign() 方法不同的是，使用 replace() 替换的新页面不会保存在浏览历史中，用户不能使用后退来返回该页面。</td></tr><tr><td>toString()</td><td>与 href 属性的效果相同，以字符串的形式返回当前完整的 URL。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="DOM对象："><a href="#DOM对象：" class="headerlink" title="DOM对象："></a>DOM对象：</h1><h2 id="HTML-DOM-document"><a href="#HTML-DOM-document" class="headerlink" title="HTML DOM document"></a>HTML DOM document</h2><h2 id="HTML-DOM-元素对象"><a href="#HTML-DOM-元素对象" class="headerlink" title="HTML DOM 元素对象"></a>HTML DOM 元素对象</h2><h2 id="HTML-DOM-属性对象"><a href="#HTML-DOM-属性对象" class="headerlink" title="HTML DOM 属性对象"></a>HTML DOM 属性对象</h2><h2 id="HTML-DOM-事件对象"><a href="#HTML-DOM-事件对象" class="headerlink" title="HTML DOM 事件对象"></a>HTML DOM 事件对象</h2><h2 id="HTML-DOM对象："><a href="#HTML-DOM对象：" class="headerlink" title="HTML DOM对象："></a>HTML DOM对象：</h2><h1 id="GUI辅助动作功能："><a href="#GUI辅助动作功能：" class="headerlink" title="GUI辅助动作功能："></a>GUI辅助动作功能：</h1><h3 id="OnClick："><a href="#OnClick：" class="headerlink" title="OnClick："></a>OnClick：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></iframe></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# WinForm图形化界面</title>
      <link href="posts/5deb9601.html"/>
      <url>posts/5deb9601.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C# GUI图形化编程</p><p><strong>GUI自动生成功能：</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">App.config 应用配置Form1.cs 源码文件(窗口)Form1.Designer.cs 源码文件(界面设计)业务逻辑Form.resx 资源文件Program.cs 源码文件(Main方法)由系统自动生成类的拆分：Form1：Form1.cs业务代码+Form.Designer.cs界面代码，自动生成（一般不需要手工修改）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义窗口：</strong></p><p>删除默认创建的整个form1.cs<br>选中项目-右击-添加【类】<br>选中【Visual C#-类 】，并进行命名（删除默认创建的整个form1.cs<br>选中项目-右击-添加【类】<br>选中【Visual C#-类 】，并进行命名<br>修改Form1.cs与Program.cs中的代码这里MyForm命名）</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Windows.Forms;namespace Form_1{    /*新建一个自定义窗口——MyForm*/    class MyForm: Form//MyForm继承Form，使用Alt+Enter将“using System.Windows.Forms;”填充到上方    {        public MyForm()//构造MyForm方法        {            this.Text = "我的小窗口";//设置窗口标题        }    }}2. Program.csnamespace Form_1{    static class Program    {        static void Main()        {            MyForm form = new MyForm();            Application.Run(form);//启动消息循环        }//或者也可以写成： MyForm form;    Application.Run(new MyForm());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手动添加控件和事件处理机制：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public Form(){  InitializeComponent();  Button button = new Button();  button.Click += new EventHandler(this.Ontext);  //在Form中添加回调方法  public void Ontext(object sender,EventArgs e){      MessageBox.Show("按钮被点击了");  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="语言特性："><a href="#语言特性：" class="headerlink" title="语言特性："></a>语言特性：</h2><ol><li>微软于2000年推出C#语言，继承java、C++语言特性优点的同时，在微软推动下进入最受欢迎的编程语言前五名。</li><li>在桌面软件开发市场上独居一角，Visual Studio便捷的图形化编程工具和集成常用控件使得C#在桌面软件开发市场脱颖而出。</li></ol><h2 id="控件：-Component"><a href="#控件：-Component" class="headerlink" title="控件：(Component)"></a>控件：(Component)</h2><h3 id="公共类控件：-public-Component"><a href="#公共类控件：-public-Component" class="headerlink" title="公共类控件：(public Component)"></a>公共类控件：(public Component)</h3><h4 id="文本类控件：-Text"><a href="#文本类控件：-Text" class="headerlink" title="文本类控件：(Text)"></a>文本类控件：(Text)</h4><h5 id="Label-LinkedLabel（标签）-（超链接标签）：（完成）"><a href="#Label-LinkedLabel（标签）-（超链接标签）：（完成）" class="headerlink" title="Label/LinkedLabel（标签）/（超链接标签）：（完成）"></a>Label/LinkedLabel（标签）/（超链接标签）：（完成）</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Label();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>void Name</td><td>标签对象的名称，区别不同标签唯一标志</td></tr><tr><td>void Text</td><td>标签对象上显示的文本</td></tr><tr><td>void Font</td><td>标签中显示文本的样式</td></tr><tr><td>void ForeColor</td><td>标签中显示文本的颜色</td></tr><tr><td>void BackColor</td><td>标签的背景颜色</td></tr><tr><td>void Image</td><td>标签中显示的图片</td></tr><tr><td>void AutoSize</td><td>标签的大小是否根据内容自动调整，True 为自动调整，False 为用户自定义大小</td></tr><tr><td>void Size</td><td>指定标签控件的大小</td></tr><tr><td>void Visible</td><td>标签是否可见，True 为可见，False 为不可见</td></tr></tbody></table><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">继承属性：Visible\ ForeColor\ Font1. Text：设置或返回标签控件中显示文本信息  2. AutoSize：3. 4. BorderStyle：设置或返回边框   BorderStyle.None 无边框（默认）    BorderStyle.FixedSingle 固定单边框   BorderStyle.Fixed3D 3维边框5. TabIndex：设置或返回对象Tab键顺序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实例</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Label label = new Label();label.Text = "这是一段显示文字";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实战练习：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace demo{    public partial class Form1:Form{        public Form1(){            InitialComponent();        }        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ToolTip（文本提示信息）"><a href="#ToolTip（文本提示信息）" class="headerlink" title="ToolTip（文本提示信息）"></a>ToolTip（文本提示信息）</h5><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">toolTip1.IsBalloon =true;toolTip1.SetToolTip(this.button1,"这是一则提示信息");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="TextBox（文本框）："><a href="#TextBox（文本框）：" class="headerlink" title="TextBox（文本框）："></a>TextBox（文本框）：</h5><p>常用API</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>void Text</td><td>文本框对象中显示的文本</td></tr><tr><td>void MaxLength</td><td>在文本框中最多输入的文本的字符个数</td></tr><tr><td>bool WordWrap</td><td>文本框中的文本是否自动换行，如果是 True，则自动换行，如果是 False，则不能自动换行</td></tr><tr><td>void PasswordChar</td><td>将文本框中出现的字符使用指定的字符替换，通常会使用“*”字符</td></tr><tr><td>void Multiline</td><td>指定文本框是否为多行文本框，如果为 True，则为多行文本框，如果 为 False，则为单行文本框</td></tr><tr><td>void ReadOnly</td><td>指定文本框中的文本是否可以更改，如果为 True，则不能更改，即只读文本框，如果为 False，则允许更改文本框中的文本</td></tr><tr><td>void Lines</td><td>指定文本框中文本的行数</td></tr><tr><td>void ScrollBars</td><td>指定文本框中是否有滚动条，如果为 True，则有滚动条,如果为 False， 则没有滚动条</td></tr></tbody></table><p>代码示例：（用户登录）</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class TextBoxTest : Form{    public TextBoxTest()    {        InitializeComponent();    }    //文本框文本改变事件    private void textBox1_TextChanged(object sender, EventArgs e)    {        //将文本框中的文本值显示在标签中        label2.Text = textBox1.Text;    }}//========================LoginPanel========================public partial class LoginForm : Form{    public LoginForm()    {        InitializeComponent();    }    //判断是否登录成功    private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)    {        //获取用户名        string username = textBox1.Text;        //获取密码        string password = textBox2.Text;        //判断用户名密码是否正确        if ("xiaoming".Equals(username) &amp;&amp; "123456".Equals(password))        {            MessageBox.Show("登录成功！");        }        else        {            MessageBox.Show("登录失败！");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="RichTextBox（格式文本）："><a href="#RichTextBox（格式文本）：" class="headerlink" title="RichTextBox（格式文本）："></a>RichTextBox（格式文本）：</h5><p>构造函数：</p><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h5 id="ProgressBar（进度条）："><a href="#ProgressBar（进度条）：" class="headerlink" title="ProgressBar（进度条）："></a>ProgressBar（进度条）：</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Minmum</td><td>指定ProgressBar操作范围的下界</td></tr><tr><td>Maxmum</td><td>指定ProgressBar操作范围的上界</td></tr><tr><td>Value</td><td>获取在最大值和最小值属性</td></tr><tr><td>Step</td><td>指定在调用PerformStep方法事件控件的当前值的地递增量</td></tr></tbody></table><p> 代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="按钮类控件：-Button"><a href="#按钮类控件：-Button" class="headerlink" title="按钮类控件：(Button)"></a>按钮类控件：(Button)</h4><h5 id="Button（按钮）："><a href="#Button（按钮）：" class="headerlink" title="Button（按钮）："></a>Button（按钮）：</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void Name</td><td>//按钮对象的识别名称</td></tr><tr><td>void Text</td><td>//按钮显示文字</td></tr><tr><td>void TextAlign</td><td>//按钮表面文字显示位置</td></tr><tr><td>void FlatStyle</td><td>//按钮外观</td></tr><tr><td>void Visible</td><td>//按钮显示还是隐藏</td></tr><tr><td>void Image</td><td>//按钮表面显示图标</td></tr><tr><td>void ImageAlign</td><td>//按钮表面显示图标的位置</td></tr></tbody></table><p><strong>主要事件</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"> Button button = new Button(); button.Click+= new EventHandler(this.DemoMethod);（Click为备选事件名） public void DemoMethod_Click(object sender,EventArgs e){     MessageBox.Show("弹出按钮显示文字框"); }1. Click事件：左键单击单击按钮控件触发2. MouseDown事件：在按钮控件上按下鼠标按钮触发3. MouseUp事件：释放鼠标按钮时触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace demo{public partial class Register:Form{    public Register(){        InitializeComponent();    }  //“确定”按钮的单击事件，用于判断注册信息并跳转到新窗口显示注册信息    private void button1_Click(object sender, EventArgs e)    {        string name = textBox1.Text;        string pwd = textBox2.Text;        string repwd = textBox3.Text;        if (string.IsNullOrEmpty(name))        {            MessageBox.Show("用户名不能为空！");            return;        }        else if (string.IsNullOrEmpty(textBox2.Text))        {            MessageBox.Show("密码不能为空！");            return;        }        else if (!textBox2.Text.Equals(textBox3.Text))        {            MessageBox.Show("两次输入的密码不一致！");            return;        }        //将用户名和密码传递到主窗体中        MainForm mainForm = new MainForm(name, pwd);        mainForm.Show();    }    //“取消”按钮的事件，用于关闭窗体    private void button2_Click(object sender, EventArgs e)    {        //关闭窗体        this.Close();    }}//==========================MainForm=============================using System;using System.Windows.Forms;namespace demo{    public partial class MainForm:Form{        public MainForm(string name,string pwd){            InitializeComponent();            label.Text ="用户名" + name;            label2.Text ="密码" + pwd;        }           }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="RadioButton（单选按钮）"><a href="#RadioButton（单选按钮）" class="headerlink" title="RadioButton（单选按钮）"></a>RadioButton（单选按钮）</h5><p>构造方法</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>bool Checked</td><td>判断控件是否被选中</td></tr><tr><td>Appearance</td><td>获取或设置一个值，该值用于确定 RadioButton 的外观。如果 Appearance 值设置为 Normal，则在绘制 RadioButton 控件时使用圆形复选框。 若该值设置为 Button，则将 RadioButton 绘制成一个可切换为向上或向下状态的控件。 每种类型都可显示文本或图像，或同时显示两者。</td></tr><tr><td>TabStop</td><td>获取或设置一个值，该值指示用户能否使用 Tab 键将焦点放到该控件上。</td></tr><tr><td>Tag</td><td>获取或设置包含有关控件的数据的对象。</td></tr></tbody></table><p>常用事件：</p><table><thead><tr><th>常用事件</th><th>释义</th></tr></thead><tbody><tr><td>Click</td><td>当单击单选按钮，将把单选按钮的Checked属性值设置为true，同时发生Click事件。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace demo{    public partial class RadioButtonDemo:Form{        public RadioButtonDemo(){            InitializeComponent();        }   private void Form_Load(object sender,EventArgs e){     //设置两个单选按钮的的Checked属性为false    radioButton1.Checked = false;    radioButton2.Checked = false;}  private void radioButton2_Click(object sender, EventArgs e){    //控件的Click事件中通过if语句判断控件的Checked属性的返回值是否为True    if (radioButton2.Checked == true)    {        MessageBox.Show("RadioButton2控件被选中");    }}  private void radioButton1_Click(object sender, EventArgs e){    //控件的Click事件中通过if语句判断控件的Checked属性的返回值是否为True    if (radioButton1.Checked == true)    {        MessageBox.Show("RadioButton1控件被选中");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="GroupButton（按钮组）"><a href="#GroupButton（按钮组）" class="headerlink" title="GroupButton（按钮组）"></a>GroupButton（按钮组）</h5><h5 id="DropDownButton（"><a href="#DropDownButton（" class="headerlink" title="DropDownButton（"></a>DropDownButton（</h5><p>构造方法：</p><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Display</td><td>指示是否显示图像和文本</td></tr><tr><td>bool DoubleClickEnabled</td><td>指示是否出现双击事件</td></tr><tr><td>void DropDownItems</td><td>指示当单击对象时显示的ToolStripItems</td></tr></tbody></table><h4 id="选择类控件：-Choice"><a href="#选择类控件：-Choice" class="headerlink" title="选择类控件：(Choice)"></a>选择类控件：(Choice)</h4><h5 id="ComboBox（下拉组合框）：（完成）"><a href="#ComboBox（下拉组合框）：（完成）" class="headerlink" title="ComboBox（下拉组合框）：（完成）"></a>ComboBox（下拉组合框）：（完成）</h5><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ComboBox();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>void DropDownStyle</td><td>获取或设置组合框的外观，如果值为 Simple，同时显示文本框和列表框，并且文本框可以编辑；如果值为 DropDown，则只显示文本框，通过鼠标或键盘的单击事件展开文本框，并且文本框可以编辑；如果值为 DropDownList，显示效果与 DropDown 值一样，但文本框不可编辑。默认情况下为 DropDown</td></tr><tr><td>Items</td><td>获取或设置组合框中的值</td></tr><tr><td>void Text</td><td>获取或设置组合框中显示的文本</td></tr><tr><td>void MaxDropDownltems</td><td>获取或设置组合框中最多显示的项数</td></tr><tr><td>bool Sorted</td><td>指定是否对组合框列表中的项进行排序，如果值为 True，则排序， 如果值为 False，则不排序。默认情况下为 False</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace Form1Demo{    public partial class Form1 : Form    {        public Form1()        {            InitializeComponent();        }        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)        {            MessageBox.Show("您选择的专业是：" + comboBox1.Text, "提示");        }        private void Form1_Load(object sender, EventArgs e)        {            comboBox1.Items.Add("计算机应用");            comboBox1.Items.Add("英语");            comboBox1.Items.Add("会计");            comboBox1.Items.Add("软件工程");            comboBox1.Items.Add("网络工程");        }        private void button2_Click(object sender, EventArgs e)        {            //判断文本框是否为空            if (textBox1.Text != "")            {                //判断组合框中是否存在文本框中输入的值                if (comboBox1.Items.Contains(textBox1.Text))                {                    comboBox1.Items.Remove(textBox1.Text);                }                else                {                    MessageBox.Show("您输入的专业不存在", "提示");                }            }            else            {                MessageBox.Show("请输入要删除的专业", "提示");            }        }        private void button1_Click(object sender, EventArgs e)        {            //判断文本框中是否为空，不为空则将其添加到组合框中            if (textBox1.Text != "")            {                //判断文本框中的值是否与组合框中的的值重复                if (comboBox1.Items.Contains(textBox1.Text))                {                    MessageBox.Show("该专业已存在！");                }                else                {                    comboBox1.Items.Add(textBox1.Text);                }            }            else            {                MessageBox.Show("请输入专业！", "提示");            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="CheckBox-CheckedListBox（复选框）："><a href="#CheckBox-CheckedListBox（复选框）：" class="headerlink" title="CheckBox/CheckedListBox（复选框）："></a>CheckBox/CheckedListBox（复选框）：</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void Name</td><td>设置组件名称</td></tr><tr><td>void Text</td><td>设置组件显示文字</td></tr><tr><td>bool Checked</td><td>表示组件是否被选中</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class CheckBoxForm : Form{    public CheckBoxForm()    {        InitializeComponent();    }    private void button1_Click(object sender,EventArgs e){      string context="";          }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用事件</strong></p><p>与RadioButton一致</p><p>列表类控件</p><h5 id="ListBox（列表框）：（完成）"><a href="#ListBox（列表框）：（完成）" class="headerlink" title="ListBox（列表框）：（完成）"></a>ListBox（列表框）：（完成）</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>string MultiColumn</td><td>获取或设置列表框是否支持多列，如果设置为 True，则表示支持多列； 如果设置为 False，则表示不支持多列，默认为 False</td></tr><tr><td>string Items</td><td>获取或设置列表框控件中的值</td></tr><tr><td>string SelectedItems</td><td>获取列表框中所有选中项的集合</td></tr><tr><td>string SelectedItem</td><td>获取列表框中当前选中的项</td></tr><tr><td>string SelectedIndex</td><td>获取列表框中当前选中项的索引，索引从 0 开始</td></tr><tr><td>string SelectionMode</td><td>获取或设置列表框中选择的模式，当值为 One 时，代表只能选中一项， 当值为 MultiSimple 时，代表能选择多项，当值为 None 时，代表不能选 择，当值为 MultiExtended 时，代表能选择多项，但要在按下 Shift 键后 再选择列表框中的项</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class ListBoxForm : Form{    public ListBoxForm()    {        InitializeComponent();    }    private void button_Click(object sender,EventArgs e){      string msg ="";      for(int i=0;i&lt;listBox1.SelectedItems.Count;i++){      msg = msg + " " + listBox1.SelectedItems[i].ToString();        }        if (msg != "")        {            MessageBox.Show("您选择的爱好是：" + msg, "提示");        }        else        {            MessageBox.Show("您没有选择爱好", "提示");        }    }   //将列表框中的选中项删除private void button2_Click(object sender, EventArgs e){    //由于列表框控件中允许多选所以需要循环删除所有已选项    int count = listBox1.SelectedItems.Count;    List&lt;string&gt; itemValues = new List&lt;string&gt;();    if (count != 0)    {        for(int i = 0; i &lt; count; i++)        {            itemValues.Add(listBox1.SelectedItems[i].ToString());        }        foreach(string item in itemValues)        {            listBox1.Items.Remove(item);        }    }    else    {        MessageBox.Show("请选择需要删除的爱好！");    }}//将文本框中的值添加到列表框中private void button3_Click(object sender, EventArgs e){    //当文本框中的值不为空时将其添加到列表框中    if (textBox1.Text != "")    {        listBox1.Items.Add(textBox1.Text);    }    else    {        MessageBox.Show("请添加爱好！");    }}}           }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ListView（列表视图）（完成）"><a href="#ListView（列表视图）（完成）" class="headerlink" title="ListView（列表视图）（完成）"></a>ListView（列表视图）（完成）</h5><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API与属性</th><th>释义</th></tr></thead><tbody><tr><td>FullRowSelect</td><td>设置是否行选择模式（默认为false），只有在Details视图该属性才有意义</td></tr><tr><td>GridLines</td><td>设置行与列之间是否显示网格线（默认为false），只有在Details视图下该属性才有意义</td></tr><tr><td>AllowColumnRecorder</td><td>设置是否可拖动列表头来改变列的顺序（默认为false）提示：只有在Detail视图下该属性才有意义。</td></tr><tr><td>View</td><td>//获取或设置项在控件中的显示方式，包括Details、LargeIcon、List、SmallIcon、Tile（默认为 LargeIcon）</td></tr><tr><td>MultiSelect</td><td>设置是否可以选择多个项（默认为false）</td></tr><tr><td>LabelEdit</td><td>//设置用户是否可以编辑控件中项的标签</td></tr><tr><td>CheckBoxes</td><td>//设置控件中各项的旁边是否显示复选框（默认为false）</td></tr><tr><td>LargeImageList<br>SmallImageList<br>StateImageList</td><td>//大图标集<br>//小图标集<br>//图像蒙版，可用作LargeImageList和SmallImageList的覆盖图，这些图像可用于指示项的应用程序定义的状态。</td></tr><tr><td>SelectedItems<br>CheckedItesms</td><td>//获取在控件中选定的项<br>//获取控件中当前复选框选中的项</td></tr><tr><td>Sorting：<br>可选值:<br>* Ascending：递增顺序排序<br>* Descending：递减顺序排序</td><td>对列表视图的项进行排序（默认为None）</td></tr><tr><td>HoverSelection<br>HideSelection</td><td>设置但鼠标指针悬停于项上时是否自动选择项<br>设置选定项时在控件没焦点时是否扔突出显示</td></tr><tr><td>HotTracking</td><td>设置当前鼠标指针经过项文本时，其外观是否变为超链接形式</td></tr><tr><td>Groups</td><td>设置分组的对象集合</td></tr><tr><td>BeginUpdate<br>EndUpdate</td><td>避免在调用EndUpdate方法之前描述控件，当插入大量数据时，可以有效地避免控件闪烁，大大提高速度<br></td></tr><tr><td>EnsureVisible</td><td>列表视图滚动定位到指定索引项的选项行</td></tr><tr><td>FindItemWithText</td><td>//查找以给定文本值开头的第一个ListViewItem</td></tr><tr><td>FindNearestItem</td><td>按照指定的搜索方向，从给定节点开始查找下一个项。只有在LargeIcon或SmallIcon视图下才能使用该方法</td></tr></tbody></table><p>常用事件：</p><table><thead><tr><th>常用事件</th><th>释义</th></tr></thead><tbody><tr><td>AfterLabelEdit</td><td>当用户编辑玩项的标签时发生，需要LabelEdit属性为true</td></tr><tr><td>BeforeLabelEdit</td><td>当用户开始编辑项的标签时发生</td></tr><tr><td>ColumnClick</td><td>当用户在列表视图控件中单击列表头时发生，</td></tr></tbody></table><p>列表五种视图：</p><ol><li><p>LargeIcon：每个项都显示为一个最大化图标，在它的下面有一个标签。（效果见下图）</p></li><li><p>SmallIcon：每个项都显示为一个小图标，在它的右边带一个标签。（效果见下图）</p></li><li><p>List：每个项都显示为一个小图标，在它的右边带一个标签。各项排列在列中，没有列标头。（效果见下图）</p></li><li><p>Details：可以显示任意的列，但只有第一列可以包含一个小图标和标签，其它的列项只能显示文字信息，有列表头。（效果见下图）</p></li><li><p>Tile：每个项都显示为一个完整大小的图标，在它的右边带项标签和子项信息。（只有Windows XP 和 Windows Server 2003 系列支持）</p></li></ol><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态栏控件：-Strip"><a href="#状态栏控件：-Strip" class="headerlink" title="状态栏控件：(Strip)"></a>状态栏控件：(Strip)</h4><h5 id="ContextMenuStrip（快捷菜单）（完成）"><a href="#ContextMenuStrip（快捷菜单）（完成）" class="headerlink" title="ContextMenuStrip（快捷菜单）（完成）"></a>ContextMenuStrip（快捷菜单）（完成）</h5><p>最常见的用途：</p><ol><li>作为托盘图标右键提示的菜单，显示可执行的内容</li><li>作为文本框右键菜单选项</li></ol><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ContextMenuStrip();//代码示例ContextMenuStrip strip = new ContextMenuStrip();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主要属性：</p><table><thead><tr><th>属性</th><th>释义</th></tr></thead><tbody><tr><td>SourceControl</td><td>设置该右键菜单的控件</td></tr><tr><td>Item</td><td>子菜单集合，子菜单项也可多层次</td></tr></tbody></table><p>代码示例</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.WinFormnamespace ContextMenuStripDemo:Form{public partial class ContextMenuStripDemo:Form{   public ContextMenuStripDemo(){      InitializeComponent();   }    #region 隐藏任务栏图标、显示托盘图标        private void Form1_SizeChanged(object sender,EventArgs e)        {            if(WindowState == FormWindowState.Minimized)            {                notifyIcon1.Icon = Icon;                this.ShowInTaskbar = false;                notifyIcon1.Visible = true;            }        }        #endregion        #region 还原窗体        private void notifyIcon1_DoubleClick(object sender,EventArgs e)        {            if (WindowState == FormWindowState.Normal)            {                WindowState = FormWindowState.Normal;                this.Activate();                this.ShowInTaskbar = true;                notifyIcon1.Visible = true;            }        }     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="MenuStrip（菜单栏）：（完成）"><a href="#MenuStrip（菜单栏）：（完成）" class="headerlink" title="MenuStrip（菜单栏）：（完成）"></a>MenuStrip（菜单栏）：（完成）</h5><p><strong>主要属性</strong></p><table><thead><tr><th>主要属性</th><th>释义</th></tr></thead><tbody><tr><td>MidWindowListItem</td><td>用于获取或设置显示MDI子窗体列表中的ToolStripMenuItem</td></tr><tr><td>ShowItemToolStrip</td><td>用于或设置一个值，该值指示MenuStrip是否支持溢出功能</td></tr><tr><td>ShortcutKeys</td><td>获取或设置与ToolStripMenuItem关联的快捷键</td></tr><tr><td>ShowShortcutKeys</td><td>获取或设置一个值，指示ToolStripMenuItem关联的快捷键是否显示在ToolStripMenuItem旁边</td></tr><tr><td>DefaultItem</td><td>用来获取设置一个值，指示菜单项是否为默认菜单项。</td></tr></tbody></table><p><strong>常用事件</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Click事件：用户单击菜单项时发生<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ScrollBar（拖动条）：（完成）"><a href="#ScrollBar（拖动条）：（完成）" class="headerlink" title="ScrollBar（拖动条）：（完成）"></a>ScrollBar（拖动条）：（完成）</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ScrollBars属性的属性值及说明</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>Both</td><td>只有当文本超过控件的宽度或长度时，才显示水平滚动条或垂直滚动条，或两个滚动条都显示</td></tr><tr><td>None</td><td>从不显示任何类型的滚动条</td></tr><tr><td>Horizontal</td><td>只有当文本超过控件的宽度时，才显示水平滚动条。必须将WordWrap属性设置为false，才会出现这种情况</td></tr><tr><td>Vertical</td><td>只有当文本超过控件的高度时，才显示垂直滚动条</td></tr><tr><td>ForcedHorizontal</td><td>当WordWrap属性设置为false时，显示水平滚动条。在文本未超过控件的宽度时，该滚动条显示为浅灰色</td></tr><tr><td>ForcedVertical</td><td>始终显示垂直滚动条。在文本未超过控件的长度时，该滚动条显示为浅灰色</td></tr><tr><td>ForcedBoth</td><td>始终显示垂直滚动条。当WordWrap属性设置为false时，显示水平滚动条。在文本未超过控件的宽度或长度时，两个滚动条均显示为灰色</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Froms;namespace ScrollBarDemo{    public partial class ScrollBarDemo:Form{        public ScrollBarDemo(){            InitializeComponent();        }            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="StatusStrip（状态栏）：（完成）"><a href="#StatusStrip（状态栏）：（完成）" class="headerlink" title="StatusStrip（状态栏）：（完成）"></a>StatusStrip（状态栏）：（完成）</h5><p>用于在界面中给用户一些提示，例如登录到一个系统后，在状态栏上显示登录人的用户名、系统时间等信息，软件底部显示一些信息。</p><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用属性</p><table><thead><tr><th>常用属性</th><th>释义</th></tr></thead><tbody><tr><td>Name</td><td>获取或设置控件的名称</td></tr><tr><td>TextDirection</td><td>获取或设置在ToolStrip上绘制文本的方向</td></tr><tr><td>Item</td><td>枚举型含有多个方法如下文所示</td></tr></tbody></table><p>Item：枚举型</p><table><thead><tr><th>属性</th><th>释义</th></tr></thead><tbody><tr><td>ToolStripStatusLabel<br>* Name<br>* Text<br>* BorderSlides</td><td>表示StatusStrip控件中的一个面板<br>* 获取或设置项的名称<br>* 获取或设置要显示在项上的文字<br>* 获取设置一个值，指示ToolStripStatusLabel的哪些边显示边框</td></tr><tr><td>ToolStripDropDownButton</td><td>表示单击时显示关联的 ToolStripDropDown 的控件，用户可从该下拉控件中选择一项。</td></tr><tr><td>ToolStripSplitButton</td><td>表示左侧标准按钮和右侧下拉按钮的组合，如果 RightToLeft 的值为 Yes，则这两个按钮位置互换。</td></tr><tr><td>ToolStripProgressBar</td><td>表示 StatusStrip 中包含的 Windows 进度栏控件。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.WinForms.Forms;namespace ToolStripDemo:Form{    public partial class ToolStripDemo:Form{        public ToolStripDemo(){            InitializeComponent();        }    private void Form1_Load(object sender,EventArgs e){   DateTime dt = DateTime.Now;   string str = "启动时间：" + dt.Date.ToString("yyyy/mm/dd") + " " + dt.Hour.ToString() + ":" + dt.Minute.ToString() + ":" + dt.Second.ToString();   toolStripStatusLabel1.Text = str;         }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ToolStrip（工具栏）：（完成）"><a href="#ToolStrip（工具栏）：（完成）" class="headerlink" title="ToolStrip（工具栏）：（完成）"></a>ToolStrip（工具栏）：（完成）</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主要属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ImageScalingSize</td><td>工具栏中的项显示的图像的大小</td></tr><tr><td>Items</td><td>在工具栏上显示的项的集合</td></tr></tbody></table><p>工具栏项的主要属性和事件</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>DisplayStyle</td><td>说明图像和文本的显示方式</td></tr><tr><td>Image</td><td>按钮标签上显示的图片</td></tr><tr><td>ImageScaling</td><td>是否调整按钮标签上显示的图片大小</td></tr><tr><td>Text</td><td>按钮/标题上显示的文本</td></tr><tr><td>TextImageRelation</td><td>按钮/标题上图像与文本的相对位置</td></tr></tbody></table><p>工具栏控件8个样式：</p><table><thead><tr><th>控件名称</th><th>命名规范</th><th>释义</th></tr></thead><tbody><tr><td>Button</td><td>tsbtn</td><td>//工具栏中按钮</td></tr><tr><td>Label</td><td>tslbl</td><td>//工具栏中标题</td></tr><tr><td>SplitButton</td><td>tssb</td><td>//工具栏中分割按钮</td></tr><tr><td>DropDownButton</td><td>tsddb</td><td>//工具栏中下拉按钮</td></tr><tr><td>Separator</td><td>tss</td><td>//工具栏中分割线</td></tr><tr><td>ComboBox</td><td>tscbo</td><td>//下拉框</td></tr><tr><td>TestBox</td><td>tsbtxt</td><td>//文本框</td></tr><tr><td>ProgressBar</td><td>tspb</td><td>//工具栏中进度条</td></tr></tbody></table><p>通过DisplayStyle修改控件显示属性：</p><table><thead><tr><th>控件</th><th>释义</th></tr></thead><tbody><tr><td>None</td><td>不显示</td></tr><tr><td>Text</td><td>显示文本</td></tr><tr><td>Image</td><td>显示图片</td></tr><tr><td>ImageAndText</td><td>显示文本和图片</td></tr></tbody></table><ul><li>事件：Click：单击按钮标题时，触发该事件。</li></ul><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="TreeView（树组件）：（完成）"><a href="#TreeView（树组件）：（完成）" class="headerlink" title="TreeView（树组件）：（完成）"></a>TreeView（树组件）：（完成）</h5><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>string Index</td><td>//获取树节点在树节点集合中的位置</td></tr><tr><td>string Nodes</td><td>//获取分配给树视图控件的树节点集合</td></tr><tr><td>string Parent</td><td>//获取或设置控件的父容器</td></tr><tr><td>string SelectedNode</td><td>//获取当前树视图控件中选定的树节点</td></tr><tr><td>void ExpandAll</td><td>展开所有树节点</td></tr><tr><td>bool  Checked</td><td>指示树节点是否处于选中状态</td></tr><tr><td>void Text</td><td>获取或设置树节点标签显示的文本</td></tr><tr><td>void Clear</td><td>清空树</td></tr><tr><td>void Remove</td><td>//从树视图组件中移除当前树节点</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.IO;using System.Text;using System.Windows.Forms;namespace Form1{    public partial class Form1 : Form    {        public Form1()        {            InitializeComponent();        }                private void button1_Click(object sender, EventArgs e)        {            TreeNode treeNode = new TreeNode(textBox1.Text, 2, 2);            treeView1.Nodes.Add(treeNode);            treeView1.Select();        }        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)        {        }        private void button2_Click(object sender, EventArgs e)        {            TreeNode selectdnode = treeView1.SelectedNode;            if (selectdnode != null)            {                TreeNode chnode = new TreeNode(textBox2.Text, 2, 2);                selectdnode.Nodes.Add(chnode);                selectdnode.Expand();                treeView1.Select();            }            else            {                MessageBox.Show("请选择需要添加子节点");            }        }        private void button3_Click(object sender, EventArgs e)        {            TreeNode selectnode = treeView1.SelectedNode;            TreeNode parentnode = selectnode.Parent;            if (parentnode == null)            {                treeView1.Nodes.Remove(selectnode);            }            else            {                parentnode.Nodes.Remove(selectnode);            }            treeView1.Select();        }        private void button4_Click(object sender, EventArgs e)        {            treeView1.Nodes.Clear();        }        private void button5_Click(object sender, EventArgs e)        {            this.textBox1.Clear();            this.textBox2.Clear();        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Timer（计时器）（完成）"><a href="#Timer（计时器）（完成）" class="headerlink" title="Timer（计时器）（完成）"></a>Timer（计时器）（完成）</h5><p>主要作用是按一定时间间隔周期性触发一个名为Tick的事件，因此在该事件的代码中可以放置一些需要每隔一段时间重复执行的程序段。在程序运行时，定时器控件是不可见的。</p><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API</p><table><thead><tr><th>常用API/属性</th><th>释义</th></tr></thead><tbody><tr><td>Enabled</td><td>用来设置定时器是否正在运行。值为 true 时，定时器正在运行，值为 false 时，定时器不在运行。</td></tr><tr><td>Interval</td><td>用来设置定时器两次Tick事件发生的时间间隔，以毫秒为单位。如它的值设置为500，则将每隔0.5秒发生一个Tick事件。</td></tr><tr><td>Start();<br>Stop</td><td>用来启动的定时器/用来停止计时器</td></tr></tbody></table><ul><li>Tick：每隔Interval时间后将触发一次该事件。</li></ul><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绘图控件：-Graphics"><a href="#绘图控件：-Graphics" class="headerlink" title="绘图控件：(Graphics)"></a>绘图控件：(Graphics)</h4><h5 id="Graphics（图像绘制）"><a href="#Graphics（图像绘制）" class="headerlink" title="Graphics（图像绘制）"></a>Graphics（图像绘制）</h5><h5 id="SolidBrush（实心笔刷）"><a href="#SolidBrush（实心笔刷）" class="headerlink" title="SolidBrush（实心笔刷）"></a>SolidBrush（实心笔刷）</h5><h5 id="HatchBrush（阴影笔刷）"><a href="#HatchBrush（阴影笔刷）" class="headerlink" title="HatchBrush（阴影笔刷）"></a>HatchBrush（阴影笔刷）</h5><h5 id="LineGradientBrush（渐变笔刷）"><a href="#LineGradientBrush（渐变笔刷）" class="headerlink" title="LineGradientBrush（渐变笔刷）"></a>LineGradientBrush（渐变笔刷）</h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="C-特有控件：（private-Component）"><a href="#C-特有控件：（private-Component）" class="headerlink" title="C#特有控件：（private Component）"></a>C#特有控件：（private Component）</h3><h4 id="数值选择：NumericUpDown（待证明）"><a href="#数值选择：NumericUpDown（待证明）" class="headerlink" title="数值选择：NumericUpDown（待证明）"></a>数值选择：NumericUpDown（待证明）</h4><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>DecimalPlaces</td><td>//获取或设置控件中显示的小数位数</td></tr><tr><td>Haxadecimal</td><td>//获取或设置一个值，该值指示该控件是否以十六进制格式显示所包含的值</td></tr><tr><td>Increment</td><td>//获取或设置单击向上或向下按钮时，该控件递增或递减的值</td></tr><tr><td>Maximum<br>Minimum</td><td>//获取或设置该控件最大值、最小值</td></tr><tr><td>Value</td><td>//获取或设置控件当前值</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图片选择：PictureBox（完成）"><a href="#图片选择：PictureBox（完成）" class="headerlink" title="图片选择：PictureBox（完成）"></a>图片选择：PictureBox（完成）</h4><p><strong>常用属性</strong></p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>Image</td><td>获取或设置图片控件中显示的图片</td></tr><tr><td>ImageLocation</td><td>获取或设置图片控件中显示图片的路径</td></tr><tr><td>SizeMode</td><td>枚举值，表示图片大小的显示模式</td></tr></tbody></table><table><thead><tr><th>SizeMode枚举值型</th><th>释义</th></tr></thead><tbody><tr><td>Normal</td><td>表示图像被置于空间左上角，如果图片比图片控件大，则图像将被剪切；</td></tr><tr><td>AutoSize</td><td>自动调整图片框大小，使其等于所包含的图像大小；</td></tr><tr><td>CenterImage</td><td>表示如果图片框比图片大，则剧中显示，如果图片比图片框大则剪切边沿；</td></tr><tr><td>StretchIamge</td><td>表示将图片框中的图像拉伸或收缩，以适合图片框的大小；</td></tr><tr><td>zoom</td><td>表示图像大小按其原有的大小比例缩放。</td></tr></tbody></table><p>代码示例</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class PictureBoxFormDemo:Form{    public PictureBoxFormBoxDemo(){        InitialComponent();    }  private void PictureBoxFormDemo_Load(object sender,EventArgs e){        }    private void button1_Click(object sender,EventArgs e){        }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="滑块控件：TrackBar（完成）"><a href="#滑块控件：TrackBar（完成）" class="headerlink" title="滑块控件：TrackBar（完成）"></a>滑块控件：TrackBar（完成）</h4><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Maximum<br>Minimum</td><td>//用来获取或设置TrackBar控件可表示的范围上限，最大值（最小值</td></tr><tr><td>Orientation</td><td>//用来获取或设置一个值，指示跟踪条是水平方向还是垂直方向</td></tr><tr><td>LargeChange<br>SmallChange</td><td>//获取或设置一个值，指示当滑块长距离移动时应为Value属性中加上或减去的值。</td></tr><tr><td>Value</td><td></td></tr><tr><td>TickFrequency</td><td></td></tr><tr><td>TickStyle</td><td>//用来获取或设置一个值，该值指示如何显示跟踪条上的刻度线。该属性的取值及含义如表9-12 所示。</td></tr></tbody></table><p>常用事件：</p><ul><li>ValueChanged：该事件在TrackBar控件的Value属性值改变时发生。</li></ul><h4 id="浏览器控件：WebBroswer（完成）"><a href="#浏览器控件：WebBroswer（完成）" class="headerlink" title="浏览器控件：WebBroswer（完成）"></a>浏览器控件：WebBroswer（完成）</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>GoBack<br>GoForward<br>GoHome<br>GoSearch</td><td>//使你在当前历史列表中后退一项<br>//使你在当前历史列表中前进一项<br>//相当于主页按钮，连接用户默认主页<br>//相当于搜索按钮，连接用户默认的搜索页面</td></tr><tr><td>Navigate</td><td>连接到指定的URL</td></tr><tr><td>Refresh<br>Refresh2</td><td>刷新当前页面<br>可以指定刷新级别，枚举值下方展开具体叙述</td></tr></tbody></table><table><thead><tr><th>Refresh2枚举值</th><th>释义</th></tr></thead><tbody><tr><td><em>REFRESH_NORMAL</em></td><td><em>执行简单的刷新，不将**HTTP pragma: no-cache头发送给服务器</em></td></tr><tr><td><em>REFRESH_IFEXPIRED</em></td><td><em>只有在网页过期后才进行简单的刷新</em></td></tr><tr><td><em>REFRESH_CONTINUE</em></td><td><em>仅作内部使用。在**MSDN里写着DO NOT USE! 请勿使用</em></td></tr><tr><td><em>REFRESH_COMPLETELY</em></td><td><em>将包含**pragma: no-cache头的请求发送到服务器</em></td></tr><tr><td><em>Stop</em></td><td><em>相当于**IE的“停止”按钮，停止当前页面及其内容的载入</em></td></tr></tbody></table><p>常用属性：</p><table><thead><tr><th>属性值</th><th>释义</th></tr></thead><tbody><tr><td><em>Application</em></td><td><em>该对象有效，则返回掌管**WebBrowser控件的应用程序实现的自动化对象(IDispatch)。如果在宿主对象中自动化对象无效，这个程序将返回WebBrowser控件的自动化对象</em></td></tr><tr><td><em>Parent</em></td><td><em>返回**WebBrowser控件的父自动化对象，通常是一个容器，例如是宿主或IE窗口</em></td></tr><tr><td><em>Container</em></td><td><em>返回**WebBrowser控件容器的自动化对象。通常该值与Parent属性返回的值相同</em></td></tr><tr><td><em>TopLevelContainer</em></td><td><em>返回一个**Boolean值，表明IE是否是WebBrowser控件顶层容器，是就返回true</em></td></tr><tr><td><em>Type</em></td><td><em>返回已被**WebBrowser控件加载的对象的类型。例如：如果加载.doc文件，就会返回Microsoft Word Document</em></td></tr><tr><td>Left<br>Top<br>Width<br>Height</td><td>//<em>返回或设置**WebBrowser控件窗口的内部左边与容器窗口左边的距离</em><br>//<em>返回或设置**WebBrowser控件窗口的内部左边与容器窗口顶边的距离</em><br>宽度与高度，以像素为单位</td></tr><tr><td><em>LocationName</em></td><td><em>返回一个字符串，该字符串包含着**WebBrowser当前显示的资源的名称，如果资源是网页就是网页的标题；如果是文件或文件夹，就是文件或文件夹的名称</em></td></tr><tr><td><em>LocationURL</em></td><td><em>返回**WebBrowser当前正在显示的资源的URL</em></td></tr><tr><td><em>Busy</em></td><td><em>返回一个Boolean值，说明WebBrowser当前是否正在加载URL，如果返回true就可以使用stop方法来撤销正在执行的访问操作</em></td></tr></tbody></table><p>常用事件：</p><table><thead><tr><th>事件名</th><th>释义</th></tr></thead><tbody><tr><td><em>BeforeNavigate2</em></td><td><em>导航发生前激发，刷新时不激发</em></td></tr><tr><td><em>CommandStateChange</em></td><td><em>当命令的激活状态改变时激发。它表明何时激活或关闭**Back和Forward菜单项或按钮</em></td></tr><tr><td><em>DocumentCompleted</em></td><td><em>当整个文档完成时激发，刷新页面不激发</em></td></tr><tr><td><em>DownloadBegin</em><br><em>DownloadCompleted</em></td><td><em>当某项下载操作已经开始后激发，刷新也可激发此事件</em><br><em>当某项下载操作已经完成后激发，刷新也可激发此事件</em></td></tr><tr><td><em>NavigateCompleted2</em></td><td><em>导航完成后激发，刷新时不激发</em></td></tr><tr><td><em>NewWindow2</em></td><td><em>在创建新窗口以前激发</em></td></tr><tr><td><em>OnFullScreen</em><br><em>OnMenuBar</em><br><em>OnQuit</em><br><em>OnStatusBar</em><br><em>OnToolBar</em></td><td><em>当**FullScreen属性改变时激发。该事件采用VARIENT_BOOL的一个输 入参数来指示IE是全屏显示方式(VARIENT_TRUE)还是普通显示方式(VARIENT_FALSE)</em><br><em>改变**MenuBar的属性时激发，标示参数是VARIENT_BOOL类型的。 VARIANT_TRUE是可见，VARIANT_ FALSE是隐藏</em><br><em>无论是用户关闭浏览器还是开发者调用**Quit方法，当IE退出时就会激发</em><br><em>OnMenuBar调用方法相同，标示状态栏是否可见。</em><br><em>调用方法同上，标示工具栏是否可见。</em></td></tr><tr><td><em>StatusTextChange</em></td><td><em>如果要改变状态栏中的文字，这个事件就会被激发，但它并不理会程序是否有状态栏</em></td></tr><tr><td><em>TitleChange Title</em></td><td><em>有效或改变时激发</em></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日期时间控件：DateTimePicker（完成）"><a href="#日期时间控件：DateTimePicker（完成）" class="headerlink" title="日期时间控件：DateTimePicker（完成）"></a>日期时间控件：DateTimePicker（完成）</h4><p>构造方法：</p><p>常用API：</p><p>表1   DateTimePickerFormat枚举值及说明</p><table><thead><tr><th>枚举值</th><th>说明</th></tr></thead><tbody><tr><td>Custom</td><td>DateTimePicker控件以自定义格式显示日期/时间值</td></tr><tr><td>Long</td><td>DateTimePicker控件以用户操作系统设置的长日期格式显示日期/时间值</td></tr><tr><td>Short</td><td>DateTimePicker控件以用户操作系统设置的短日期格式显示日期/时间值</td></tr><tr><td>Time</td><td>DateTimePicker控件以用户操作系统设置的时间格式显示日期/时间值</td></tr></tbody></table><p>使用DateTimePicker控件以自定义格式显示日期：</p><ol><li>需要用到其CustomFormat，其语法格式为</li></ol><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public string CustomFormat{get,set};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表2  有效日期格式字符串及其说明</p><table><thead><tr><th>格式字符串</th><th>说明</th></tr></thead><tbody><tr><td>D</td><td>一位数或两位数的天数</td></tr><tr><td>Dd</td><td>两位数的天数，一位数天数的前面加一个零</td></tr><tr><td>Ddd</td><td>3个字符的星期几缩写</td></tr><tr><td>Dddd</td><td>完整的星期几名称</td></tr><tr><td>H</td><td>12小时格式的一位数或两位数小时数</td></tr><tr><td>Hh</td><td>12小时格式的两位数小时数，一位数数值前面加一个0</td></tr><tr><td>H</td><td>24小时格式的一位数或两位数小时数</td></tr><tr><td>HH</td><td>24小时格式的两位数小时数，一位数数值前面加一个0</td></tr><tr><td>M</td><td>一位数或两位数分钟值</td></tr><tr><td>Mm</td><td>两位数分钟值，一位数数值前面加一个0</td></tr><tr><td>M</td><td>一位数或两位数月份值</td></tr><tr><td>MM</td><td>两位数月份值。一位数数值前面加一个0</td></tr><tr><td>MMM</td><td>3个字符的月份缩写</td></tr><tr><td>MMMM</td><td>完整的月份名</td></tr><tr><td>S</td><td>一位数或两位数秒数</td></tr><tr><td>Ss</td><td>两位数秒数。一位数数值前面加一个</td></tr><tr><td>T</td><td>单字母A.M./P.M缩写（A.M将显示为“A”）</td></tr><tr><td>Tt</td><td>两字母A.M./P.M缩写（A.M.将显示为“AM”）</td></tr><tr><td>Y</td><td>一位数的年份（2001 显示为“1”）</td></tr><tr><td>Yy</td><td>年份的最后两位数（2001 显示为“01”）</td></tr><tr><td>Yyyy</td><td>完整的年份（2001 显示为“2001”）</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace demo{    public partial class Demo:Form{        public Demo(){            InitialComponent();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日历控件：MonthCalendar（完成）"><a href="#日历控件：MonthCalendar（完成）" class="headerlink" title="日历控件：MonthCalendar（完成）"></a>日历控件：MonthCalendar（完成）</h4><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Calendar();//代码示例Calendar  calendar = new Calendar();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><p>monthCalendar 控件主要的属性如表 2-13 所示：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Backcolor</td><td>月份中显示背景色。</td></tr><tr><td>SelectionRange</td><td>在月历中显示的起始时间范围，Begin为开始，end为截至。</td></tr><tr><td>Minmum</td><td>最小值，默认0.</td></tr><tr><td>Showtody,showtodaycircle,Showweeknumbers</td><td>是否显示今天日期是否在今天日期上加红圈是否左侧显示周数（1-52周）</td></tr><tr><td>TitlebackcolorTitleForcolorTrailingcolor</td><td>日历标题背景色。日历标题前景色上下月颜色</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace Demo{    public partial class Form1:Form{    public Form1(){        InitializeComponent();    }     DateTime mytime = new DateTime(2019, 7, 1);             monthCalendar1.AddBoldedDate(mytime);            monthCalendar1.UpdateBoldedDates();        }        private void monthCalendar1_DateChanged(object sender, DateRangeEventArgs e)        {            textBox1.Text = e.Start.ToString();        }       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据控件：DataGridView"><a href="#数据控件：DataGridView" class="headerlink" title="数据控件：DataGridView"></a>数据控件：DataGridView</h4><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用属性：</p><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="验证组件：ErrorProvider（完成）"><a href="#验证组件：ErrorProvider（完成）" class="headerlink" title="验证组件：ErrorProvider（完成）"></a>验证组件：ErrorProvider（完成）</h4><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用属性：</p><table><thead><tr><th>属性值</th><th>释义</th></tr></thead><tbody><tr><td>BlinkStyle：此属性获取或设置一个值，该值指示错误图标闪烁时间。该属性有如下三个选项：</td><td>AlwaysBlink：当错误图标第一次显示时，或者当为控件设置了错误描述字符串并且错误图标已经显示时，总是闪烁<br>BlinkIfDifferentRrror：当图标已经显示并且为控件设置了新的错误字符串时闪烁；<br>NeverBlink：该错误图标从不闪烁；</td></tr><tr><td>BlinkRate</td><td>此属性获取或设置错误图标的闪烁速率，以毫秒为单位。</td></tr><tr><td>SetError方法</td><td>此方法将Error属性设置为指定的TextWriter对象。</td></tr><tr><td>Validating事件</td><td>此事件在控件正在验证时发生。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Text;using System.Windows.Forms;  namespace ErrorProvider1{    public partial class Form1 : Form    {                #region 构造函数        public Form1()        {            InitializeComponent();        }        string user;        string password;         #endregion         #region 登录名文本框验证时发生的事件        private void txtUser_Validating(object sender, CancelEventArgs e)        {            if (txtUser.Text != "sa")            {                //当光标放在报警图标上，会显示“登录名错误”                errUser.SetError(txtUser, "登录名错误");            }            else            {                errUser.SetError(txtUser, "");                password = txtUser.Text;            }        }        #endregion         #region 密码文本框验证时发生的事件        private void txtPasword_Validating(object sender, CancelEventArgs e)        {            if (txtPasword.Text != "rbsoft")//判断输入是否正确            {                //当光标放在报警图标上，会显示“密码错误”                errPassword.SetError(txtPasword, "密码确误");            }            else            {                errPassword.SetError(txtPasword, "");                user = txtPasword.Text;            }        }        #endregion         #region 确定按钮事件        private void btnOK_Click(object sender, EventArgs e)        {            if (password != null &amp;&amp; user != null)            {                MessageBox.Show("登录成功");            }            else            {                MessageBox.Show("输入用户名和密码");            }        }        #endregion         #region 取消按钮事件        private void btnCancel_Click(object sender, EventArgs e)        {            Application.Exit();        }        #endregion       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="帮助文件：HelpProvider（完成）"><a href="#帮助文件：HelpProvider（完成）" class="headerlink" title="帮助文件：HelpProvider（完成）"></a>帮助文件：HelpProvider（完成）</h4><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用属性：</p><table><thead><tr><th>属性值</th><th>释义</th></tr></thead><tbody><tr><td>Tag</td><td>获取或设置包含有关HelpProvider的补充数据对象</td></tr><tr><td>HelpNamspace</td><td>获取或设置一个值，该值指定与此HelpProvider对象关联的帮助文件名</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;namespace HelpProviderDemo{    public partial class Form1 : Form    {        public Form1()        {            InitializeComponent();        }        HelpProvider HP;        private void Form1_Load(object sender, EventArgs e)        {            MessageBox.Show("要想获得帮助。请按F1");            HP = new HelpProvider();            string Source = "Help.txt";            HP.HelpNamespace = Source;            HP.SetShowHelp(this, true);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="布局管理器：（Layout）"><a href="#布局管理器：（Layout）" class="headerlink" title="布局管理器：（Layout）"></a>布局管理器：（Layout）</h2><h3 id="流式布局：FlowLayoutpanel"><a href="#流式布局：FlowLayoutpanel" class="headerlink" title="流式布局：FlowLayoutpanel"></a>流式布局：FlowLayoutpanel</h3><h3 id="网格布局：TablelayPanel"><a href="#网格布局：TablelayPanel" class="headerlink" title="网格布局：TablelayPanel"></a>网格布局：TablelayPanel</h3><h3 id="卡片布局：TabControl"><a href="#卡片布局：TabControl" class="headerlink" title="卡片布局：TabControl"></a>卡片布局：TabControl</h3><h3 id="分组布局：GroupBox"><a href="#分组布局：GroupBox" class="headerlink" title="分组布局：GroupBox"></a>分组布局：GroupBox</h3><h3 id="分割布局：SplitContainer"><a href="#分割布局：SplitContainer" class="headerlink" title="分割布局：SplitContainer"></a>分割布局：SplitContainer</h3><h2 id="对话框：（Dialog）"><a href="#对话框：（Dialog）" class="headerlink" title="对话框：（Dialog）"></a>对话框：（Dialog）</h2><h3 id="文件选择对话框：OpenFileDialog（完成）"><a href="#文件选择对话框：OpenFileDialog（完成）" class="headerlink" title="文件选择对话框：OpenFileDialog（完成）"></a>文件选择对话框：OpenFileDialog（完成）</h3><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>属性值</th><th>释义</th></tr></thead><tbody><tr><td><strong>InitialDirectory</strong></td><td>对话框的初始目录</td></tr><tr><td><strong>Filter</strong></td><td>获取或设置当前文件名筛选器字符串，例如，”文本文件(*.txt)</td></tr><tr><td>FilterIndex</td><td>在对话框中选择的<strong>文件筛选器</strong>的索引，如果选第一项就设为1</td></tr><tr><td>RestoreDirectory</td><td>控制对话框在关闭之前是否恢复当前目录</td></tr><tr><td><strong>FileName</strong></td><td>第一个在对话框中显示的文件或最后一个选取的文件</td></tr><tr><td>Title</td><td>将显示在对话框标题栏中的字符</td></tr><tr><td>AddExtension</td><td>是否自动添加默认扩展名</td></tr><tr><td>CheckPathExists</td><td>在对话框返回之前，检查指定路径是否存在</td></tr><tr><td>DefaultExtension</td><td>默认扩展名</td></tr><tr><td>DereferenceLinks</td><td>在从对话框返回前是否取消引用快捷方式</td></tr><tr><td>ShowHelp</td><td>启用”帮助”按钮</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="保存文件对话框：SaveFileDialog（完成）"><a href="#保存文件对话框：SaveFileDialog（完成）" class="headerlink" title="保存文件对话框：SaveFileDialog（完成）"></a>保存文件对话框：SaveFileDialog（完成）</h3><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SaveFileDialog();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>属性值</th><th>释义</th></tr></thead><tbody><tr><td>AddExtension</td><td>获取或设置一个值，该值指示如果用户省略扩展名，对话框是否自动在文件名中添加扩展名。</td></tr><tr><td>DefaultExtension</td><td>获取或设置默认文件扩展名。</td></tr><tr><td>FileName</td><td>获取或设置一个包含在文件对话框中选定的文件名的字符串。</td></tr><tr><td>Filter</td><td>获取或设置当前文件名筛选器字符串，该字符串决定对话框的“另存为文件类型”或“文件类型”框中出现的选择内容。</td></tr><tr><td>InitialDirectory</td><td>获取或设置文件对话框显示的初始目录。</td></tr><tr><td>RestoreDirectory</td><td>获取或设置一个值，该值指示对话框在关闭前是否还原当前目录。</td></tr><tr><td>Title</td><td>获取或设置文件对话框标题。</td></tr><tr><td>FilterIndex</td><td>获取或设置文件对话框中当前选定筛选器的索引。<br>　　注意：第一个扩展名就是1，第二个扩展名就是2。</td></tr></tbody></table><p>代码综合示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.IO;using System.Text;using System.Windows.Forms;namespace demo{    public partial class Form1 : Form    {        public Form1()        {            InitializeComponent();        }        private void Form1_Load(object sender, EventArgs e)        {            MessageBox.Show("你强任你强，大哥背行囊", "Error!", MessageBoxButtons.YesNo, MessageBoxIcon.Error);        }        //打开文件        private void button1_Click(object sender, EventArgs e)        {            DialogResult dr = openFileDialog1.ShowDialog();            //获取所打开文件的文件名            string filename = openFileDialog1.FileName;            if (dr == System.Windows.Forms.DialogResult.OK &amp;&amp; !string.IsNullOrEmpty(filename))            {                StreamReader sr = new StreamReader(filename);                textBox1.Text = sr.ReadToEnd();                sr.Close();            }        }        //保存文件        private void button2_Click(object sender, EventArgs e)        {            DialogResult dr = saveFileDialog1.ShowDialog();            string filename = saveFileDialog1.FileName;            if (dr == System.Windows.Forms.DialogResult.OK &amp;&amp; !string.IsNullOrEmpty(filename))            {                StreamWriter sw = new StreamWriter(filename, true, Encoding.UTF8);                sw.Write(textBox1.Text);                sw.Close();            }        }    }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体对话框：FontDialog（完成）"><a href="#字体对话框：FontDialog（完成）" class="headerlink" title="字体对话框：FontDialog（完成）"></a>字体对话框：FontDialog（完成）</h3><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void Font</td><td>设定或获取字体信息</td></tr><tr><td>void Color</td><td>设定或获取字符的颜色</td></tr><tr><td>void Maxmize/Minmize</td><td>获取或设置用户可选择最大磅值</td></tr><tr><td>void ShowColor</td><td>获取或设置一个值，指示对话框是否显示颜色选择框。</td></tr><tr><td>void ShowEffect</td><td>获取或设置一个值，指示对话框是否包含允许用户指定删除线、下划线和文本颜色选项控件</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="浏览文件夹对话框：FolderBrowserDialog（完成）"><a href="#浏览文件夹对话框：FolderBrowserDialog（完成）" class="headerlink" title="浏览文件夹对话框：FolderBrowserDialog（完成）"></a>浏览文件夹对话框：FolderBrowserDialog（完成）</h3><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">FolderBrowserDialog();//代码示例：FolderBrowserDialog folder = new FolderBrowserDialog();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>属性值：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Description</td><td>表示获取或设置对话框中在树形控件上显示的说明文本</td></tr><tr><td>RootFolder</td><td>表示获取或设置从其开始浏览的根文件夹</td></tr><tr><td>SelectedPath</td><td>表示获取或设置用户选定的路径</td></tr><tr><td>ShowNewFolderButton</td><td>获取或设置一个值，该值指示“新建文件夹”按钮是否显示在文件夹浏览对话框中</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>ShowDialog</td><td>用默认的所有者运行通用对话框。该方法的返回值类型为DialogResult，如果用户在对话框中单击“确定”按钮，则为DialogResult.OK，否则为DialogResult.Cancel</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace FolderDialogDemo{    public partial class FolderDialogDemo:Form{        public FolderDialogDemo(){            InitializeComponent();        }        private void button1_Click(object sender,EventArgs e){            string defaultPath = "";       FolderBrowserDialog dialog = new FolderBrowserDialog();       //打开的文件夹浏览对话框上的描述      dialog.Description = "请选择一个文件夹";      //是否显示对话框左下角 新建文件夹 按钮，默认为 true      dialog.ShowNewFolderButton = false;      //首次defaultPath为空，按FolderBrowserDialog默认设置（即桌面）选择      if (defaultPath != "")    {    //设置此次默认目录为上一次选中目录  dialog.SelectedPath = defaultPath;}     //按下确定选择的按钮    if (dialog.ShowDialog() == DialogResult.OK){//记录选中的目录defaultPath = dialog.SelectedPath;}    MessageBox.show(defaultPath);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="颜色选择对话框：ColorDialog（完成）"><a href="#颜色选择对话框：ColorDialog（完成）" class="headerlink" title="颜色选择对话框：ColorDialog（完成）"></a>颜色选择对话框：ColorDialog（完成）</h3><p><strong>主要属性</strong></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Color</td><td>获取或设置用户选中的颜色</td></tr><tr><td>AnyColor</td><td>指示对话框是否显示基本颜色集中可用的所有颜色</td></tr><tr><td>FullOpen</td><td>用于创建自定义颜色的空间在对话框打开时是否可见</td></tr><tr><td>AllowFullOpen</td><td>指示用户是否可以使用该对话框定义自定义颜色</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;namespace ColorDialogDemo{    public partial class ColorDialogDemo:Form{        public ColorDialogDemo(){            InitializeComponent();        }            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消息框：MessageBox（完成）"><a href="#消息框：MessageBox（完成）" class="headerlink" title="消息框：MessageBox（完成）"></a>消息框：MessageBox（完成）</h3><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">MessageBox("显示的文字","标题内容",MessageBoxButtons buttons,DialogBoxIcon icon,DialogResult result,)//代码示例MessageBox.Show("这瓜保熟吗?","Erro!",MessageBoxButton.RetryCancel);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>DialogResult Show(string text)</td><td>指定消息框中显示的文本（text）</td></tr><tr><td>DialogResult Show(string text, string caption)</td><td>指定消息框中显示的文本（text）以及消息框的标题（caption）</td></tr><tr><td>DialogResult Show(string text, string caption,  MessageBoxButtons buttons)</td><td>指定消息框中显示的文本（text）、消息框的 标题（caption）以及消息框中显示的按钮 （buttons）</td></tr><tr><td>DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon)</td><td>指定消息框中显示的文本（text）、消息框的 标题（caption ）、消息框中显示的按钮 （buttons）以及消息框中显示的图标（icon）</td></tr></tbody></table><h4 id="MessageBoxButtons："><a href="#MessageBoxButtons：" class="headerlink" title="MessageBoxButtons："></a>MessageBoxButtons：</h4><table><thead><tr><th>枚举值名称</th><th>释义</th></tr></thead><tbody><tr><td>OK<br>OKCancel</td><td>在消息框中显示“确定”按钮。<br>在消息框中显示“确定”和“取消”按钮。</td></tr><tr><td>AbortRetryIgnore</td><td>在消息框中显示“中止” “重试”和“忽略”按钮。</td></tr><tr><td>YesNoCancel<br>YesNo</td><td>在消息框中显示“是” “否”和“取消”按钮。<br>在消息框中显示“是”和“否”按钮。</td></tr><tr><td>RetryCancel</td><td>在消息框中显示“重试”和“取消”按钮。</td></tr></tbody></table><h4 id="DialogBoxIcon："><a href="#DialogBoxIcon：" class="headerlink" title="DialogBoxIcon："></a>DialogBoxIcon：</h4><table><thead><tr><th>枚举值名称</th><th>释义</th></tr></thead><tbody><tr><td>None</td><td>在消息框中不显示任何图标。</td></tr><tr><td>Hand、Stop、Error</td><td>在消息框中显示由一个红色背景的圆圈及其中的白色X组成 的图标。</td></tr><tr><td>Question</td><td>在消息框中显示由圆圈和其中的一个问号组成的图标。</td></tr><tr><td>Exclamation、Warning</td><td>在消息框中显示由一个黄色背景的三角形及其中的一个感叹号组成的图标。</td></tr><tr><td>Asterisk、Information</td><td>在消息框中显示由一个圆圈及其中的小写字母 i 组成的图标。</td></tr></tbody></table><h4 id="DialogResult："><a href="#DialogResult：" class="headerlink" title="DialogResult："></a>DialogResult：</h4><table><thead><tr><th>枚举值名称</th><th>释义</th></tr></thead><tbody><tr><td>None</td><td>消息框没有返回值，表明有消息框继续运行。</td></tr><tr><td>OK</td><td>消息框的返回值是 0K （通常从标签为“确定”的按钮发送）。</td></tr><tr><td>Cancel</td><td>消息框的返回值是 Cancel （通常从标签为“取消”的按钮发送）。</td></tr><tr><td>Abort</td><td>消息框的返回值是 Abort （通常从标签为“中止”的按钮发送）。</td></tr><tr><td>Retry</td><td>消息框的返回值是 Retry （通常从标签为“重试”的按钮发送）</td></tr><tr><td>Ignore</td><td>消息框的返回值是 Ignore （通常从标签为“忽略“的按钮发送）。</td></tr><tr><td>Yes</td><td>消息框的返回值是 Yes （通常从标签为“是“的按钮发送）。</td></tr><tr><td>No</td><td>消息框的返回值是 No （通常从标签为“否“的按钮发送）。</td></tr></tbody></table><h4 id="自定义消息框："><a href="#自定义消息框：" class="headerlink" title="自定义消息框："></a>自定义消息框：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Windows.Forms;public partial class MessageBoxDemo:Form{    public MessageBoxDemo(){        InitializeComponent();    }    private void MessageBoxDemo_Load(object sender,EventArgs e){        MessageBox.Show("这瓜保熟吗?","Erro!",MessageBoxButton.RetryCancel);        MessageBox.Show("啊哈哈哈，鸡汤来喽！","Error!",MessageBoxButton.YesyNoCancel);        MessageBox.Show("背背背起了行囊，离开家的那一刻，我知道现实生活有太多的不舍", "Error!", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Stop);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理机制：（Handler）"><a href="#处理机制：（Handler）" class="headerlink" title="处理机制：（Handler）"></a>处理机制：（Handler）</h2><p>定义语法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">"组件名称"."事件名称"+= new Syetem.Windows.Froms. KeyEventHandler（"事件名称"）；//代码示例button.Click + = new EventHandler(this.Demo);private void Demo_Click(object sender,EventArgs e){    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="窗体事件处理：FromHandlerEvent"><a href="#窗体事件处理：FromHandlerEvent" class="headerlink" title="窗体事件处理：FromHandlerEvent"></a>窗体事件处理：FromHandlerEvent</h3><p><strong>构造方法</strong></p><ol><li>FormBorderStyle属性值：</li></ol><table><thead><tr><th>属  性  值</th><th>说    明</th></tr></thead><tbody><tr><td>Fixed3D</td><td>固定的三维边框</td></tr><tr><td>FixedDialog</td><td>固定的对话框样式的粗边框</td></tr><tr><td>FixedSingle</td><td>固定的单行边框</td></tr><tr><td>FixedToolWindow</td><td>不可调整大小的工具窗口边框</td></tr><tr><td>None</td><td>无边框</td></tr><tr><td>Sizable</td><td>可调整大小的边框</td></tr><tr><td>SizableToolWindow</td><td>可调整大小的工具窗口边框</td></tr></tbody></table><ol start="2"><li>StartPosition属性的属性值及说明</li></ol><table><thead><tr><th>属  性  值</th><th>说    明</th></tr></thead><tbody><tr><td>CenterParent</td><td>窗体在其父窗体中居中</td></tr><tr><td>CenterScreen</td><td>窗体在当前显示窗口中居中，其尺寸在窗体大小中指定</td></tr><tr><td>Manual</td><td>窗体的位置由Location属性确定</td></tr><tr><td>WindowsDefaultBounds</td><td>窗体定位在Windows默认位置，其边界也由Windows默认决定</td></tr><tr><td>WindowsDefaultLocation</td><td>窗体定位在Windows默认位置，其尺寸在窗体大小中指定</td></tr></tbody></table><p><strong>主要事件</strong></p><table><thead><tr><th>主要事件</th><th>释义</th></tr></thead><tbody><tr><td>Load</td><td>第一次显示窗体前发生</td></tr><tr><td>Activated</td><td>窗体激活时发生</td></tr><tr><td>Deactivate</td><td>窗体失去焦点成为不活动窗体时发生。</td></tr><tr><td>Resize</td><td>改变窗体大小时发生</td></tr><tr><td>Paint</td><td>重绘窗体时发生</td></tr><tr><td>Click</td><td>单击窗体发生</td></tr><tr><td>Closed</td><td>关闭窗体时发生</td></tr></tbody></table><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">//代码示例private void Form_事件名(object sender,EventArgs e){    //arguments}例：private void Form_Load(object sender,EventArgs e){    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码示例</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private void Form1_Load(object sender, EventArgs e){           this.MaximizeBox = false;           this.MinimizeBox = true;           this.FormBorderStyle = FormBorderStyle.FixedSingle;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多文档窗体：MDI"><a href="#多文档窗体：MDI" class="headerlink" title="多文档窗体：MDI"></a>多文档窗体：MDI</h4><h3 id="事件处理机制：HandlerEvent（完成）"><a href="#事件处理机制：HandlerEvent（完成）" class="headerlink" title="事件处理机制：HandlerEvent（完成）"></a>事件处理机制：HandlerEvent（完成）</h3><p>构造方法：</p><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">button.Click+=new HandlerEvent(this.DemoMesthod);public void DemoMethod_Click(object sender,EventArgs e){    MessageBox.Show("点击按钮弹出对话框");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘处理机制：KeyHandlerEvent（完成）"><a href="#键盘处理机制：KeyHandlerEvent（完成）" class="headerlink" title="键盘处理机制：KeyHandlerEvent（完成）"></a>键盘处理机制：KeyHandlerEvent（完成）</h3><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>KeyPressEventArgs<br>* Handled<br>* KeyChar</td><td>用来获取或设置一个值，该值指示是否处理过KeyPress事件。<br>用来获取按下的键对应的字符，通常是该键的ASCII码。</td></tr><tr><td>KeyEventArgs：<br>* Alt<br>* Control<br>* Shift<br>* Handled<br>* KeyCode<br>* KeyData<br>* KeyValue<br>* Modifiers</td><td>用来获取一个值，该值指示是否曾按下Alt键<br>用来获取一个值，该值指示是否曾按下Ctrl键。<br>用来获取一个值，该值指示是否曾按下Shift键。<br>用来获取或设置一个值，该值指示是否处理过此事件。<br>以 Keys枚举型值返回键盘键的键码，该属性不包含修改键（Alt、Control和 Shift键）信息，用于测试指定的键盘键。<br>以 Keys 枚举类型值返回键盘键的键码，并包含修改键信息，用于判断关于按下键盘键的所有信息。<br>以整数形式返回键码，而不是Keys枚举类型值。用于获得所按下键盘键的数字表示。<br>以 Keys 枚举类型值返回所有按下的修改键（Alt、Control 和 Shift 键），仅用于判断修改键信息。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="鼠标处理机制：MouseHandlerEvent（完成）"><a href="#鼠标处理机制：MouseHandlerEvent（完成）" class="headerlink" title="鼠标处理机制：MouseHandlerEvent（完成）"></a>鼠标处理机制：MouseHandlerEvent（完成）</h3><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>MouseEnter</td><td>在鼠标指针进入控件时发生。</td></tr><tr><td>MouseHover</td><td>当鼠标指针悬停在控件上时将发生该事件。</td></tr><tr><td>MouseDown</td><td>当鼠标指针位于控件上并按下鼠标键时将发生该事件。</td></tr><tr><td>MouseUp</td><td>当鼠标指针在控件上并释放鼠标键时将发生该事件。</td></tr><tr><td>MouseLeave</td><td>在鼠标指针离开控件时将发生该事件。</td></tr><tr><td>MouseWheel</td><td>在移动鼠标轮并且控件有焦点时将发生该事件。</td></tr></tbody></table><p>MouseMove（枚举型）在鼠标指针移到控件上时发生。MouseButton</p><table><thead><tr><th>MouseButton枚举型</th><th>释义</th></tr></thead><tbody><tr><td>Left</td><td>按下了鼠标左键</td></tr><tr><td>Middle</td><td>按下了鼠标中键</td></tr><tr><td>Right</td><td>按下了鼠标右键</td></tr><tr><td>None</td><td>没有按下按钮</td></tr><tr><td>XButton1</td><td>按下了第一个XButton按钮</td></tr><tr><td>XButton2</td><td>按下了第二个XButton按钮</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特殊类："><a href="#特殊类：" class="headerlink" title="特殊类："></a>特殊类：</h2><h3 id="媒体播放器：Media-Player"><a href="#媒体播放器：Media-Player" class="headerlink" title="媒体播放器：Media Player"></a>媒体播放器：Media Player</h3><h3 id="PDF浏览器：Adobe-PDF-Reader"><a href="#PDF浏览器：Adobe-PDF-Reader" class="headerlink" title="PDF浏览器：Adobe PDF Reader"></a>PDF浏览器：Adobe PDF Reader</h3><h3 id="托盘图标：-NotifyIcon"><a href="#托盘图标：-NotifyIcon" class="headerlink" title="托盘图标： NotifyIcon"></a>托盘图标： NotifyIcon</h3><p>构造函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">NotifyIcon();NotifyIcon notifyIcon1 = new NotifyIcon();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>BalloonTipText</td><td>气泡所提示的内容</td></tr><tr><td>BalloonTipTitle</td><td>气泡提示的标题</td></tr><tr><td>ContextMenuStrip</td><td>绑定的右键菜单</td></tr><tr><td>Icon</td><td>托盘显示的图标</td></tr><tr><td>Text</td><td>鼠标靠近图标显示的提示信息</td></tr><tr><td>Visible</td><td>是否显示图标</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;namespace notifyIconShow{    public partial class ColdJoke : Form    {        #region        //创建NotifyIcon对象         NotifyIcon notifyicon = new NotifyIcon();        //创建托盘图标对象         Icon ico = new Icon("snow.ico");        //创建托盘菜单对象         ContextMenu notifyContextMenu = new ContextMenu();        #endregion        public ColdJoke()        {            InitializeComponent();        }        #region 托盘提示        private void Form1_Load(object sender, EventArgs e)        {            //设置鼠标放在托盘图标上面的文字             this.notifyIcon1.Text = "笑话";        }        #endregion        #region 隐藏任务栏图标、显示托盘图标        private void Form1_SizeChanged(object sender, EventArgs e)        {            //判断是否选择的是最小化按钮             if (WindowState == FormWindowState.Minimized)            {                //托盘显示图标等于托盘图标对象                 //注意notifyIcon1是控件的名字而不是对象的名字                 notifyIcon1.Icon = ico;                //隐藏任务栏区图标                 this.ShowInTaskbar = false;                //图标显示在托盘区                 notifyicon.Visible = true;            }        }        #endregion        #region 还原窗体        private void notifyIcon1_DoubleClick(object sender, EventArgs e)        {            //判断是否已经最小化于托盘             if (WindowState == FormWindowState.Minimized)            {                //还原窗体显示                 WindowState = FormWindowState.Normal;                //激活窗体并给予它焦点                 this.Activate();                //任务栏区显示图标                 this.ShowInTaskbar = true;                //托盘区图标隐藏                 notifyicon.Visible = false;            }        }        #endregion    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打开文件：ProcessStart"><a href="#打开文件：ProcessStart" class="headerlink" title="打开文件：ProcessStart"></a>打开文件：ProcessStart</h3><p>构造方法：</p><table><thead><tr><th>构造方法</th><th>释义</th></tr></thead><tbody><tr><td>Process.Start();</td><td></td></tr><tr><td>Process.Start(ProcessStartInfo);</td><td></td></tr><tr><td>Process.Start(String path,String path2);</td><td></td></tr><tr><td>Process.Start(String path1,String path2,SecureString secure,String)</td><td></td></tr><tr><td>Process.Start(String path1,String path2,String path3,SecureString secure,String path4);</td><td>通过指定应用程序的名称和一组命令行参数、用户名、密码和域来启动一个进程资源，并将该资源与新的 Process 组件关联起来。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>常用方法：</p><p>代码示例</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace Demo{    public class ProcessStart{        static void Main(string [] args){                    }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="水晶报表"><a href="#水晶报表" class="headerlink" title="水晶报表"></a>水晶报表</h3><h4 id="Excel数据处理："><a href="#Excel数据处理：" class="headerlink" title="Excel数据处理："></a>Excel数据处理：</h4><h2 id="制作软件技巧与经验："><a href="#制作软件技巧与经验：" class="headerlink" title="制作软件技巧与经验："></a>制作软件技巧与经验：</h2><h2 id="作者的话："><a href="#作者的话：" class="headerlink" title="作者的话："></a>作者的话：</h2>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 图形化界面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css知识体系</title>
      <link href="posts/4832396d.html"/>
      <url>posts/4832396d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS知识体系："><a href="#CSS知识体系：" class="headerlink" title="CSS知识体系："></a>CSS知识体系：</h1><p>阅读本文前先看：</p><ol><li>基本格式</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DCOTYPE</span> <span class="token attr-name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--头文件用于引入css文件--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Demo功能代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">&lt;!--引入修饰css部分--&gt;         p</span><span class="token punctuation">{</span>             <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>         <span class="token punctuation">}</span>           </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--代码主体内容--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一段受css影响的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>CSS介绍：</li></ol><p>修饰类型语言分支之一，相似语言有Unity中Shader着色器、Animation动画等，主要修饰html内的元素。属于前端开发语言。是用来表现HTML或XML等文件样式计算机语言，既可以修饰静态网页，有可以配合各种脚本语言动态的对网页各元素进行格式化。</p><ol start="3"><li>元素修饰作用已在开头给出，*修饰为常用元素，请读者多注意！</li></ol><h1 id="选择集："><a href="#选择集：" class="headerlink" title="选择集："></a>选择集：</h1><p>作用：相当于后端语言中JAVA中import、C# 中using导包方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>  <span class="token comment">//JAVA引入外部文件</span>using <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token class-name">Generic</span><span class="token punctuation">;</span>  <span class="token comment">//C#引入外部文件</span><span class="token comment">//Css引入</span>方式一：<span class="token generics"><span class="token punctuation">&lt;</span>style<span class="token punctuation">&gt;</span></span><span class="token annotation punctuation">@import</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>方式二：（最常使用）<span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"Stylesheet"</span> type <span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"Style.css"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>link<span class="token operator">&gt;</span>方式三：内联方式<span class="token operator">&lt;</span>div style <span class="token operator">=</span><span class="token string">"background:red"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>方式四：内嵌方式只能改变当前标签的样式，可维护性查<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>头部部分相当于后端语言中导包部分<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>style<span class="token punctuation">&gt;</span></span>  <span class="token punctuation">.</span>conment<span class="token punctuation">{</span>    background<span class="token operator">-</span>image<span class="token operator">:</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    background<span class="token operator">-</span>repeat<span class="token operator">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:\Users\Government\Desktop\行政部门\行动部署\编程专业课练习题附件\CSS网页前端\图片\selector.png" alt="selector"></p><p>选择器：只想您需要设置样式的HTML元素</p><p>声明块：包含一条或多条用分号分隔的什么</p><ol><li>每条声明都包含一个Css属性名称和一个值，以冒号分隔。</li><li>多条Css声明用分号分隔，声明块用花括号括起来。</li></ol><p>选择器类型：</p><ol><li>id选择器：可以标记为特殊id的HTML元素指定样式，要选择具有特定id元素后跟元素，不能以数字开头</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">#{   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>类选择器：选择特定class属性HTML，选择特定class元素，句点字符，后面跟类名。</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">.center{   text-align:center;   color:black;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的红色标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;p class = "center'&gt; 受影响的红色段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>通用选择器：*选择页面上所有HTML元素，页面内所有元素均受影响：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">*{  text-align:center;  color:blue;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>分组选择器：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">h1,h2,p{    text-align:center;    color:red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Style（样式）："><a href="#Style（样式）：" class="headerlink" title="Style（样式）："></a>Style（样式）：</h1><h2 id="background（背景）：（完成）"><a href="#background（背景）：（完成）" class="headerlink" title="background（背景）：（完成）"></a>background（背景）：（完成）</h2><h3 id="background-image：背景图片"><a href="#background-image：背景图片" class="headerlink" title="background-image：背景图片"></a>background-image：背景图片</h3><p>常用方法：</p><ol><li>url(URL)：图像的URL地址</li><li>none：无图像背景会显示，这是默认</li><li>inherit：指定背景图像从父元素继承</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Multiple backgrounds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.body</span><span class="token punctuation">{</span>      <span class="token property">background</span><span class="token punctuation">:</span><span class="token property">image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://s3.bmp.ovh/imgs/2022/05/26/91badb9ac7f72757.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>       <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="background-color：背景颜色"><a href="#background-color：背景颜色" class="headerlink" title="background-color：背景颜色"></a>background-color：背景颜色</h4><p>常用方法：</p><ol><li>color：选择指定颜色</li><li>transparent：指定背景颜色应该是透明的</li><li>inherit：指定背景颜色，应该从父元素继承</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>功能Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">   <span class="token selector">span.highlight</span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>highlight<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>水字数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   水字数    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>highlight<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>这是一些文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="background-position：背景图像位置"><a href="#background-position：背景图像位置" class="headerlink" title="background-position：背景图像位置"></a>background-position：背景图像位置</h4><ol><li>定位方式：</li></ol><ul><li>页面背景图像：background-positon:center;</li><li>%定位背景图像：background-position:50%,20%;</li><li>像素定位背景图像：background-position:50px,20px;</li></ul><ol start="2"><li>inherit：继承父元素</li></ol><h4 id="background-repeat：背景图像重复"><a href="#background-repeat：背景图像重复" class="headerlink" title="background-repeat：背景图像重复"></a>background-repeat：背景图像重复</h4><p>常用方法：</p><ol><li>repeat：背景图像将向垂直和水平方向重复</li><li>repeat-x：只有水平位置会重复背景图像</li><li>repeat-y：只有垂直位置会重复背景图像</li><li>no-repeat：图像不会重复</li><li>inherit：从父元素获取</li></ol><h4 id="background-attachment：背景图片固定"><a href="#background-attachment：背景图片固定" class="headerlink" title="background-attachment：背景图片固定"></a>background-attachment：背景图片固定</h4><p>常用方法：</p><ol><li>scroll：背景图片随页面其余部分滚动（默认）</li><li>fixed：背景图像是固定的</li><li>local：背景图片随滚动元素滚动</li></ol><h4 id="background-clip：背景绘制区域："><a href="#background-clip：背景绘制区域：" class="headerlink" title="background-clip：背景绘制区域："></a>background-clip：背景绘制区域：</h4><ol><li>border-box：背景绘制在内容方框内，背景绘制在内容方框内（剪切成内容方框）。</li><li>padding-box：背景绘制在衬距方框内（剪切成衬距方框）。</li><li>border-box：默认值。背景绘制在边框方框内（剪切成边框方框）。</li></ol><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>backgroundCSS属性测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://s3.bmp.ovh/imgs/2022/05/26/91badb9ac7f72757.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed        <span class="token property">background-clip</span><span class="token punctuation">:</span>content-box<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>有谁能拒绝一只猫呢？快给我变!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="border（边框）："><a href="#border（边框）：" class="headerlink" title="border（边框）："></a>border（边框）：</h2><h3 id="border-image：边框样式图像填充"><a href="#border-image：边框样式图像填充" class="headerlink" title="border-image：边框样式图像填充"></a>border-image：边框样式图像填充</h3><h4 id="border-image-width：图像宽度"><a href="#border-image-width：图像宽度" class="headerlink" title="border-image-width：图像宽度"></a>border-image-width：图像宽度</h4><ol><li>number：表示相应border-width倍数</li><li>%：边界图像区域的大小</li><li>auto：自适应</li></ol><h5 id="border-image-source：图像引用"><a href="#border-image-source：图像引用" class="headerlink" title="border-image-source：图像引用"></a>border-image-source：图像引用</h5><ol><li>image：边框使用图像路径</li><li>none：默认，没有图像使用</li></ol><h5 id="border-image-repeat：是否重复："><a href="#border-image-repeat：是否重复：" class="headerlink" title="border-image-repeat：是否重复："></a>border-image-repeat：是否重复：</h5><ol><li>stretch：默认值，拉伸图像来填充区域</li><li>repeat：平铺来填充区域</li><li>round：对图像进行缩放以适应区域</li><li>space：扩展控件分布图像周围</li></ol><h4 id="border-right-left：左-右边框属性"><a href="#border-right-left：左-右边框属性" class="headerlink" title="border-right/left：左/右边框属性"></a>border-right/left：左/右边框属性</h4><h5 id="border-right-left-style：左右边框样式"><a href="#border-right-left-style：左右边框样式" class="headerlink" title="border-right/left-style：左右边框样式"></a>border-right/left-style：左右边框样式</h5><ol><li>none：无边框</li><li>dotted：定义点状边框（浏览器中为实线）</li><li>dashed：定义虚线边框（浏览器中为实线）</li><li>solid：定义实线</li><li>double：定义双线，宽度取决于border-width</li></ol><h5 id="border-right-left-color：左右边框颜色"><a href="#border-right-left-color：左右边框颜色" class="headerlink" title="border-right/left-color：左右边框颜色"></a>border-right/left-color：左右边框颜色</h5><ol><li>color：定义左右边框的颜色</li><li>transparent：指定边框颜色透明</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">                     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="border-right-left-width：左右边框框距"><a href="#border-right-left-width：左右边框框距" class="headerlink" title="border-right/left-width：左右边框框距"></a>border-right/left-width：左右边框框距</h5><ol><li>thin：细的右边框</li><li>medium：默认值，中等的右边框</li><li>thick：定义粗的右边框</li><li>length：自定义右边框宽度</li></ol><h5 id="代码示例：-1"><a href="#代码示例：-1" class="headerlink" title="代码示例："></a>代码示例：</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="border-top-bottom：顶-底部边框属性"><a href="#border-top-bottom：顶-底部边框属性" class="headerlink" title="border-top/bottom：顶/底部边框属性"></a>border-top/bottom：顶/底部边框属性</h4><h5 id="border-top-bottom-color：顶-底部边框颜色"><a href="#border-top-bottom-color：顶-底部边框颜色" class="headerlink" title="border-top/bottom-color：顶/底部边框颜色"></a>border-top/bottom-color：顶/底部边框颜色</h5><ol><li>color_name：规定颜色值为边框颜色</li><li>hex_number：规定颜色值为十六进制边框颜色</li><li>rgb_number：规定rgb代码为边框颜色</li><li>transparent：边框颜色为透明</li></ol><h5 id="border-top-bottom-left-right-radius：左-右下角圆角边框"><a href="#border-top-bottom-left-right-radius：左-右下角圆角边框" class="headerlink" title="border-top/bottom-left/right-radius：左/右下角圆角边框"></a>border-top/bottom-left/right-radius：左/右下角圆角边框</h5><ol><li>length：定义右下角形状</li><li>%：使用%定义右下角形状</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">/* 圆形 *//* border-bottom-left-radius: radius */border-bottom-left-radius: 3px;/* 椭圆形 *//* border-bottom-left-radius: 水平方向 垂直方向 */border-bottom-left-radius: 0.5em 1em;border-bottom-left-radius: inherit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="border-top-bottom-style：顶-底部边框样式"><a href="#border-top-bottom-style：顶-底部边框样式" class="headerlink" title="border-top/bottom-style：顶/底部边框样式"></a>border-top/bottom-style：顶/底部边框样式</h5><ol><li>none：无边框</li><li>hidden：解决边框冲突</li><li>dotted：点状边框</li><li>dashed：虚线边框</li><li>solid：实线边框</li><li>double：双边框</li><li>groove：双线</li></ol><h5 id="border-top-bottom-width：顶-底部边框宽度"><a href="#border-top-bottom-width：顶-底部边框宽度" class="headerlink" title="border-top/bottom-width：顶/底部边框宽度"></a>border-top/bottom-width：顶/底部边框宽度</h5><ol><li>thin：细的下边框：</li><li>medium：定义中等的下边框</li><li>thick：粗的下边框</li><li>length：长度</li></ol><h5 id="代码示例：-2"><a href="#代码示例：-2" class="headerlink" title="代码示例："></a>代码示例：</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="outline（线条轮廓）（完成）"><a href="#outline（线条轮廓）（完成）" class="headerlink" title="outline（线条轮廓）（完成）"></a>outline（线条轮廓）（完成）</h2><h4 id="out-line-color：线条轮廓颜色"><a href="#out-line-color：线条轮廓颜色" class="headerlink" title="out-line-color：线条轮廓颜色"></a>out-line-color：线条轮廓颜色</h4><ol><li>color：指定轮廓颜色</li><li>invert：默认，颜色反转，可使轮廓在不同的背景颜色中都是可见的。</li></ol><h4 id="outline-style：线条轮廓样式"><a href="#outline-style：线条轮廓样式" class="headerlink" title="outline-style：线条轮廓样式"></a>outline-style：线条轮廓样式</h4><ol><li>dotted：点状轮廓</li><li>dashed：虚线轮廓</li><li>solid：实线轮廓</li><li>double：双线轮廓</li></ol><h4 id="online-width：线条轮廓宽度"><a href="#online-width：线条轮廓宽度" class="headerlink" title="online-width：线条轮廓宽度"></a>online-width：线条轮廓宽度</h4><ol><li>thin：细轮廓</li><li>thick：粗轮廓</li><li>medium：中等轮廓</li><li>length：规定轮廓粗细值</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>online功能demo测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">p.one</span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span>1px solid red<span class="token punctuation">;</span>            <span class="token property">outline-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>            <span class="token property">outline-width</span><span class="token punctuation">:</span>thin<span class="token punctuation">;</span>            <span class="token property">outline-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">p.two</span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span>1px solid red<span class="token punctuation">;</span>            <span class="token property">outline-style</span><span class="token punctuation">:</span>dotted<span class="token punctuation">;</span>            <span class="token property">outline-width</span><span class="token punctuation">:</span>3px<span class="token punctuation">;</span>            <span class="token property">outline-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的文字1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的文字2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="margin（外边距）：-完成"><a href="#margin（外边距）：-完成" class="headerlink" title="margin（外边距）：(完成)"></a>margin（外边距）：(完成)</h2><h3 id="margin-bottom-top（上下边距）"><a href="#margin-bottom-top（上下边距）" class="headerlink" title="margin-bottom/top（上下边距）"></a>margin-bottom/top（上下边距）</h3><ol><li>auto：浏览器设置的上/下外边距</li><li>length：定义固定的上/下外边距，默认值为0</li><li>%：定义基于父对象总宽度的百分比上外边距。</li></ol><h3 id="margin-left-right（左右边距）："><a href="#margin-left-right（左右边距）：" class="headerlink" title="margin-left/right（左右边距）："></a>margin-left/right（左右边距）：</h3><ol><li>auto：浏览器设置的左/右外边距</li><li>length：定义固定的左/右外边距，默认值为0</li><li>$：定义基于父对象总宽度的百分比左/右外边距。</li></ol><h3 id="代码示例：-3"><a href="#代码示例：-3" class="headerlink" title="代码示例："></a>代码示例：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>margin外边距测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">p.demo1</span><span class="token punctuation">{</span>                <span class="token property">padding</span><span class="token punctuation">:</span>2cm               <span class="token punctuation">}</span>            <span class="token selector">p.demo2</span><span class="token punctuation">{</span>                <span class="token property">padding-left</span><span class="token punctuation">:</span>0.5<span class="token punctuation">,</span>3cm<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">p.demo3</span><span class="token punctuation">{</span>              <span class="token property">padding-right</span><span class="token punctuation">:</span>2cm              <span class="token punctuation">}</span>            <span class="token selector">p.demo4</span><span class="token punctuation">{</span>                <span class="token property">padding-top</span><span class="token punctuation">:</span>2cm            <span class="token punctuation">}</span>            <span class="token selector">p.demo5</span><span class="token punctuation">{</span>                <span class="token property">padding-bottom</span><span class="token punctuation">:</span>2cm            <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>这段文字每边的内边距相等。两边的衬垫是2cm.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>该文本的上下padding为0.5cm，左右padding为3cm.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="padding（内边距）：（完成）"><a href="#padding（内边距）：（完成）" class="headerlink" title="padding（内边距）：（完成）"></a>padding（内边距）：（完成）</h2><h3 id="padding-top-bottom（内边距上下）："><a href="#padding-top-bottom（内边距上下）：" class="headerlink" title="padding-top/bottom（内边距上下）："></a>padding-top/bottom（内边距上下）：</h3><ol><li>lentth：规定以具体单位计的固定的下内边距值，比如像素、厘米等。默认值是 0px。</li><li>$：定义基于父元素宽度的百分比下内边距。此值不会如预期地那样工作于所有的浏览器中。</li></ol><h3 id="padding-left-right（内边距左右）："><a href="#padding-left-right（内边距左右）：" class="headerlink" title="padding-left/right（内边距左右）："></a>padding-left/right（内边距左右）：</h3><ol><li>lentth：规定以具体单位计的固定的下内边距值，比如像素、厘米等。默认值是 0px。</li><li>$：定义基于父元素宽度的百分比下内边距。此值不会如预期地那样工作于所有的浏览器中。</li></ol><h3 id="代码示例：-4"><a href="#代码示例：-4" class="headerlink" title="代码示例："></a>代码示例：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">p.padding-left</span><span class="token punctuation">{</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span>2cm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">p.padding-right</span><span class="token punctuation">{</span>            <span class="token property">padding-right</span><span class="token punctuation">:</span>2cm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">p.padding-bottom</span><span class="token punctuation">{</span>            <span class="token property">padding-bottom</span><span class="token punctuation">:</span>2cm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">p.padding-top</span><span class="token punctuation">{</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span>2cm        <span class="token punctuation">}</span>       </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>padding-left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的左边元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>padding-right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的右边元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>padding-bottom<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的底部元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>padding-top<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>受影响的顶部元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Element（构成元素）："><a href="#Element（构成元素）：" class="headerlink" title="Element（构成元素）："></a>Element（构成元素）：</h1><h2 id="text（文本）：（完成）"><a href="#text（文本）：（完成）" class="headerlink" title="text（文本）：（完成）"></a>text（文本）：（完成）</h2><h3 id="text-align-last：对齐文本最后一行"><a href="#text-align-last：对齐文本最后一行" class="headerlink" title="text-align-last：对齐文本最后一行"></a>text-align-last：对齐文本最后一行</h3><p>常用方法：</p><ol><li>auto：最后一行被调整，并向左对齐（默认值）</li><li>left：最后一行向左对齐</li><li>right：最后一行向右对齐</li><li>center：最后一行居中对齐</li><li>start：最后一行在行开头对齐</li><li>end：</li><li></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-align：文本对齐方式"><a href="#text-align：文本对齐方式" class="headerlink" title="text-align：文本对齐方式"></a>text-align：文本对齐方式</h3><ol><li>left：排列左边对齐（默认）</li><li>right：排列到右边</li><li>center：排列到中间</li><li>justify：两端对齐文本效果</li><li>inherit：继承父元素</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tltle</span><span class="token punctuation">&gt;</span></span>测试文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tltle</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">b.</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>这是一段测试文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-decoration-line：顶部显示线条"><a href="#text-decoration-line：顶部显示线条" class="headerlink" title="text-decoration-line：顶部显示线条"></a>text-decoration-line：顶部显示线条</h3><p>常用方法：</p><ol><li>none：文本修饰没有线条（默认值）</li><li>underline：文本下方显示条线</li><li>overline：文本上方显示一条线</li><li>line-through：文本中间显示一条线</li><li>inherit：继承父元素</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>功能Demo测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">p</span><span class="token punctuation">{</span>                <span class="token property">text-decoration-line</span><span class="token punctuation">:</span>overline<span class="token punctuation">;</span>                <span class="token property">-moz-text-decoration-line</span><span class="token punctuation">:</span>overline<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            本实例中的段落上方会显示一条线        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-decoration-style：下方显示波浪线"><a href="#text-decoration-style：下方显示波浪线" class="headerlink" title="text-decoration-style：下方显示波浪线"></a>text-decoration-style：下方显示波浪线</h3><p>常用方法：</p><ol><li>solid：默认值，线条将显示为单线</li><li>double：线条显示双线</li><li>dotted：线条将显示为点状线</li><li>dashed：线条显示为虚线</li><li>wavy：线条显示为波浪线</li><li>inherit：继承父元素</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p{   text-decoration:underline;   -moz-text-decoration-style:wavy;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-indent：缩进段落第一行："><a href="#text-indent：缩进段落第一行：" class="headerlink" title="text-indent：缩进段落第一行："></a>text-indent：缩进段落第一行：</h3><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p{   text-indent:50px   text-indent:50%;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-justify：改变字与字之间间距"><a href="#text-justify：改变字与字之间间距" class="headerlink" title="text-justify：改变字与字之间间距"></a>text-justify：改变字与字之间间距</h3><p>常用API：</p><ol><li>auto：浏览器决定齐行算法</li><li>none：禁用齐行</li><li>inter-word：增加/减少单词间间隔</li><li>inter-ideograph：用文意文本来排齐内容</li><li>inter-cluster：只对不包含内部单词间隔内容进行排齐</li><li>distribute：类似报纸版面</li><li>kashida：通过拉伸字符来排齐内容。</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">div{  text-align:justify;  text-justify:inter-word;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="text-overflow：文本溢出包含它元素发生"><a href="#text-overflow：文本溢出包含它元素发生" class="headerlink" title="text-overflow：文本溢出包含它元素发生"></a>text-overflow：文本溢出包含它元素发生</h3><p>常用API：</p><ol><li>clip：修建文本</li><li>ellipsis：显示省略符号来代表被修建的文本</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p{  text-overflow:clip;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="text-shadow：文本阴影效果："><a href="#text-shadow：文本阴影效果：" class="headerlink" title="text-shadow：文本阴影效果："></a>text-shadow：文本阴影效果：</h3><p>常用API：</p><ol><li>h-shadow：必须，水平阴影位置</li><li>v-shadow：必须，垂直阴影位置</li><li>blur：可选，模糊距离</li><li>color：可选阴影颜色</li></ol><p>代码示例：</p><pre class="line-numbers language-htm" data-language="htm"><code class="language-htm">h1{  text-shadow:5px 5px 5px ##FF0000;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="text-transform：转换不同元素文本"><a href="#text-transform：转换不同元素文本" class="headerlink" title="text-transform：转换不同元素文本"></a>text-transform：转换不同元素文本</h3><p>常用方法：</p><ol><li>none：带有小写字母和大写字母标准文本</li><li>capitalize：文本中的每个单词以大写字母开头</li><li>uppercase：定义仅有大写字母</li><li>lowercase：定义无大写字母，仅有小写字母</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">h1{  text-transform:uppercase;}h2{  text-transform:capitalize;}p{  text-transform:lowercase;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Font（字体）：（完成）"><a href="#Font（字体）：（完成）" class="headerlink" title="Font（字体）：（完成）"></a>Font（字体）：（完成）</h2><p>常用API：</p><ol><li>xx-small：（把字体尺寸设置为不同尺寸）<ul><li>x-small：</li><li>small：</li><li>medium</li><li>lagre</li><li>x-lagre</li><li>xx-lagre</li></ul></li><li>smaller：设置为比父元素更小尺寸</li><li>larger：设置为比父元素更大尺寸</li><li>length：设置为一个固定值</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">h1{  font-size:250%;}h2{  font-size:1105;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>font-size-adjust：</li></ol><p>font-size-adjust 属性为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</p><pre class="line-numbers language-htm" data-language="htm"><code class="language-htm">h1{  font-size-adjust:0.58;}p{  font-size-adjust:0.60;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="font-size：字体尺寸"><a href="#font-size：字体尺寸" class="headerlink" title="font-size：字体尺寸"></a>font-size：字体尺寸</h4><p>常用方法：</p><ol><li>xx-small</li><li>x-small</li><li>small</li><li>medium（默认）</li><li>large</li><li>x-large</li><li>xx-large</li></ol><ul><li>smaller：比父元素更小的尺寸</li><li>larger：比父元素更大的尺寸</li><li>length：设置为固定值</li><li>%：设置基于父元素百分比</li></ul><h4 id="font-family：字体系列"><a href="#font-family：字体系列" class="headerlink" title="font-family：字体系列"></a>font-family：字体系列</h4><ul><li><strong>family-name</strong> - 指定的系列名称：具体字体的名称，比如：”times”、”courier”、”arial”。</li><li><strong>generic-family</strong> - 通常字体系列名称：比如：”serif”、”sans-serif”、”cursive”、”fantasy”、”monospace”。</li></ul><p>使用某种特定的字体系列（Geneva）完全取决于用户机器上该字体系列是否可用；这个属性没有指示任何字体下载。因此，强烈推荐使用一个通用字体系列名作为后路。</p><h4 id="font-style：字体样式"><a href="#font-style：字体样式" class="headerlink" title="font-style：字体样式"></a>font-style：字体样式</h4><p>常用API：</p><ol><li>normal：标准字体样式</li><li>italic：斜体字体样式</li><li>bolique：倾斜字体样式</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p.normal{  font-style:normal;}p.italic{  font-style:italic;}p.oblique{  font-style:oblique;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-name">-"normal"</span><span class="token punctuation">&gt;</span></span>这是默认文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="font-weight：文字粗细"><a href="#font-weight：文字粗细" class="headerlink" title="font-weight：文字粗细"></a>font-weight：文字粗细</h4><p>常用API：</p><ol><li>normal：标准字符（默认）</li><li>bold：粗体字符</li><li>bolder：定义更粗的字符</li><li>lighter：定义更细的字符</li><li>数字值：100、200</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">p.normal{  font-weight:normal;}p.thick{  font-weight:bold;}p.thicker{  font-weight:900;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Font系列功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      这是受影响的文字1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      这是受影响的文字2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       这是第三段受影响的文字3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>four<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        这是第四段受影响的文字    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS文件：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.one</span><span class="token punctuation">{</span>     <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token string">"方正舒体"</span><span class="token punctuation">,</span> <span class="token string">"方正宋一简体"</span><span class="token punctuation">;</span><span class="token comment">/* 设置字体，一般不用设置该属性*/</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span> <span class="token comment">/* 设置加粗样式*/</span><span class="token property">font-size</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token comment">/* 设置文本大小样式*/</span><span class="token property">color</span><span class="token punctuation">:</span>#F00<span class="token punctuation">;</span>       <span class="token comment">/* 设置文本颜色样式*/</span><span class="token property">font-style</span><span class="token punctuation">:</span>italic<span class="token punctuation">;</span>  <span class="token comment">/* 设置文本斜体样式*/</span><span class="token punctuation">}</span><span class="token selector">.two</span><span class="token punctuation">{</span><span class="token property">font</span><span class="token punctuation">:</span>italic 150px bold<span class="token punctuation">;</span><span class="token comment">/* 对于文本样式来说不建议采用综合写法*/</span><span class="token property">color</span><span class="token punctuation">:</span>#f00<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.three</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span>80px<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token property">text-shadow</span><span class="token punctuation">:</span>#f00 10px 10px 30px<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>line-through<span class="token punctuation">;</span><span class="token property">letter-spacing</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token comment">/* text-shadow:#000 0px 0px 5px,  #C93 0px 0px 10px , #F00 5px -5px;*/</span> 多重阴影叠加在一起<span class="token punctuation">}</span><span class="token selector">.four</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span>24px<span class="token punctuation">;</span><span class="token property">text-indent</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span><span class="token comment">/*缩进值等于文字大小的乘以2*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="List-style（列表）：（完成）"><a href="#List-style（列表）：（完成）" class="headerlink" title="List-style（列表）：（完成）"></a>List-style（列表）：（完成）</h2><h4 id="list-style-image：图片设置列表项标记"><a href="#list-style-image：图片设置列表项标记" class="headerlink" title="list-style-image：图片设置列表项标记"></a>list-style-image：图片设置列表项标记</h4><p>常用方法：</p><ol><li>URL();图像路径</li><li>none：默认，无图形显示</li></ol><h4 id="list-style-position：列表项标记放置位置"><a href="#list-style-position：列表项标记放置位置" class="headerlink" title="list-style-position：列表项标记放置位置"></a>list-style-position：列表项标记放置位置</h4><p>常用方法：</p><ol><li>inside：列表项标记放置文本以内，且环绕文本根据标记对齐。</li><li>outside：保持标记谓语文本左侧，列表项目标记位置在文本之外。</li></ol><h4 id="综合代码示例："><a href="#综合代码示例：" class="headerlink" title="综合代码示例："></a>综合代码示例：</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>list列表元素功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">ul</span><span class="token punctuation">{</span>                <span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>                  <span class="token property">list-style-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">""</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>                <span class="token property">list-style-position</span><span class="token punctuation">:</span> outside<span class="token punctuation">;</span>  &lt;!--inside--&gt;                   <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span> 测试元素1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>测试元素2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>测试元素3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Table（表格）：（正在进行）"><a href="#Table（表格）：（正在进行）" class="headerlink" title="Table（表格）：（正在进行）"></a>Table（表格）：（正在进行）</h2><h4 id="border-collapse：合并表格边框"><a href="#border-collapse：合并表格边框" class="headerlink" title="border-collapse：合并表格边框"></a>border-collapse：合并表格边框</h4><p>常用方法：</p><ol><li>collapse：边框会合并单一边框</li><li>seperate：默认值，边框会被分开。</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>border-collapse功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">table</span> <span class="token punctuation">{</span>    <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table, td, th</span> <span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>Firstname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>Lastname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Peter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Griffin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Lois<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Griffin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="border-spacing：单元格边框间距离"><a href="#border-spacing：单元格边框间距离" class="headerlink" title="border-spacing：单元格边框间距离"></a>border-spacing：单元格边框间距离</h4><p>常用方法：</p><ol><li>length：规定响铃单元的边框之间的距离<ul><li>如果定义一个length参数，定义的是水平和垂直间距</li><li>定义两个参数，第一个设置是水平间距，第二个是垂直间距。</li></ul></li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>border-spacing功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">table.ex1</span><span class="token punctuation">{</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span>seperate<span class="token punctuation">;</span>            <span class="token property">border-spacing</span><span class="token punctuation">:</span>10px 50px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">table.ex2</span><span class="token punctuation">{</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span>seperate<span class="token punctuation">;</span>            <span class="token property">border-spacing</span><span class="token punctuation">:</span>10px        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex1<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Peter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Griffin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Lois<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Griffin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex2<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Cleveland<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Brown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Glenn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Quagmire<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="caption-side：规定标题位置"><a href="#caption-side：规定标题位置" class="headerlink" title="caption-side：规定标题位置"></a>caption-side：规定标题位置</h4><ol><li>top：默认值，表格标题定位在表格之上。</li><li>bottom：把表格标题定位在表格之下</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="empty-cells：是否显示表格中空单元格边框与背景："><a href="#empty-cells：是否显示表格中空单元格边框与背景：" class="headerlink" title="empty-cells：是否显示表格中空单元格边框与背景："></a>empty-cells：是否显示表格中空单元格边框与背景：</h4><h4 id="table-layout：表格布局"><a href="#table-layout：表格布局" class="headerlink" title="table-layout：表格布局"></a>table-layout：表格布局</h4><ol><li>automatic：默认，列宽度由单元格内容设定</li><li>fixed：列宽由表格宽度和列宽度设定</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Marquee（字幕）："><a href="#Marquee（字幕）：" class="headerlink" title="Marquee（字幕）："></a>Marquee（字幕）：</h2><h1 id="其他元素："><a href="#其他元素：" class="headerlink" title="其他元素："></a>其他元素：</h1><h2 id="display：布局设置"><a href="#display：布局设置" class="headerlink" title="display：布局设置"></a>display：布局设置</h2><h2 id="opacity：透明度"><a href="#opacity：透明度" class="headerlink" title="opacity：透明度"></a>opacity：透明度</h2><ol><li>value：指定透明度</li></ol><h2 id="float：元素浮动"><a href="#float：元素浮动" class="headerlink" title="float：元素浮动"></a>float：元素浮动</h2><ol><li>left：元素向左浮动</li><li>right：元素向右浮动</li><li>none：元素不浮动</li></ol><h2 id="代码示例：-5"><a href="#代码示例：-5" class="headerlink" title="代码示例："></a>代码示例：</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> <span class="token selector">div</span>   <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span>0.5<span class="token punctuation">;</span>   <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>这是一段受影响的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实战附赠："><a href="#实战附赠：" class="headerlink" title="实战附赠："></a>实战附赠：</h1><h2 id="导航栏："><a href="#导航栏：" class="headerlink" title="导航栏："></a>导航栏：</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>导航栏测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/text<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Demo.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>一级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>一级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>第二个一级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级导航菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级导航菜单2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>B站链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主页地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级导航菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级导航菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>二级导航菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>一级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--这个元素定义导航切换线条--&gt;</span>                &lt; div class ="underline"&gt;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css文件：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*设置全局属性*/</span><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token comment">/* 页面初始化,清楚元素的内外边距 */</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token comment">/* 宽度占浏览器可视区域的高度 */</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100vm<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li</span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token comment">/* 盒子阴影 */</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token comment">/* 让元素自动水平居中 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul</span><span class="token punctuation">{</span>    <span class="token comment">/* 相对定位 */</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token comment">/* 弹性布局 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token comment">/* 让子元素平均分配宽度 */</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li &gt; a</span><span class="token punctuation">{</span><span class="token comment">/* 因为a元素是行内元素 必须将其转为行内块或者块级才能设置宽度和高度 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li ol</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1px 1px 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 让盒子先沿着y轴缩放到0 也就是隐藏了 */</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 我们需要将盒子从上面滑动下来 设置一下缩放的中心点即可 设置到最上面的中间位置 */</span>    <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50% 0<span class="token punctuation">;</span>    <span class="token comment">/* 设置过渡 */</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.6s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li ol li</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgb</span><span class="token punctuation">(</span>245<span class="token punctuation">,</span> 245<span class="token punctuation">,</span> 245<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li ol li a</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li ol li:hover</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.03<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li:hover ol</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul .underline</span><span class="token punctuation">{</span>    <span class="token comment">/* 绝对定位 */</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token comment">/* 设置一下盒子的左上角和右上角的圆角 */</span>    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #cc3333<span class="token punctuation">;</span>    <span class="token comment">/* 加上过渡 */</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span><span class="token comment">/* 现在有个小问题 我们一起看看 ne  /* 就是这个问题 这个线条有点影响鼠标移入li这个效果 */</span><span class="token comment">/* 这个属性就可以解决这个问题 就貌似这个元素你能看见 但是鼠标是点击不到了 现在鼠标放到线条也没事了 */</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul .underline::before</span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">/* 利用::before伪元素设置三角 */</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span><span class="token comment">/* calc方法自动计算数值 让盒子居中 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 9px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token comment">/* inherit可以继承父元素的属性值 */</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 100%<span class="token punctuation">,</span>50% 0<span class="token punctuation">,</span>100% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*切换不同菜单显示底色*/</span><span class="token selector">.navbar .nav ul &gt; li:nth-child(2):hover ~ .underline</span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span>  <span class="token comment">/*每次+240间距*/</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ff9933<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li:nth-child(3):hover ~ .underline</span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> 480px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #339933<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li:nth-child(4):hover ~ .underline</span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> 720px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #0099cc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.navbar .nav ul &gt; li:nth-child(5):hover ~ .underline</span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #9966cc<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity引擎</title>
      <link href="posts/e8496c7a.html"/>
      <url>posts/e8496c7a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Unity游戏引擎"><a href="#Unity游戏引擎" class="headerlink" title="Unity游戏引擎"></a>Unity游戏引擎</h1><p>//即将更新，敬请期待</p>]]></content>
      
      
      <categories>
          
          <category> 引擎框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity引擎 </tag>
            
            <tag> Animation </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> Mesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="posts/735e5788.html"/>
      <url>posts/735e5788.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="十种排序算法："><a href="#十种排序算法：" class="headerlink" title="十种排序算法："></a>十种排序算法：</h1><h1 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h1><ol><li>思想：若干次遍历要排序的数列，每次遍历时，从前往后一次比较相邻两个数大小，前者比后者大就交换他们的位置。</li><li><strong>原理演示</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> destination <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>destination<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//控制比较次数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>destination<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//控制比较相邻的两个元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>destination<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>destination<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换位置</span>            destination<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一共比较了"</span> <span class="token operator">+</span> count<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码模板：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   sorted<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                   arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>时间复杂度</li></ol><p>冒泡排序的时间复杂度是O(N2)。 假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢? N-1次！因此，冒泡排序的时间复杂度是O(N2)。</p><p>空间复杂度</p><p>冒泡排序是稳定的算法，它满足稳定算法的定义。 算法稳定性 – 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！</p><h1 id="快速排序："><a href="#快速排序：" class="headerlink" title="快速排序："></a>快速排序：</h1><ol><li>思想</li></ol><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="选择排序："><a href="#选择排序：" class="headerlink" title="选择排序："></a>选择排序：</h1><ol><li>思想：</li></ol><p>代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">11.553</span><span class="token number">.23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> index <span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token comment">//标记第一个为待比较的数字</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token comment">//然后从后面遍历与第一个数比较</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             index <span class="token operator">=</span>j<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token punctuation">}</span>           <span class="token comment">//交换位置</span>           <span class="token keyword">int</span> temp <span class="token operator">=</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>           arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码模板：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">366</span><span class="token punctuation">,</span><span class="token number">8989</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">SelectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="希尔排序："><a href="#希尔排序：" class="headerlink" title="希尔排序："></a>希尔排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="归并排序："><a href="#归并排序：" class="headerlink" title="归并排序："></a>归并排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="计数排序："><a href="#计数排序：" class="headerlink" title="计数排序："></a>计数排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="基数排序："><a href="#基数排序：" class="headerlink" title="基数排序："></a>基数排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="堆排序："><a href="#堆排序：" class="headerlink" title="堆排序："></a>堆排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><h1 id="桶排序："><a href="#桶排序：" class="headerlink" title="桶排序："></a>桶排序：</h1><p>时间复杂度：</p><p>空间复杂度：</p><ol><li>思想：</li></ol><p>代码思想演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 计算机原理 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot框架</title>
      <link href="posts/1c23133a.html"/>
      <url>posts/1c23133a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>//即将更新，敬请期待</p>]]></content>
      
      
      <categories>
          
          <category> 引擎框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="posts/a80d0031.html"/>
      <url>posts/a80d0031.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>//先画一个饼，有时间再不上。捂脸</p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA常用类</title>
      <link href="posts/ee391c0.html"/>
      <url>posts/ee391c0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用API："><a href="#常用API：" class="headerlink" title="常用API："></a>常用API：</h1><h2 id="Arrays类："><a href="#Arrays类：" class="headerlink" title="Arrays类："></a>Arrays类：</h2><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void sort(type[] a)<br>void sort(type[] a, int fromIndex, int toIndex)</td><td>对 a 数组的数组元素进行排序。<br>该方法仅仅对 fromIndex 到 toIndex 索引的元素进行排序。</td></tr><tr><td>void fill(type[] a, type val)<br>void fill(type[] a, int fromIndex, int toIndex, type val)</td><td>将会把 a 数组的所有元素都赋值为 val。<br>将 a 数组的 fromIndex 到 toIndex 索引的数组元素赋值为 val。</td></tr><tr><td>type[] copyOf(type[] original, int length)<br>type[] copyOfRange(type[] original, int from, int to)</td><td>original 数组复制成一个新数组，其中 length 是新数组的长度。<br>只复制 original 数组的 from 索引到 to 索引的元素</td></tr><tr><td>int binarySearch(type[] a, type key)<br>int binarySearch(type[] a, int fromIndex, int toIndex, type key)</td><td>二分法查询 key 元素值在 a 数组中出现的索引，如果 a 数组不包含 key 元素值，则返回负数。<br>只搜索 a 数组中 fromIndex 到 toIndex 索引的元素。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>代码示例；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scanner类："><a href="#Scanner类：" class="headerlink" title="Scanner类："></a>Scanner类：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>构造函数：<span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 接收键盘输入：   <span class="token class-name">String</span> receive <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> receive <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span> 判断是否还有输入   <span class="token keyword">if</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">String</span> str1 <span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据为"</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token number">3.</span> 关闭输入流：scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//偷学一招：接受键盘输入还有</span><span class="token class-name">BufferedInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> number <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>API用法辨析：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>与<span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>区别：<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">1</span>、一定要读取到有效字符后才可以结束输入。<span class="token number">2</span>、对输入有效字符之前遇到的空白，<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法会自动将其去掉。<span class="token number">3</span>、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。<span class="token number">4.</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不能得到带有空格的字符串。<span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token number">1</span>、以<span class="token class-name">Enter</span>为结束符<span class="token punctuation">,</span>也就是说 <span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回的是输入回车之前的所有字符。<span class="token number">2</span>、可以获得空白。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> x <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token string">"个数的和为"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token string">"个数的平均值是"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum <span class="token operator">/</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Random类："><a href="#Random类：" class="headerlink" title="Random类："></a>Random类：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span>构造函数：<span class="token class-name">Random</span><span class="token punctuation">(</span>random random<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span>  <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>  使用一个<span class="token keyword">long</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//传入种子</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math类："><a href="#Math类：" class="headerlink" title="Math类："></a>Math类：</h2><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>abs();</td><td>//absolute 计算绝对值</td></tr><tr><td>sqrt();</td><td>//计算方根</td></tr><tr><td>random();</td><td>//生成一个0~1.0之间随机值</td></tr><tr><td>pow();</td><td></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//absolute 计算绝对值</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//计算方根 </span><span class="token function">cell</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  生成一个<span class="token number">0</span><span class="token operator">~</span><span class="token number">1.0</span>之间随机值<span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//计算指数函数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算绝对值的结果: "</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求大于参数的最小整数: "</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求小于参数的最大整数: "</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对小数进行四舍五入后的结果: "</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求两个数的较大值: "</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求两个数的较小值: "</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成一个大于等于0.0小于1.0随机值: "</span> <span class="token operator">+</span>         <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开平方的结果: "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指数函数的值: "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="System类："><a href="#System类：" class="headerlink" title="System类："></a>System类：</h2><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>(static void) gc();</td><td>//运行垃圾回收器，用于对垃圾进行回收。</td></tr><tr><td>(public void) exit()</td><td>//退出虚拟机</td></tr><tr><td>(static Properities) getProperities()：</td><td>//取得当前系统属性</td></tr><tr><td>(static String) getProperities()</td><td>//获取指定键描述的系统属性。</td></tr><tr><td>(public void) currentTimeMills()</td><td>//返回以毫秒的当前时间。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span>i<span class="token operator">&lt;</span><span class="token number">10000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+</span> <span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统操作所消耗的时间"</span> <span class="token operator">+</span> endTime<span class="token operator">-</span>startTime <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getProperities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Properities</span> properities <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Enumeration</span> propertyNames <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>propertyNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//获取系统属性键key</span>      <span class="token class-name">String</span> key <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>propertyNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RunTime类："><a href="#RunTime类：" class="headerlink" title="RunTime类："></a>RunTime类：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token class-name">RunTime</span><span class="token punctuation">(</span>runtime runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>构造函数： <span class="token class-name">RunTime</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>getRuntime()</td><td>//返回当前应用程序操作对象</td></tr><tr><td>exec()</td><td>//根据指定路径执行对应可执行文件</td></tr><tr><td>freeMemory()<br>maxMemory()</td><td>//返回java虚拟机中空闲内存量<br>返回java虚拟机最大可用内存量</td></tr><tr><td>availiableProcessors()</td><td>返回当前虚拟机处理器个数</td></tr><tr><td>totalMemory()</td><td>//返回java虚拟机内存总量</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理器的个数: "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空闲内存数量: "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span>  <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大可用内存数量: "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span>  <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"虚拟机中内存总量: "</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>操作系统进程：<span class="token keyword">try</span><span class="token punctuation">{</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>关闭进程：  <span class="token class-name">Process</span> process <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到表示进程的process对象</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LocalTime类"><a href="#LocalTime类" class="headerlink" title="LocalTime类"></a>LocalTime类</h2><h2 id="Date类："><a href="#Date类：" class="headerlink" title="Date类："></a>Date类：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span>构造函数：<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Duration类"><a href="#Duration类" class="headerlink" title="Duration类"></a>Duration类</h2><h2 id="Applet类"><a href="#Applet类" class="headerlink" title="Applet类"></a>Applet类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>applet<span class="token punctuation">.</span></span><span class="token class-name">Applet</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="播放音频："><a href="#播放音频：" class="headerlink" title="播放音频："></a>播放音频：</h3><p>常用API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>applet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> clas <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">URI</span> uri <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">URL</span> url <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">AudioClip</span> clip <span class="token operator">=</span> <span class="token class-name">Applet</span><span class="token punctuation">.</span><span class="token function">newAudioClip</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  clip<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 常用API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql测试</title>
      <link href="posts/b5ac0bed.html"/>
      <url>posts/b5ac0bed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql整理"><a href="#Mysql整理" class="headerlink" title="Mysql整理"></a>Mysql整理</h1><h2 id="通用语法及分类："><a href="#通用语法及分类：" class="headerlink" title="通用语法及分类："></a>通用语法及分类：</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="数据定义语句（DDL）："><a href="#数据定义语句（DDL）：" class="headerlink" title="数据定义语句（DDL）："></a>数据定义语句（DDL）：</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ul><li>登录数据库：mysql -uroot -proot</li><li>创建数据库：create database test</li><li>查看所有数据库：show databases</li><li>使用数据库：use test</li><li>查看所有数据表：show tables</li><li>删除数据库：drop database test</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><ul><li>创建表：create table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2))  <pre><code>create table dept(deptno int(2),deptname varchar(10))</code></pre></li><li>查看表的定义：desc emp</li><li>查看表定义（详细）：show create table emp \G</li><li>删除表：drop table emp</li><li>修改表字段：alter table emp modify ename varchar(20)</li><li>添加表字段：alter table emp add column age int(3)</li><li>删除表字段：alter table emp drop column age</li><li>字段改名；alter table emp change age age1 int(4)</li><li>修改表名：alter table emp rename emp1</li></ul><p>注意事项：</p><h3 id="数据操纵语句-DML"><a href="#数据操纵语句-DML" class="headerlink" title="数据操纵语句(DML)"></a>数据操纵语句(DML)</h3><h4 id="Crud增删查改："><a href="#Crud增删查改：" class="headerlink" title="Crud增删查改："></a>Crud增删查改：</h4><ul><li>指定名称插入：insert into emp (ename,hiredate,sal,deptno) values (‘zhangsan’,’2018-01-01’,’2000’,1)</li><li>不指定名称插入：insert into emp values (‘lisi’,’2018-01-01’,’2000’,1)</li><li>批量插入数据：insert into dept values(1,’dept1’),(2,’dept2’)</li></ul><ol><li>插入记录</li></ol><p>update emp set sal=’4000’,deptno=2 where ename=’zhangsan’</p><ol start="2"><li>删除记录</li></ol><p>delete from emp where ename=’zhangsan’</p><ol start="3"><li>查询记录</li></ol><ul><li>查询所有记录：select  from emp</li><li>查询不重复的记录：select distinct deptno from emp</li><li>条件查询：select * from emp where deptno=1 and sal&lt;3000</li><li>排序和限制：select * from emp order by deptno desc limit 2</li><li>聚合(查询部门人数大于1的部门编号)：select deptno,count(1) from emp group by deptno having count(1) &gt; 1</li><li>连接查询：select * from emp e left join dept d on e.deptno=d.deptno</li><li>子查询：select * from emp where deptno in (select deptno from dept)</li><li>记录联合：select deptno from emp union select deptno from dept</li></ul><p>代码示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数据控制语句-DCL"><a href="#数据控制语句-DCL" class="headerlink" title="数据控制语句(DCL)"></a>数据控制语句(DCL)</h3><ul><li>授予操作权限：grant select,insert on test.* to ‘test’@’localhost’ identified by ‘123’</li><li>收回操作权限：revoke insert on test.* from ‘test’@’localhost’</li></ul><p>代码示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建用户test，只能在当前主机localhost访问create user 'test'@'localhost' identified by '123456';-- 创建用户test，能在任意主机访问create user 'test'@'%' identified by '123456';create user 'test' identified by '123456';-- 修改密码alter user 'test'@'localhost' identified with mysql_native_password by '1234';-- 删除用户drop user 'test'@'localhost';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据查询语言-DQL"><a href="#数据查询语言-DQL" class="headerlink" title="数据查询语言(DQL)"></a>数据查询语言(DQL)</h3><h2 id="常用API："><a href="#常用API：" class="headerlink" title="常用API："></a>常用API：</h2><h3 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 拼接SELECT CONCAT('Hello', 'World');-- 小写SELECT LOWER('Hello');-- 大写SELECT UPPER('Hello');-- 左填充SELECT LPAD('01', 5, '-');-- 右填充SELECT RPAD('01', 5, '-');-- 去除空格SELECT TRIM(' Hello World ');-- 切片（起始索引为1）SELECT SUBSTRING('Hello World', 1, 5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- DATE_ADDSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">selectname,(case when age &gt; 30 then '中年' else '青年' end)from employee;selectname,(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'from employee;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约束："><a href="#约束：" class="headerlink" title="约束："></a>约束：</h2><h3 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><ol><li>一对多</li></ol><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><ol start="2"><li>多对多</li></ol><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><ol start="3"><li>一对一</li></ol><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工姓名，及关联的部门的名称-- 隐式select e.name, d.name from employee as e, dept as d where e.dept = d.id;-- 显式select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><h3 id="外连接查询-1"><a href="#外连接查询-1" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 左select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样-- 右select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工及其所属领导的名字select a.name, b.name from employee a, employee b where a.manager = b.id;-- 没有领导的也查询出来select a.name, b.name from employee a left join employee b on a.manager = b.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表A ...UNION [ALL]SELECT 字段列表 FROM 表B ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询销售部所有员工select id from dept where name = '销售部';-- 根据销售部部门ID，查询员工信息select * from employee where dept = 4;-- 合并（子查询）select * from employee where dept = (select id from dept where name = '销售部');-- 查询xxx入职之后的员工信息select * from employee where entrydate &gt; (select entrydate from employee where name = 'xxx');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询销售部和市场部的所有员工信息select * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');-- 查询比财务部所有人工资都高的员工信息select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = '财务部'));-- 查询比研发部任意一人工资高的员工信息select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = '研发部'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询与xxx的薪资及直属领导相同的员工信息select * from employee where (salary, manager) = (12500, 1);select * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询与xxx1，xxx2的职位和薪资相同的员工select * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');-- 查询入职日期是2006-01-01之后的员工，及其部门信息select e.*, d.* from (select * from employee where entrydate &gt; '2006-01-01') as e left join dept as d on e.dept = d.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务："><a href="#事务：" class="headerlink" title="事务："></a>事务：</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 1. 查询张三账户余额select * from account where name = '张三';-- 2. 将张三账户余额-1000update account set money = money - 1000 where name = '张三';-- 此语句出错后张三钱减少但是李四钱没有增加模拟sql语句错误-- 3. 将李四账户余额+1000update account set money = money + 1000 where name = '李四';-- 查看事务提交方式SELECT @@AUTOCOMMIT;-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效SET @@AUTOCOMMIT = 0;-- 提交事务COMMIT;-- 回滚事务ROLLBACK;-- 设置手动提交后上面代码改为：select * from account where name = '张三';update account set money = money - 1000 where name = '张三';update account set money = money + 1000 where name = '李四';commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction;select * from account where name = '张三';update account set money = money - 1000 where name = '张三';update account set money = money + 1000 where name = '李四';commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="SQL底层逻辑理解"><a href="#SQL底层逻辑理解" class="headerlink" title="SQL底层逻辑理解"></a>SQL底层逻辑理解</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><h2 id="性能分析："><a href="#性能分析：" class="headerlink" title="性能分析："></a>性能分析：</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><h3 id="update（避免行锁升级为表锁）"><a href="#update（避免行锁升级为表锁）" class="headerlink" title="update（避免行锁升级为表锁）"></a>update（避免行锁升级为表锁）</h3>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA集合与泛型</title>
      <link href="posts/83eb274c.html"/>
      <url>posts/83eb274c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JAVA集合与泛型：import java.util.*;</p><p>集合优点：</p><ol><li><p>降低编程难度</p></li><li><p>提高程序性能</p></li><li><p>提高API间的互操作性</p></li><li><p>降低学习难度</p></li><li><p>降低设计和实现相关API的难度</p></li><li><p>增加程序的重用性</p><p>JAVA容器里只能放对象，对于基本类型（int long float\double）需要包装成对象类型才能放到容器里。很多时候拆包装和解包能够自动完成，虽然会导致额外性能和空间开销，但简化了设计和编程。</p></li></ol><h1 id="Collection：集合"><a href="#Collection：集合" class="headerlink" title="Collection：集合"></a>Collection：集合</h1><p>集合框架继承体系：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/06/24/ocu5EYUz.gif"></p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">boolean add(E e)<br>boolean addAll(Collection&lt;? extends E&gt; c)</font></td><td>//向集合添加元素e，若指定集合元素改变了则返回true<br>//把集合C中的元素全部添加到集合中，若指定集合元素改变返回true</td></tr><tr><td><font color="red">boolean contains(Object o)<br>boolean containsAll(Collection&lt;?&gt; c)</font></td><td>判断指定集合是否包含对象o<br>//判断指定集合是否包含集合c的所有元素</td></tr><tr><td><font color="red">boolean remove(Object o)<br>boolean removeAll(Collection&lt;?&gt; a）<br>void clear()</font></td><td>//删除集合中的元素对象o,若集合有多个o元素，则只会删除第一个元素<br>//删除指定集合包含集合c的元素<br>//清空所有集合元素</td></tr><tr><td><font color="red">boolean isEmpty()<br>boolean retainAll(Collection&lt;?&gt; c)</font></td><td>//判断指定集合的元素size是否为0<br>//从指定集合中保留包含集合c的元素,其他元素则删除</td></tr><tr><td><font color="red">int size()</font></td><td>集合的元素个数</td></tr><tr><td><font color="red">T[] toArray(T[] a)</font></td><td>将集合转换为T类型的数组</td></tr></tbody></table><h2 id="Intertor接口："><a href="#Intertor接口：" class="headerlink" title="Intertor接口："></a>Intertor接口：</h2><p><strong>主要方法</strong></p><ol><li>.next()：返回迭代器的下一个元素，并更新迭代器状态</li><li>.hasNext()：用于检测集合中是否还有其他元素</li><li>.remove()：将迭代器返回的元素删除。</li><li>循环集合元素：while(it.hasNext()){}</li><li>优点：不用担心遍历过程中会超出集合超度而报错。</li></ol><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> i <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除小于 10 的元素</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Set集合："><a href="#Set集合：" class="headerlink" title="Set集合："></a>Set集合：</h2><p>常用API：继承于Collection</p><p>Set集合特点：无序且不可重复</p><p>无序：添加的顺序和迭代的顺序可能不一致，无序不代表随机，元素没有对应的下标，不能通过像传统for循环来通过下标遍历元素</p><p>不可重复：每个元素都是互不相等的</p><p>构造函数：</p><table><thead><tr><th>构造函数名称</th><th>释义</th></tr></thead><tbody><tr><td>子类Set()</td><td>使用默认容量和 loadFactor 参数构造默认 TreeSet。</td></tr><tr><td>子类Set (int capacity) <br>子类Set (int capacity, float loadFactor)</td><td>在 Java 中构造一个具有初始容量值的 TreeSet，该容量值可以自动增加。</td></tr><tr><td>子类Set (Collection c)</td><td>构造一个TreeSet 并使用集合 C 中的元素对其进行初始化。</td></tr></tbody></table><h3 id="TreeSet："><a href="#TreeSet：" class="headerlink" title="TreeSet："></a>TreeSet：</h3><p>构造函数</p><table><thead><tr><th>构造函数名称</th><th>释义</th></tr></thead><tbody><tr><td>TreeSet()</td><td>使用默认容量和 loadFactor 参数构造默认 TreeSet。</td></tr><tr><td>TreeSet (int capacity)<br>TreeSet (int capacity, float loadFactor)</td><td>在 Java 中构造一个具有初始容量值的 TreeSet，该容量值可以自动增加。</td></tr><tr><td>TreeSet (Collection c)</td><td>构造一个TreeSet 并使用集合 C 中的元素对其进行初始化。</td></tr></tbody></table><p>常用API：继承于Collection集合</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Set</span> treeset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//structMethod1();</span><span class="token comment">//structMethod2();</span><span class="token function">structMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> treeset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">structMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Collection</span> arraylist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arraylist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arraylist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arraylist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span> treeset1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>arraylist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>treeset1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">structMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">TreeSet</span> treeSet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> num2<span class="token operator">-</span>num1<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>treeSet2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">structMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SortedSet</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> first<span class="token punctuation">,</span> <span class="token class-name">Integer</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> second<span class="token operator">-</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeSet</span> treeSet3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>treeSet3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashSet："><a href="#HashSet：" class="headerlink" title="HashSet："></a>HashSet：</h3><p>构造函数：</p><table><thead><tr><th>构造函数名称</th><th>释义</th></tr></thead><tbody><tr><td>HashSet()</td><td>使用默认容量和 loadFactor 参数构造默认 HashSet。</td></tr><tr><td>HashSet (int capacity) HashSet (int capacity, float loadFactor)</td><td>在 Java 中构造一个具有初始容量值的 HashSet，该容量值可以自动增加。</td></tr><tr><td>HashSet (Collection c)</td><td>构造一个 HashSet 并使用集合 C 中的元素对其进行初始化。</td></tr></tbody></table><p>常用API：继承于Collection接口</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">GalCharacters</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> dialog<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">GalCharacters</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">,</span> <span class="token class-name">String</span> dialog<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dialog <span class="token operator">=</span> dialog<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Set</span> hashset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GalCharacters</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GalCharacters</span> xinling <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GalCharacters</span><span class="token punctuation">(</span><span class="token string">"杏铃"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">,</span><span class="token string">"呀呀呀！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GalCharacters</span> ningning <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GalCharacters</span><span class="token punctuation">(</span><span class="token string">"绫地宁宁"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">,</span><span class="token string">"宁宁起爆器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GalCharacters</span> minglaibaiyu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GalCharacters</span><span class="token punctuation">(</span><span class="token string">"鸣濑白羽"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">,</span><span class="token string">"烦色特了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>xinling<span class="token punctuation">)</span><span class="token punctuation">;</span>hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ningning<span class="token punctuation">)</span><span class="token punctuation">;</span>hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minglaibaiyu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span>hashset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> next <span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>构造函数：</p><table><thead><tr><th>构造函数名称</th><th>释义</th></tr></thead><tbody><tr><td>LinkedHashSet()</td><td>使用默认容量和 loadFactor 参数构造默认 TreeSet。</td></tr><tr><td>LinkedHashSet (int capacity) <br>LinkedHashSet (int capacity, float loadFactor)</td><td>在 Java 中构造一个具有初始容量值的 TreeSet，该容量值可以自动增加。</td></tr><tr><td>LinkedHashSet (Collection c)</td><td>构造一个TreeSet 并使用集合 C 中的元素对其进行初始化。</td></tr></tbody></table><p>常用API：继承于Collection类方法</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Set</span> linkedHashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"测试元素一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"测试元素二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//其余三种构造方法</span>        <span class="token class-name">Set</span> linkedHashSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span> linkedHashSet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span> linkedHashSet3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>"鹰仓杏铃<span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"姬野星奏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"鸣濑白羽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> linkedHashSet2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Object</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map集合："><a href="#Map集合：" class="headerlink" title="Map集合："></a>Map集合：</h2><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">void  get(Object key)</font></td><td>返回Map集合中指定键对象所对应的值</td></tr><tr><td><font color="red">V put(K key, value va)<br>void putAll(map m);</font></td><td>向Map集合中添加键-值对，返回key以前对应value，如果没有则返回null。</td></tr><tr><td><font color="red">void remove(Object key)<br>void removeAll(object key)<br>void clear();</font></td><td>//从Map集合中删除key对应键-值对，返回key对应的value，如没有则返回null</td></tr><tr><td><font color="red">Set entrySet()<br>Set keySet()</font></td><td>//返回 Map 集合中所有键-值对的 Set 集合，此 Set 集合中元素的数据类型为 Map.Entry<br>返回 Map 集合中所有键对象的 Set 集合</td></tr><tr><td><font color="red">boolean containsKey();<br>boolean containsValue<br>boolean is Empty();</font></td><td>中是否存在指定的 key 对应的映射关系。<br>中是否存在指定的 value 对应的映射关系。</td></tr><tr><td><font color="red">int size</font></td><td>返回该 Map 里 key-value 对的个数</td></tr></tbody></table><p>元素遍历：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Method1</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Method2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Method3</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Method4</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Method1</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.keySet遍历key和value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span><span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Method2</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet使用iterator遍历key和value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Method3</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet遍历key和value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Method4</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.values()遍历所有的value，但不能遍历key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> v <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value= "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择合适的Map？"><a href="#选择合适的Map？" class="headerlink" title="选择合适的Map？"></a>选择合适的Map？</h3><ul><li>HashMap可实现快速储存和检索，但其缺点是包含的元素是无序的，这就导致存在大量迭代的情况下表现不佳，项目实操中用于空间复杂度换取时间复杂度。</li><li>LinkedHashMap保留了HashMap的优势，且其包含的元素是有序的。它在有大量迭代的情况下表现更好。</li><li>TreeMap能便捷的实现对其内部元素的各种排序，但其一般性能比前两种map差。</li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span><span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void containsKey();<br>void containsValue</td><td>hashMap 中是否存在指定的 key 对应的映射关系。<br>hashMap 中是否存在指定的 value 对应的映射关系。</td></tr><tr><td>void replace();<br>void replaceAll();</td><td>获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</td></tr><tr><td>void get();<br>void getOrDefault();</td><td>获取指定 key 对应对 value<br>获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</td></tr><tr><td>void comput();<br>void computAbsent();<br>void computePresent();</td><td>对 hashMap 中指定 key 的值进行重新计算<br>对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中<br>对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。</td></tr><tr><td>void merge(key,value,remappingFunction);</td><td>如果 key 对应的 value 不存在，则返回该 value 值，如果存在，则返回通过 remappingFunction 重新计算后的值。</td></tr><tr><td>void size();</td><td>计算 hashMap 中键/值对的数量</td></tr><tr><td>boolean isEmpty();</td><td>判断 hashMap 是否为空</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"JAVA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"33"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span>hashmap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> val <span class="token operator">=</span> hashmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编号"</span> <span class="token operator">+</span> key <span class="token operator">+</span><span class="token string">"编程语言"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入删除的编号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询</span><span class="token keyword">if</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hashmap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该书籍不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后的编号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">=</span>hashmap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> val <span class="token operator">=</span> hashmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编号"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"编程语言"</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1.</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//按照指定的comparator排序</span><span class="token number">2.</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//由给定的map创建一个TreeMap，keys按照自然排序</span><span class="token number">3.</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">SortedMap</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//由给定的有序map创建TreeMap，keys按照原顺序排序。</span><span class="token comment">//代码示例</span><span class="token number">1.</span> <span class="token comment">//=========================TreeMap(Comparator comparator);======================</span>  <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span> <span class="token comment">//===============================TreeMap(Map m);================================</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"测试文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treemap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span>map<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Map.Entry&lt;K,V&gt; firstEntry<br>Map.Entry&lt;K,V&gt; lastEntry</td><td>返回该TreeMap的第一个（最小的）映射<br>返回该TreeMap的最后一个（最大的）映射</td></tr><tr><td>k fistKey();<br>k lastKey();</td><td>返回该TreeMap的第一个（最小的）映射的key<br>返回该TreeMap的最后一个（最大的）映射的key</td></tr><tr><td>SortedMap&lt;K,V&gt; headMap(K toKey);<br>SortedMap&lt;K,V&gt;</td><td>返回该TreeMap中严格小于指定key的映射集合<br>返回该TreeMap中指定范围的映射集合（大于等于fromKey，小于toKey）</td></tr><tr><td>Comparator&lt;? super k&gt; comparator();</td><td>返回给该TreeMap的keys排序的comparator，若为自然排序则返回null</td></tr></tbody></table><p>遍历接口：</p><table><thead><tr><th>遍历接口</th><th>释义</th></tr></thead><tbody><tr><td>void forEach(BiConsumer&lt;? super K,? super V&gt; action)</td><td>对该TreeMap中的每一个映射执行指定操作</td></tr><tr><td>Set&lt;Map&lt;K, V&gt;&gt; entrySet()</td><td>返回由该TreeMap中的所有映射组成的Set对象</td></tr><tr><td>Collection<v> values()</v></td><td>返回由该TreeMap中所有的values构成的集合</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 集合与泛型练习<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> salary<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> o1<span class="token punctuation">,</span> <span class="token class-name">Goods</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span>salary <span class="token operator">-</span> o2<span class="token punctuation">.</span>salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">MyComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"生瓜蛋子"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"老坛酸菜牛肉面"</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"双汇火腿肠"</span><span class="token punctuation">,</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"干净又喂牲"</span><span class="token punctuation">,</span><span class="token number">29000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"004"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> key<span class="token operator">:</span>tree<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键值 "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"对应值"</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>构造函数：</p><pre class="line-numbers language-none"><code class="language-none">HashTable();HashTable(int initialCapacity);HashTable(int initialCapacity,float loadFactor);HashTable(Map&lt;? extends K,? extends V&gt; m);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承部分HashMap方法</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>protected void rehash()</td><td>增加这个散列表的内部重组能力，从而更有效地适应和访问其条目。</td></tr><tr><td>V putIfAbsent(K key, V value)</td><td>如果指定的键尚未与值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。</td></tr><tr><td>V  merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</td><td>如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。</td></tr><tr><td>Enumeration  keys() Enumeration elements()</td><td>返回此散列表中键的枚举。 返回HashTable中value的枚举。</td></tr><tr><td>int hashCode()</td><td>按照Map界面中的定义返回此Map的哈希码值。</td></tr><tr><td>V put(K key, V value)<br>void putAll(Map&lt;? extends K,? extends V&gt; t)<br>V putIfAbsent(K key, V value)</td><td>将指定的 key映射到此 key value中指定的value。<br>将所有从指定地图的映射复制到此散列表。<br>如果指定的键尚未与值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashTableDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hash_table <span class="token operator">=</span>                 <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"背背背起了行囊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">"离开家的那一刻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"我知道现实生活有太多不舍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"假如你看到了我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"也不要太过冷漠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始值为 "</span> <span class="token operator">+</span> hash_table<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"25号元素为 "</span> <span class="token operator">+</span> hash_table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10号元素为 "</span> <span class="token operator">+</span> hash_table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span><span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造方法</span><span class="token class-name">LinkedHashMap</span> linked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承父类Map集合</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 集合与泛型练习<span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMapDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> linked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建并添加元素</span>linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2345"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3456"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"javaee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3456"</span><span class="token punctuation">,</span> <span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> linked<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> value <span class="token operator">=</span> linked<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h3 id="选择合适的List？"><a href="#选择合适的List？" class="headerlink" title="选择合适的List？"></a>选择合适的List？</h3><p>对数组查询次数多：ArrayList</p><p>对数组修改次数多：LinkedList</p><p>数组线程安全：Vector</p><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><strong>void add(int index, Object obj)</strong><br><strong>boolean addAll(int index, Collection c)</strong></td><td>链表末尾添加元素，返回是否成功</td></tr><tr><td>public E get(int index);</td><td>返回集合中指定位置的元素。</td></tr><tr><td>int indexOf(object obj)<br>int lastIndexOf(Object obj)</td><td>返回调用列表obj的第一个（最后一个）实例的索引。如果obj不是列表中的一个元素，则返回-1。</td></tr><tr><td>public E set(int index,E element)</td><td>用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</td></tr></tbody></table><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>基于动态数组实现，支持随机访问</p><p>优点：底层数据结构是数组，查询快，增删慢</p><p>缺点：线程不安全，效率高。</p><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>public void addFirst(E e):<br>public void addLast(E e)<br>public void addpush(E e):</td><td>将指定元素插入此列表的开头<br>将指定元素添加到此列表的结尾<br>将元素推如此列表所表示的推栈</td></tr><tr><td>public E getFirst():<br>public E getLast()</td><td>返回此列表的第一个（最后一个元素）元素</td></tr><tr><td>public E removeFirst()<br>public E removeLast():</td><td>移除并返回此列表的第一个元素（最后一个元素）</td></tr><tr><td>ublic boolean isEmpty():</td><td>如果列表不包含元素，则返回true</td></tr></tbody></table><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 集合与泛型练习<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"学生名字"</span><span class="token punctuation">,</span><span class="token string">"学号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"学生名字2"</span><span class="token punctuation">,</span><span class="token string">"学号设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>优点：底层数据结构是数组，查询快，增删慢</p><p>缺点：线程安全但效率低</p><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span><span class="token keyword">int</span> increaseNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>add(int index,Object element)<br>add(object e)<br>addAll(Collection c);<br>addAll(int index,Collection c);<br>addElement(Object obj)</td><td>将指定的组件添加到此向量的末尾，将其大小增加 1在此向量的（指定位置）插入指定的元素。<br>将指定 Collection 中的所有元素添加到此向量的末尾，按照指定 collection 的迭代器所返回的顺序添加这些元素。<br>在指定位置将指定 Collection 中的所有元素插入到此向量中。<br></td></tr><tr><td>Object elementAt(index);</td><td>返回指定索引处的组件。</td></tr><tr><td>Enumeration elements();</td><td>返回此向量的组件的枚举</td></tr><tr><td>Object remove(int index)<br>boolean remove(Object o)<br>boolean removeAll(Collection c)<br>void removeAllElements()<br>boolean removeElement(Object obj)<br>void removeElementAt(int index)</td><td>//删除指定index元素<br>//移除此向量中指定元素的第一个匹配项，如果向量不包含该元素，则元素保持不变。<br>从此向量中移除包含在指定 Collection 中的所有元素。<br>从此向量中移除全部组件，并将其大小设置为零。</td></tr><tr><td>Object set(int index, Object element)<br>void setElementAt(Object obj, int index)</td><td>//用指定的元素替换此向量中指定位置处的元素。<br>将此向量指定 index 处的组件设置为指定的对象。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始大小为"</span> <span class="token operator">+</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始容量为"</span> <span class="token operator">+</span> vector<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加元素后当前Vector容量为"</span> <span class="token operator">+</span> vector<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vector<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vector<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"测试字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vector<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">5656</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vector<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>vector<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"测试字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vector<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"测试字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">Enumeration</span> num <span class="token operator">=</span> vector<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedList："><a href="#LinkedList：" class="headerlink" title="LinkedList："></a>LinkedList：</h3><p>基于双向链表实现，快速在链表中间插入和删除元素。LinkedList 还可以用作栈、队列和双向队列</p><p>优点：底层数据结构是链表，查询慢，增删快</p><p>缺点：线程不安全但效率高</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedList</span>（<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c） <span class="token comment">//按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表。</span><span class="token comment">//代码示例</span><span class="token class-name">LinkedList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>addFirst(E e) <br>addLast(E e) <br>offer(E e)  <br>offerFirst(E e)  offerLast(E e)</td><td>元素添加到头部（尾部）<br>向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。<br>头部（尾部）插入元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>poll() pollFirst() pollLast(); <br>removeFirst() removeLast();</td><td>JDK1.6新更新内容，删除并返回第一个元素<br>删除并返回第一个元素<br>删除并返回最后一个元素</td></tr><tr><td>set (int index, E element)</td><td>设置指定位置的元素。</td></tr><tr><td>element()<br>getFirst() getLast()<br>indexOf(Object o) lastIndexOf(Object o)<br>peek() peekFirst() peekLast()</td><td>返回第一个元素。<br>返回第一个元素。<br>返回最后一个元素<br>查找指定元素从前往后第一次出现的索引。<br>查找指定元素最后一次出现的索引。<br>返回第一个元素。<br>返回头部（尾部）元素。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Goods</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"商品编号"</span> <span class="token operator">+</span> id <span class="token operator">+</span><span class="token string">",名称："</span> <span class="token operator">+</span> name <span class="token operator">+</span>  <span class="token string">",价格"</span> <span class="token operator">+</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Goods</span> rsq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"热水器"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Goods</span> watermelon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"生瓜蛋子"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Goods</span> toplap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"笔记本电脑"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>watermelon<span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toplap<span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rsq<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****商品信息********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"首个商品为"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"末尾商品为"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Generic：泛型"><a href="#Generic：泛型" class="headerlink" title="Generic：泛型"></a>Generic：泛型</h1><p>泛型定义：本质上是参数化类型，也就是说操作的数据类型被指定为一个参数。将类型由原来的具体的类型参数化，然后在使用或者调用时传入具体类型。这种参数可以用在类、方法、接口中被称作为泛型类、泛型方法、泛型接口。</p><ul><li><p>泛型定义格式：</p></li><li><p>&lt;类型&gt;：指定一种类型的格式。这里的类型可以看成是形参。</p></li><li><p>&lt;类型1,类型2…&gt;：指定多种类型的格式，多种类型用逗号隔开，这里的类型可以看成是形参。</p></li><li><p>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</p></li></ul><p>使用泛型好处：</p><ol><li>避免了强制类型转换</li><li>运行使其的问题提前到了编译期间。</li></ol><p>Java中泛型标记符含义：</p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><ul><li><p>类型通配符：&lt; ?&gt;</p></li><li><p>类型通配符用?代替具体类型实参的父类，它的元素可以匹配任何类型</p></li><li><p>带通配符的List仅仅表示他是各种类型的父类，并不能把元素添加到其中。</p></li></ul><h3 id="通配符上限："><a href="#通配符上限：" class="headerlink" title="通配符上限："></a>通配符上限：</h3><ul><li>类型通配符上限：&lt; ? extends 类型&gt;</li><li>List&lt;? extends Number&gt;：表示的类型是Number或者其子类型</li></ul><h3 id="通配符下限："><a href="#通配符下限：" class="headerlink" title="通配符下限："></a>通配符下限：</h3><ul><li>类型通配符下限：&lt;?super类型&gt;</li><li>List&lt;?super Number&gt;：表示的类型是Number或者其父类型</li></ul><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                name<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//getUperNumber(name);//1</span>        <span class="token function">getUperNumber</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token function">getUperNumber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>          <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getUperNumber</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">voidgetLowerNumber</span><span class="token punctuation">(</span><span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>定义格式：</p><ul><li>格式：修饰符 &lt; 类型&gt; 返回值类型方法名 (类型变量名) {}</li><li>示例：public &lt; T&gt; void show(T t){}</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">E</span> <span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token comment">// 输出数组元素            </span>         <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">E</span> element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%s "</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> intarray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doublearray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">6.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chararray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringarray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"背背背起了行囊"</span><span class="token punctuation">,</span><span class="token string">"离开家的那一刻"</span><span class="token punctuation">,</span><span class="token string">"我知道现实生活有太多不舍"</span><span class="token punctuation">,</span><span class="token string">"你看到了我"</span><span class="token punctuation">,</span><span class="token string">"是哪一种颜色"</span><span class="token punctuation">,</span><span class="token string">"悲伤或快乐"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整型数组中元素为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>intarray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n双精度型数组元素为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>doublearray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n字符型数组元素为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>chararray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n字符串数组元素为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>stringarray<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ol><li>和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>t<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Book</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> java <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Book</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> python <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"java从跨平台到跨专业.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    python<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"python从爬虫到入狱.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"正在热卖java书籍 :%s\n"</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"正在热卖Python书籍：%s\\n"</span><span class="token punctuation">,</span>python<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口定义格式：</p><ul><li>格式：修饰符 interface 接口名 &lt;类型&gt;{}</li><li>示例：public interface DemoInterface&lt; T&gt;{}</li></ul><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口文件额外放一个文件</span><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GenericInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">GenericInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"这是一段测试文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h1><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>expression<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>statements<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//代码示例：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lamda表达式重要特性：</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li></ul><p>代码示例：</p><h2 id="Lamda遍历数组"><a href="#Lamda遍历数组" class="headerlink" title="Lamda遍历数组"></a>Lamda遍历数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example29</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"program"</span><span class="token punctuation">,</span> <span class="token string">"creek"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"site"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda语句体中只有一条语句，参数类型可推断："</span><span class="token operator">+</span>       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> m<span class="token punctuation">,</span> <span class="token class-name">String</span> n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> n<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda语句体中有多条语句："</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lamda遍历集合："><a href="#Lamda遍历集合：" class="headerlink" title="Lamda遍历集合："></a>Lamda遍历集合：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 集合与泛型练习<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashTableDemo</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">LamdaMap</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">LamdaList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">LamdaMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"团长你就是歌姬吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"Ok,兄弟们全体目光向我看齐，我宣布个事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"大哥背行囊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"伞兵一号卢本伟准备就绪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashmap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> k <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">LamdaList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"团长你就是歌姬吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Ok,兄弟们全体目光向我看齐，我宣布个事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"你强任你强，大哥背行囊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"伞兵一号卢本伟准备就绪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lamda表达式</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>in<span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lamda监听器写法："><a href="#Lamda监听器写法：" class="headerlink" title="Lamda监听器写法："></a>Lamda监听器写法：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IternalFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"测试按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lamda式监听机制书写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 集合与泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#IO流</title>
      <link href="posts/5141f008.html"/>
      <url>posts/5141f008.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-IO流："><a href="#C-IO流：" class="headerlink" title="C#IO流："></a>C#IO流：</h1><h1 id="File类："><a href="#File类：" class="headerlink" title="File类："></a>File类：</h1><h2 id="DriveInfo类（驱动器信息）"><a href="#DriveInfo类（驱动器信息）" class="headerlink" title="DriveInfo类（驱动器信息）"></a>DriveInfo类（驱动器信息）</h2><p>构造方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Driveinfo</span><span class="token punctuation">(</span>string driveName<span class="token punctuation">)</span><span class="token comment">//代码示例</span>DriveIndo driveInfo <span class="token operator">=</span> new <span class="token function">DriveInfo</span><span class="token punctuation">(</span><span class="token string">"C:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void AvailableFreeSpace</td><td>只读属性，获取驱动器上的可用空闲空间量 (以字节为单位)</td></tr><tr><td>void DriveFormat</td><td>只读属性，获取文件系统格式的名称，例如 NTFS 或 FAT32</td></tr><tr><td>void DriveType</td><td>只读属性，获取驱动器的类型，</td></tr><tr><td>bool IsReady</td><td>只读属性，获取一个指示驱动器是否已准备好的值，True 为准备好了， False 为未准备好</td></tr><tr><td>void Name</td><td>只读属性，获取驱动器的名称，例如 C:\</td></tr><tr><td>void RootDirectory</td><td>只读属性，获取驱动器的根目录</td></tr><tr><td>void TotalFreeSpace</td><td>只读属性，获取驱动器上的可用空闲空间总量 (以字节为单位)</td></tr><tr><td>void TotalSize</td><td>只读属性，获取驱动器上存储空间的总大小 (以字节为单位)</td></tr><tr><td>void VolumeLabel</td><td>属性， 获取或设置驱动器的卷标</td></tr><tr><td>Driveinfo[] GetDrives()</td><td>静态方法，检索计算机上所有逻辑驱动器的驱动器名称</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace demo{class Program{    static void Main(string[] args)    {        DriveInfo driveInfo = new DriveInfo("D");        Console.WriteLine("驱动器的名称：" + driveInfo.Name);        Console.WriteLine("驱动器类型：" + driveInfo.DriveType);        Console.WriteLine("驱动器的文件格式：" + driveInfo.DriveFormat);        Console.WriteLine("驱动器中可用空间大小：" + driveInfo.TotalFreeSpace);        Console.WriteLine("驱动器总大小：" + driveInfo.TotalSize);    }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Directory-DirectoryInfo类（文件夹操作）"><a href="#Directory-DirectoryInfo类（文件夹操作）" class="headerlink" title="Directory/DirectoryInfo类（文件夹操作）"></a>Directory/DirectoryInfo类（文件夹操作）</h2><p>构造方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Directory</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造方法</span>String destination <span class="token operator">=</span>@<span class="token string">""</span><span class="token punctuation">;</span>Directory path <span class="token operator">=</span> new <span class="token function">Directory</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>boolean Exists();</td><td>//获取目录是否存在</td></tr><tr><td>boolean Root();</td><td>//获取子目录的父目录</td></tr><tr><td>void delete();   <br>void delete(boolean recursive);</td><td>//如果目录为空，则将目录删除<br>//指示是否删除子目录和文件</td></tr><tr><td>void Move();<br>bool Exist<br>void Name<br>void Parent<br>void Root</td><td>//移动文件夹（不能垮驱动器移动）<br>只读属性，获取指示目录是否存在的值<br>只读属性，获取 Directorylnfo 实例的目录名称<br>只读属性，获取指定的子目录的父目录<br>只读属性，获取目录的根部分</td></tr><tr><td>void CreateDirectory(“”);  <br>void CreateSubdirectory(String path);</td><td>//创建文件夹<br>//在指定路径上创建一个或多个子目录</td></tr><tr><td>FileInfo[] GetFiles()<br>FileInfo[] GetFiles(string searchPattern)</td><td>//取得文件夹下所有文件名<br>//取得文件夹下所有子文件夹名</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">using System<span class="token punctuation">;</span>namespace demo<span class="token punctuation">{</span>public class Program<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            string source <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            DirectoryInfo info <span class="token operator">=</span> new <span class="token function">DirectoryInfo</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">foreach</span><span class="token punctuation">(</span>DirectoryInfo demo in info<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//遍历文件</span>            <span class="token operator">+</span>            <span class="token function">foreach</span><span class="token punctuation">(</span>FileInfo nextFile in info<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>nextFile<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment">//遍历文件和文件夹</span>            <span class="token function">foreach</span><span class="token punctuation">(</span>FileSystemInfo nextFile in info<span class="token punctuation">.</span><span class="token function">GetFileSystemInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>nextFile<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="File-FileInfo类："><a href="#File-FileInfo类：" class="headerlink" title="File/FileInfo类："></a>File/FileInfo类：</h2><h3 id="File类-（文件信息）"><a href="#File类-（文件信息）" class="headerlink" title="File类 （文件信息）"></a>File类 （文件信息）</h3><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>DateTime GetCreationTime(string path)<br>DateTime GetLastAccessTime(string path)<br>DateTime GetLastWriteTime(string path)</td><td>返回指定文件或目录的创建日期和时间<br>返回上次访问指定文件或目录的日期和时间<br>返回上次写入指定文件或目录的日期和时间</td></tr><tr><td>void SetCreationTime(string path, DateTime creationTime)<br>void SetLastAccessTime(string path, DateTime lastAccessTime)<br>void SetLastWriteTime(string path, DateTime lastWriteTime)</td><td>设置创建该文件的日期和时间<br>设置上次访问指定文件的日期和时间<br>设置上次写入指定文件的日期和时间</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Program<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//在D盘下创建code文件夹</span>        Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span><span class="token string">"D:\\code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span><span class="token string">"D:\\code-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string path <span class="token operator">=</span> <span class="token string">"D:\\code\\test1.txt"</span><span class="token punctuation">;</span>        <span class="token comment">//创建文件</span>        FileStream fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取文件信息</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件创建时间："</span> <span class="token operator">+</span> File<span class="token punctuation">.</span><span class="token function">GetCreationTime</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件最后被写入时间："</span> <span class="token operator">+</span> File<span class="token punctuation">.</span><span class="token function">GetLastWriteTime</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭文件流</span>        fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置目标路径</span>        string newPath <span class="token operator">=</span> <span class="token string">"D:\\code-1\\test1.txt"</span><span class="token punctuation">;</span>        <span class="token comment">//判断目标文件是否存在</span>        bool flag <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//删除文件</span>            File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FileInfo类（文件操作）"><a href="#FileInfo类（文件操作）" class="headerlink" title="FileInfo类（文件操作）"></a>FileInfo类（文件操作）</h3><p>构造方法：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">FileInfo info = new FileInfo(String path);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常有API</th><th>释义</th></tr></thead><tbody><tr><td>void Directory<br>void DirectoryName<br>void Name<br>void Delete()<br>void MoveTo(string destFileName)</td><td>只读属性，获取父目录的实例<br>只读属性，获取表示目录的完整路径的字符串<br>只读属性，获取文件的名称<br>删除文件<br>将指定文件移到新位置，提供要指定新文件名的选项</td></tr><tr><td>Filelnfo CopyTo(string destFileName)<br>Filelnfo CopyTo(string destFileName, bool overwrite)</td><td>将现有文件复制到新文件，允许/不允许覆盖现有文件</td></tr><tr><td>void Length();<br>bool isReadOnly()</td><td>只读属性，获取文件的大小<br>属性，获取或设置指定的文件是否为只读的</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">using System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>using System<span class="token punctuation">;</span>namespace ConsoleApp    class Demo<span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//在D盘下创建code文件夹</span>        Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span><span class="token string">"D:\\code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInfo fileInfo <span class="token operator">=</span> new <span class="token function">FileInfo</span><span class="token punctuation">(</span><span class="token string">"D:\\code\\test1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileInfo<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//创建文件</span>            fileInfo<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fileInfo<span class="token punctuation">.</span>Attributes <span class="token operator">=</span> FileAttributes<span class="token punctuation">.</span>Normal<span class="token punctuation">;</span><span class="token comment">//设置文件属性</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件路径："</span><span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>Directory<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件名称："</span><span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件是否只读："</span><span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>IsReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件大小："</span> <span class="token operator">+</span>fileInfo<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先创建code-1 文件夹</span>        <span class="token comment">//将文件移动到code-1文件夹下</span>        Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span><span class="token string">"D:\\code-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断目标文件夹中是否含有文件test1.txt</span>        FileInfo newFileInfo <span class="token operator">=</span> new <span class="token function">FileInfo</span><span class="token punctuation">(</span><span class="token string">"D:\\code-1\\test1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newFileInfo<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//移动文件到指定路径</span>            fileInfo<span class="token punctuation">.</span><span class="token function">MoveTo</span><span class="token punctuation">(</span><span class="token string">"D:\\code-1\\test1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Path类（路径字符串处理）"><a href="#Path类（路径字符串处理）" class="headerlink" title="Path类（路径字符串处理）"></a>Path类（路径字符串处理）</h3><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>string ChangeExtension(string path, string extension)<br>string Combine(params string[] paths)<br>string Combine(string path1, string path2)<br>string GetDirectoryName(string path)<br>string GetExtension(string path)<br>string GetFileName(string path)<br>string GetFileNameWithoutExtension(string path)<br>string GetFullPath(string path)<br>string GetPathRoot(string path)<br>string GetRandomFileName()<br>string GetTempPath()</td><td>更改路径字符串的扩展名<br>将字符串数组组合成一个路径<br>将两个字符串组合成一个路径<br>返回指定路径字符串的目录信息<br>返回指定路径字符串的扩展名<br>返回指定路径字符串的文件名和扩展名<br>返回不具有扩展名的指定路径字符串的文件名<br>返回指定路径字符串的绝对路径<br>获取指定路径的根目录信息<br>返回随机文件夹名或文件名<br>返回当前用户的临时文件夹的路径</td></tr><tr><td>char[] GetInvalidFileNameChars()</td><td>获取包含不允许在文件名中使用的字符的数组</td></tr><tr><td>char[] GetInvalidPathChars()</td><td>获取包含不允许在路径名中使用的字符的数组</td></tr><tr><td>bool HasExtension(string path)</td><td>返回路径是否包含文件的扩展名</td></tr><tr><td>bool IsPathRooted(string path)</td><td>返回路径字符串是否包含根</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Program<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入一个文件路径："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string path <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"不包含扩展名的文件名："</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFileNameWithoutExtension</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件扩展名："</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件全名："</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件路径："</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更改文件扩展名</span>        string newPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">ChangeExtension</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"doc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"更改后的文件全名："</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据流："><a href="#数据流：" class="headerlink" title="数据流："></a>数据流：</h1><p>涉及三个基本操作：</p><ol><li>可以读取流(Read)。读取是从流到数据结构（如字节数组）的数据传输。</li><li>可以写入流(Write)。写入是从数据结构到流的数据传输。</li><li>流可以支持查找(Seek、Position)。查找是对流内的当前位置进行的查询和修改。查找功能取决于流具有的后备存储区类型。例如，网络流没有当前位置的统一概念，因此一般不支持查找。</li></ol><h2 id="FileStream流：（文件流）"><a href="#FileStream流：（文件流）" class="headerlink" title="FileStream流：（文件流）"></a>FileStream流：（文件流）</h2><p>常用API：涉及多个枚举值（顺序不能错）</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>FileAccess（文件访问方式）</td><td>Read：以只读方式打开文件<br>  Write：以写方式打开文件 <br>  ReadWrite：以读写方式打开文件</td></tr><tr><td>FileMode：文件打开或创建方式</td><td>CreateNew：创建新文件，文件已存在则抛出异常 <br> Create：创建文件，如果文件不存在，则删除原来文件，重新创建文件。<br> Open：打开已存在的文件，如果文件不存在，则抛出异常。 <br> OpenOrCreate：打开已存在文件，不存在则创建<br>Truncate：<br>Append：打开文件，用于向文件中追加内容，文件不存在则创建。</td></tr><tr><td>FileShared：设置多个对象同时访问一个文件时访问控制</td><td>None：谢绝共享当前的文件。 <br>  Read：允许随后打开文件读取信息。 <br>  ReadWrite：允许随后打开文件读写信息。 <br>  Write：允许随后打开文件写入信息。 <br>  Delete：允许随后删除文件。 <br>  Inheritable：使文件句柄可由子进程继承。</td></tr><tr><td>FIleOptions：文件的高级选项，包括文件是否加密、访问后是否删除等</td><td>WriteThrough：指示系统应通过任何中间缓存、直接写入磁盘。 <br>  None：指示在生成 System.IO.FileStream 对象时不应使用其他选项。 <br>  Encrypted：指示文件是加密的，只能通过用于加密的同一用户账户来解密。<br>   DeleteOnClose：指示当不再使用某个文件时自动删除该文件。 <br>   SequentialScan：指示按从头到尾的顺序访问文件。 <br>   RandomAccess：指示随机访问文件。 <br>   Asynchronous：指示文件可用于异步读取和写入。</td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c">构造方法：<span class="token comment">//根据需要来选择后缀</span><span class="token function">FileStream</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>FileMode mode<span class="token punctuation">,</span>FileAccess access<span class="token punctuation">,</span> FileShare share<span class="token punctuation">,</span>FileOptions options<span class="token punctuation">)</span><span class="token punctuation">;</span>代码形式：FileStream fileStream1 <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">;</span>FileStream fileStream2 <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>FileStream fileStream3 <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>FileStream fileStream4 <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> FileOptions<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例：</span>FileStream stream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>  FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span>FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">String destination <span class="token operator">=</span> @<span class="token string">""</span><span class="token punctuation">;</span>FileStream fileStream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">FileStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><ol><li>将指定文字输入到指定路径</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">namespace ConsoleApp<span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    String destination <span class="token operator">=</span> @<span class="token string">""</span><span class="token punctuation">;</span>    FileStream fileStream <span class="token operator">=</span> new        <span class="token function">FileStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span>FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>     String context <span class="token operator">=</span> <span class="token string">"这是被写入的数据"</span><span class="token punctuation">;</span>      byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      fileStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//数据全部写入</span>      fileStream<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fileStream<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>读取指定文字并打印到控制台：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">using System<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>namespace ConsoleDemo<span class="token punctuation">{</span>public class Demo<span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>  string path <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> new byte<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  FileStream fileRead <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> text <span class="token operator">=</span> fileRead<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buff<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>  fileRead<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileRead<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  string context <span class="token operator">=</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="StreamWriter（读写流）："><a href="#StreamWriter（读写流）：" class="headerlink" title="StreamWriter（读写流）："></a>StreamWriter（读写流）：</h2><p>构造方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">StreamWriter</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//实例化</span>String path <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>StreamWriter stream <span class="token operator">=</span> new <span class="token function">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">StreamWriter</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>Stream stream<span class="token punctuation">,</span>Encoding encoding<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">boolean AutoFlush();<br>void .Close();<br>void .Flush();<br>void Write/WriteLine(char value);</font></td><td>继承于流相关不加以赘述</td></tr><tr><td>Task WriteAsync(char value)<br>Task Write/WriteLineAsync(char value);</td><td>//将字符异步换行写入流中</td></tr><tr><td>Encoding Encoding</td><td>只读属性，获取当前流中的编码方式</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Demo<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        String path <span class="token operator">=</span> @<span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment">//位置</span>        StreamWriter streamWriter <span class="token operator">=</span> new <span class="token function">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        streamWriter<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"测试文字1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamWriter<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"测试文字2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamWriter<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamWriter<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StreamReader类"><a href="#StreamReader类" class="headerlink" title="StreamReader类"></a>StreamReader类</h3><p>构造方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">StreamReader</span><span class="token punctuation">(</span>Stream stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//实例化</span><span class="token function">StreamReader</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为指定路径的文件实例</span><span class="token function">StreamReader</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String stream<span class="token punctuation">,</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void close();</td><td></td></tr><tr><td>int Peek()<br>int Read();<br>int Read(char[] buffer, int index, int count)</td><td>获取流中的下一个字符的整数，如果没有获取到字符， 则返回 -1<br>获取流中的下一个字符的整数<br>从指定的索引位置开始将来自当前流的指定的最多字符读到缓冲区</td></tr><tr><td>string ReadLine()<br>string ReadToEnd()</td><td>从当前流中读取一行字符并将数据作为字符串返回<br>读取来自流的当前位置到结尾的所有字符</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Program<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        String path <span class="token operator">=</span>@<span class="token string">""</span><span class="token punctuation">;</span>        StreamReader reader <span class="token operator">=</span> new <span class="token function">StreamReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String str<span class="token operator">=</span>StreamReader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Reader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BinaryWriter类：（二进制读写）"><a href="#BinaryWriter类：（二进制读写）" class="headerlink" title="BinaryWriter类：（二进制读写）"></a>BinaryWriter类：（二进制读写）</h2><p>构造方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">BinaryWriter</span><span class="token punctuation">(</span>Stream output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BinaryWriter</span><span class="token punctuation">(</span>Stream output<span class="token punctuation">,</span>Encoding encoding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BinaryWriter</span><span class="token punctuation">(</span>Stream out<span class="token punctuation">,</span>Encoding encoding<span class="token punctuation">,</span> boolean leaveOpen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例：</span>FileStream stream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>Open<span class="token punctuation">.</span>FileMode<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinaryWriter writer <span class="token operator">=</span> new <span class="token function">BinaryWriter</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span>UTF8<span class="token punctuation">,</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">void Close()<br>void Flush()<br>void Write(char[] chars)</font></td><td>//继承属性不加以赘述</td></tr><tr><td>Write7BitEncodedInt(int value)</td><td>以压缩格式写出 32 位整数</td></tr><tr><td>long Seek(int offset, SeekOrigin origin)</td><td>返回查找的当前流的位置</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Demo<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   String path <span class="token operator">=</span> @<span class="token string">""</span><span class="token punctuation">;</span>   FileStream fileStream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>CreateOrOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryWriter binary <span class="token operator">=</span> new <span class="token function">BinaryWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>   binary<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"C#基础教程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   binary<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   binary<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   binary<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path2 <span class="token operator">=</span> @<span class="token string">""</span><span class="token punctuation">;</span>        fileStream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>        BinaryReader reader <span class="token operator">=</span> new <span class="token function">BinaryReader</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">ReadDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BinaryReader"><a href="#BinaryReader" class="headerlink" title="BinaryReader"></a>BinaryReader</h3><p>构造方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*参数解析@para：input 输入流@para：encoding：编码方式@para：leaveOpen流读取后是否包括流的打开状态*/</span><span class="token function">BinaryReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BinaryReader</span><span class="token punctuation">(</span>Stream input<span class="token punctuation">,</span> Encoding encoding<span class="token punctuation">)</span> <span class="token function">BinaryReader</span><span class="token punctuation">(</span>Stream input<span class="token punctuation">,</span> Encoding encoding<span class="token punctuation">,</span> bool leaveOpen<span class="token punctuation">)</span>     <span class="token comment">//代码示例</span>string path <span class="token operator">=</span>@<span class="token string">"D:\\demo.txt"</span>FileStream stream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>Write<span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>BinaryReader reader <span class="token operator">=</span> new <span class="token function">BinaryReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">"UTF8"</span><span class="token punctuation">,</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">int Read()<br>int Read(byte[] buffer, int index, int count)<br>int Read(char[] buffer, int index, int count)</font></td><td>//继承属性，不加以赘述</td></tr><tr><td>bool ReadBoolean()<br>char ReadChar()<br>double ReadDouble()<br></td><td>从当前流中读取 Boolean 值，并使该流的当前位置提升 1 个字节<br>从当前流中读取下一个字符，并根据所使用的 Encoding 和从流中读取的特定字符提升流的当前位置<br>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节</td></tr><tr><td>void FillBuffer(int numBytes)</td><td>用从流中读取的指定字节数填充内部缓冲区</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">using System<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>namespace ConsoleApp3<span class="token punctuation">{</span>    class Class1    <span class="token punctuation">{</span>        public class Demo        <span class="token punctuation">{</span>            <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token punctuation">{</span>               <span class="token comment">// Method1();</span>                <span class="token function">Method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            private <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 string path <span class="token operator">=</span> @<span class="token string">"D:\\杏铃.txt"</span><span class="token punctuation">;</span>                FileStream fileStream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>                BinaryReader binaryReader <span class="token operator">=</span> new <span class="token function">BinaryReader</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> context <span class="token operator">=</span> binaryReader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                    context <span class="token operator">=</span> binaryReader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            private <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                string path <span class="token operator">=</span> @<span class="token string">"D:\\杏铃.txt"</span><span class="token punctuation">;</span>                FileStream fileStream <span class="token operator">=</span> new <span class="token function">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span>FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>                BinaryReader binaryReader <span class="token operator">=</span> new <span class="token function">BinaryReader</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> length <span class="token operator">=</span> fileStream<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> new byte<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//读取文件中的内容并保存到字节数组中</span>                binaryReader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将字节数组转换为字符串</span>                string str <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> IO流文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAIO流</title>
      <link href="posts/f4756d0a.html"/>
      <url>posts/f4756d0a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JAVAIO流文件操作：</p><h1 id="File类文件操作："><a href="#File类文件操作：" class="headerlink" title="File类文件操作："></a>File类文件操作：</h1><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*参数列表：parent:父路径名 child：子路径名字符串pathname：指定路径名字符串uri：uri转换为抽象路径创建实例*/</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">File</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> child<span class="token punctuation">)</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathname<span class="token punctuation">)</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> child<span class="token punctuation">)</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">URI</span> uri<span class="token punctuation">)</span> <span class="token comment">//代码示例：</span> <span class="token class-name">File</span> file<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>//访问文件名</td><td></td></tr><tr><td>String getName()</td><td>获取文件或目录名称</td></tr><tr><td>String getPath( )</td><td>获取路径名</td></tr><tr><td>String  getAbsolutePath()</td><td>获取绝对路径</td></tr><tr><td>String  getParent()</td><td>获取文件父路径</td></tr><tr><td></td><td></td></tr><tr><td>//文件检测</td><td></td></tr><tr><td>boolean exist()</td><td>判断文件或目录是否存在</td></tr><tr><td>boolean canWrite()</td><td>判断文件是否可写或阅读</td></tr><tr><td>boolean isDirectory()</td><td>判断路径名是否为目录</td></tr><tr><td>boolean isFile()</td><td>判断是否为文件</td></tr><tr><td></td><td></td></tr><tr><td>//文件操作相关</td><td></td></tr><tr><td>void createNewFile()</td><td>当文件不存在时，新建文件夹</td></tr><tr><td>void delete()</td><td>删除指定文件或目录</td></tr><tr><td>void mkdir()</td><td>创建目录</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"杏铃.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FileFilter：文件过滤功能"><a href="#FileFilter：文件过滤功能" class="headerlink" title="FileFilter：文件过滤功能"></a>FileFilter：文件过滤功能</h2><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//需重写accept()方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span> <span class="token class-name">File</span> pathname<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>代码实例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>app</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> A3 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"F:/"</span> <span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span> filePath <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">getFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span> <span class="token class-name">File</span> file <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">MyFileFilter</span> myFileFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>myFileFilter<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">File</span> f <span class="token operator">:</span> files <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span> f<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFileFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FileFilter</span> <span class="token punctuation">{</span><span class="token class-name">MyFileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span> pathname<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FileNameFilter：文件名字过滤"><a href="#FileNameFilter：文件名字过滤" class="headerlink" title="FileNameFilter：文件名字过滤"></a>FileNameFilter：文件名字过滤</h2><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileNameFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileNameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需重写accept()方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> destination <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">MyFiletNameFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFileNameFilter</span><span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFiileNameFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FileNameFilter</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token class-name">MyFileNameFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字节流：InputStream-OutputStream："><a href="#字节流：InputStream-OutputStream：" class="headerlink" title="字节流：InputStream/OutputStream："></a>字节流：InputStream/OutputStream：</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:\Users\Government\Desktop\行政部门\行动部署\编程专业课练习题附件\JAVA知识markdown\知识点图片\字节流.png"></p><ol><li>关联一个文件得到输入流</li><li>进行读写操作</li><li>关闭流</li></ol><p>父类特点：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">int read(int a);</font></td><td>//从输入流读取8位字节</td></tr><tr><td><font color="red">int read(byte[] b);</font></td><td>//保存到参数b字节数组，返回证书表示读取字节数目</td></tr><tr><td><font color="red">int read(byte[] b,int off,int len);</font></td><td>//off指定字节数组开始保存数据起始下标，len表示读取数组长度</td></tr><tr><td><font color="red">void close();</font></td><td>//关闭输入流</td></tr><tr><td><font color="red">int available();</font></td><td>//返回此输入流下一个办法调用，不受阻塞地从此输入流估计字节数</td></tr></tbody></table><p>多种写法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//常规写法：</span><span class="token class-name">FileWriter</span> demo <span class="token operator">=</span> neW <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"杏铃.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedWriter</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态写法：</span><span class="token class-name">Writer</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Writer</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//套接写法：</span><span class="token class-name">BufferedWriter</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"杏铃.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="InputStream父类API"><a href="#InputStream父类API" class="headerlink" title="InputStream父类API"></a>InputStream父类API</h2><p>父类API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">public abstract int  read();<br>public int read(byte b[]);<br>public int read(byte b[],int off,int len)`</font></td><td>//从输入流中最多读取len个字节的数据，存放到偏移量为off的b数组中</td></tr><tr><td><font color="red">public int available( )</font></td><td>返回输入流中可以读取的字节数。注意：若输入阻塞，当前线程将被挂起，如果InputStream对象调用这个方法的话，它只会返回0，</td></tr><tr><td><font color="red">public long skip(long n)</font></td><td>忽略输入流中的n个字节</td></tr><tr><td><font color="red">public int close()</font></td><td>//关闭流</td></tr></tbody></table><h3 id="文件缓冲流：FileInputStream"><a href="#文件缓冲流：FileInputStream" class="headerlink" title="文件缓冲流：FileInputStream"></a>文件缓冲流：FileInputStream</h3><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> filepath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接读取文件</span><span class="token number">1.</span> <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读取如不存在则创建</span><span class="token number">2.</span> <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承于InputSream</p><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式一：中转</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">pritnln</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token comment">//方式二：每次读取一个字符</span><span class="token keyword">int</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字节缓冲流：ByteArrayInputStream"><a href="#字节缓冲流：ByteArrayInputStream" class="headerlink" title="字节缓冲流：ByteArrayInputStream"></a>字节缓冲流：ByteArrayInputStream</h3><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*参数列表：para@a：byte[]数组para@off：起始下标位置para@len：写入数据长度大小*/</span><span class="token class-name">ByteArrayInputStream</span> bArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteArrayInputStream</span> bArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">ByteArrayInputStream</span> bArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：（继承于InputStream)</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token class-name">ByteArrayOutputStream</span> bOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span> bOutput<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 获取用户输入值</span>         bOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">byte</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> bOutput<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Print the content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 打印字符</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span>  <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> c<span class="token punctuation">;</span>      <span class="token class-name">ByteArrayInputStream</span> bInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Converting characters to Upper case "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span> c<span class="token operator">=</span> bInput<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         bInput<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强缓冲流：BufferedInputStream"><a href="#增强缓冲流：BufferedInputStream" class="headerlink" title="增强缓冲流：BufferedInputStream"></a>增强缓冲流：BufferedInputStream</h3><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>          <span class="token comment">//创建一个BufferedInputStream</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token comment">//使用指定buf大小、底层字节输入流构建bis </span><span class="token comment">//代码示例</span><span class="token class-name">FileInputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\杏铃.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>boolean markSupport();<br>void mark(int readLimit);</td><td><em>//查看此流是否支持mark</em><br><em>//标记当前buf中读取下一个字节的下标</em></td></tr></tbody></table><p><strong>BufferedInputStream与InputStream效率比较</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EfficiencyDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//test1();</span>        <span class="token comment">//test2();   //FileIn</span>        <span class="token comment">//test3();  //BufferedInputStream read();</span>        <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//BufferedInputStream read(buff);</span>    <span class="token punctuation">}</span>    <span class="token comment">//BufferedInputStream read(buff)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">text4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>neW <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//打包byte数组</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span>    <span class="token comment">//输入流写入</span>        <span class="token punctuation">}</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//BufferedInputStream read();</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">text3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>     <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BufferedOutputStream</span> bos<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">//FileInputStream read(buff)</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">text2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\xxx.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Demo\\xxx_copy.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len<span class="token punctuation">;</span>   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//FileInputStream read(buff)</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xxx.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// FileInputStream ①read() 35950毫秒</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"cpp.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"cpp_copy1.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印流：PrintStream"><a href="#打印流：PrintStream" class="headerlink" title="打印流：PrintStream"></a>打印流：PrintStream</h3><p>构造方法：</p><table><thead><tr><th>构造方法</th><th>释义</th></tr></thead><tbody><tr><td>public PrintStream(OutputStream out)<br>public PrintStream(OutputStream out, boolean autoFlush)<br>public PrintStream(OutputStream out, boolean autoFlush, String encoding)</td><td>//打印输出流，是否自动刷新，编码方式</td></tr><tr><td>public PrintStream(String fileName)<br>public PrintStream(String fileName, String csn)</td><td>//打印输出文件名</td></tr><tr><td>public PrintStream(File file)<br>public PrintStream(File file, String csn)</td><td>//打印输出File文件名地址</td></tr></tbody></table><p>构造方法代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//代码示例：</span><span class="token class-name">FileOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrintStream</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"UTF8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用API：</p><p>//全部方法继承于PrintWriter</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintStreamDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"D:\\java.txt"</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testPrintMethod</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testOtherMethod</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testOtherMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"文件名称:%s"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abcde"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPrintMethod</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>    <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入换行符.</span>    ps<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件名称:%s,是否可读:%s"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="OutputStream父类API"><a href="#OutputStream父类API" class="headerlink" title="OutputStream父类API"></a>OutputStream父类API</h2><p>构造方法：</p><table><thead><tr><th>构造方法</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">void close();<br>void flush();<br></font></td><td>//继承于流</td></tr><tr><td><font color="red">public void write(byte[] b)<br>public void write(byte[] b, int off, int len)<br>public abstract void write(int b)</font></td><td>//写入字符</td></tr></tbody></table><h3 id="文件读取缓冲流：FileOutputStream"><a href="#文件读取缓冲流：FileOutputStream" class="headerlink" title="文件读取缓冲流：FileOutputStream"></a>文件读取缓冲流：FileOutputStream</h3><p>构造方法：</p><table><thead><tr><th>构造方法</th><th>释义</th></tr></thead><tbody><tr><td>FileOutputStream(File file);<br>FileOutputStream(File file,boolean append);</td><td>创建文件输出流以写入由指定的 <code>File</code>对象表示的文件。</td></tr><tr><td>FileOutputStream(String name);<br>FileOutputStream(String name,boolean append);</td><td>创建文件输出流以写入具有指定名称的文件。</td></tr><tr><td>FileOutputStream(FileDwscriptor fdobj)</td><td>创建要写入指定文件描述符的文件输出流，该文件描述符表示与文件系统中实际文件的现有连接。</td></tr></tbody></table><p>常用方法：继承于OutputStream</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//复制文件</span>        <span class="token class-name">File</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\鹰仓杏铃.ogg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\测试\\鹰仓杏铃.ogg"</span><span class="token punctuation">)</span>        <span class="token class-name">CopyFile</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CopyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字节读取缓冲流：ByteArrayOutputStream"><a href="#字节读取缓冲流：ByteArrayOutputStream" class="headerlink" title="字节读取缓冲流：ByteArrayOutputStream"></a>字节读取缓冲流：ByteArrayOutputStream</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><br>toString(int hibyte)<br>toString(String charsetName)<br>toString(Charset charset)</td><td>平台的默认字符集将缓冲区的内容转换为字符串解码字节。<br>通过使用名为 charset`的字节解码将缓冲区的内容转换为字符串。<br></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">File</span>类练习<span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">;</span> <span class="token comment">/**  * ByteArrayOutputStream 测试程序  *  *  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayOutputStreamTest</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LEN <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// ASCII码表 对应英文字母“abcddefghijklmnopqrsttuvwxyz”</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">ArrayLetters</span> <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span>     <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x7A</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//String tmp = new String(ArrayLetters);</span>     <span class="token comment">//System.out.println("ArrayLetters="+tmp);</span>     <span class="token function">tesByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/**   * ByteArrayOutputStream的API测试函数   */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tesByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 创建ByteArrayOutputStream字节流</span>     <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 依次写入“A”、“B”、“C”三个字母。0x41对应A，0x42对应B，0x43对应C。</span>     baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"baos=%s\n"</span><span class="token punctuation">,</span> baos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将ArrayLetters数组中从“3”开始的后5个字节写入到baos中。</span>    <span class="token comment">// 即对应写入“0x64, 0x65, 0x66, 0x67, 0x68”，即“defgh”</span>    baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ArrayLetters</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"baos=%s\n"</span><span class="token punctuation">,</span> baos<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 计算长度</span>     <span class="token keyword">int</span> size <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size=%s\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 转换成byte[]数组</span>     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str=%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 将baos写入到另一个输出流中</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token class-name">ByteArrayOutputStream</span> baos2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       baos<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span><span class="token punctuation">)</span>baos2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"baos2=%s\n"</span><span class="token punctuation">,</span> baos2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强缓冲读取流：BufferedOutputStream"><a href="#增强缓冲读取流：BufferedOutputStream" class="headerlink" title="增强缓冲读取流：BufferedOutputStream"></a>增强缓冲读取流：BufferedOutputStream</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承OutputStream</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>   <span class="token class-name">BufferedInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">BufferedOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件复制成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符流：Writer-Reader"><a href="#字符流：Writer-Reader" class="headerlink" title="字符流：Writer/Reader"></a>字符流：Writer/Reader</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:\Users\Government\Desktop\行政部门\行动部署\编程专业课练习题附件\JAVA知识markdown\知识点图片\字符流.png"></p><h2 id="Writer父类API："><a href="#Writer父类API：" class="headerlink" title="Writer父类API："></a>Writer父类API：</h2><table><thead><tr><th align="left">API函数</th><th align="center">操作含义</th></tr></thead><tbody><tr><td align="left">//字符追加</td><td align="center"></td></tr><tr><td align="left"><font color="red">Writer append(char c)<br>Writer append(CharSequence csq)<br>Writer append(CharSequence csq, int start, int end)</font></td><td align="center">将指定的字符附加到此文件<br>将指定的字符序列附加到文件<br>将指定字符序列的子序列附加到此文件</td></tr><tr><td align="left">//写入数据：</td><td align="center"></td></tr><tr><td align="left"><font color="red">void write(int c)<br>void write(String str)<br>void write(String str, int off, int len)</font></td><td align="center">写一个字符<br>写一个字符串<br>写一个字符串的一部分</td></tr><tr><td align="left">//数据流操作</td><td align="center"></td></tr><tr><td align="left"><font color="red">abstract void close()</font></td><td align="center">关闭流，先刷新</td></tr><tr><td align="left"><font color="red">abstract void close()</font></td><td align="center">刷新流</td></tr><tr><td align="left"><font color="red">abstract void write(char[] cbuf, int off, int len)</font></td><td align="center">写入字符数组的一部分</td></tr></tbody></table><h3 id="文件读写：FileWriter"><a href="#文件读写：FileWriter" class="headerlink" title="文件读写：FileWriter"></a>文件读写：FileWriter</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*para@file：要写入数据的 File 对象。para@append：如果 append 参数为 true，则将字节写入文件末尾处，相当于追加信息。如果 append 参数为 false, 则写入文件开始处。*/</span><span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span><span class="token keyword">boolean</span> append<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//示例</span><span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"杏铃.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：（继承父方法）</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>public void write(char [] c, int offset, int len)</td><td>写入字符数组中开始为offset长度为len的某一部分。</td></tr><tr><td>public void write(String s, int offset, int len)</td><td>写入字符串中开始为offset长度为len的某一部分。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>   <span class="token class-name">Writer</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">"这是一段测试文字"</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> next <span class="token operator">=</span> <span class="token string">"巧克力和香子兰"</span><span class="token punctuation">;</span>   fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"next\r\next"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强读写：BufferedWriter"><a href="#增强读写：BufferedWriter" class="headerlink" title="增强读写：BufferedWriter"></a>增强读写：BufferedWriter</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*参数列表para@out：创建使用默认大小的输出缓冲区的缓冲字符输出流。 sz：给定大小输出缓冲区*/</span><span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">)</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token comment">//示例：</span><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">void write(char[] cbuf, int off, int len)&nbsp;&nbsp;<br>void write(int c)&nbsp;&nbsp;<br>void write(String s, int off, int len) </font></td><td>//继承于父类Writer</td></tr><tr><td>void newLine()</td><td>//写一行行分隔符。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>      <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"杏铃.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符数组读写：CharArrayWriter"><a href="#字符数组读写：CharArrayWriter" class="headerlink" title="字符数组读写：CharArrayWriter"></a>字符数组读写：CharArrayWriter</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*initialSize：指定尺寸大小*/</span><span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialSize<span class="token punctuation">)</span>     <span class="token comment">//示例：</span><span class="token class-name">CharArrayWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>CharArrayWriter append(char c)<br>CharArrayWriter append(CharSequence csq)<br>CharArrayWriter append(CharSequence csq, int start, int end)</td><td>将指定的字符附加到此作者。<br>将指定字符序列的子序列附加到此作者。</td></tr><tr><td><font color="red">void close()<br>void flush()<br>void reset()<br>void toString()<br>void toCharyArray()</font></td><td>//继承于父类Stream流</td></tr><tr><td><font color="red"> void write(char[] c, int off, int len)<br>void write(int c)<br>void write(String str, int off, int len)<br>void writeTo(Writer out)</font></td><td>将字符/字符组写入缓冲区<br>将缓冲区的内容写入另一个字符流。</td></tr><tr><td>void toString()<br>void toCharyArray()</td><td>返回输入数据的副本<br>将输入数据转换为字符串。</td></tr><tr><td>int size()</td><td>返回缓冲区的当前大小。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharArrayWriterDemo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"这是一段测试文字用于CharArrayReader输出"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     s<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将字符串转变为字符数组</span>    <span class="token class-name">CharArrayReader</span> charArrayReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">CharArrayWriter</span> charArrayWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>charArrayReader<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            charArrayWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>charArrayReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//将输出流转换为字符数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp_char <span class="token operator">=</span> charArrayWriter<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符数组的输出————————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将输出流转换为字符串</span>    <span class="token class-name">String</span> temp_str <span class="token operator">=</span> charArrayWriter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp_char<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp_char<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串的输出——————————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程管流读写：PipedWriter"><a href="#线程管流读写：PipedWriter" class="headerlink" title="线程管流读写：PipedWriter"></a>线程管流读写：PipedWriter</h3><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token class-name">PipedReader</span> snk<span class="token punctuation">)</span><span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//代码示例</span><span class="token class-name">PipedWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">void flush<br>void close()<br>void write(int c)<br>void write(char cbuf[], int off, int len)</font></td><td>//继承于Stream流</td></tr><tr><td>synchronized void connect(PipedReader snk)</td><td>//绑定Reader Writer</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 写线程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment">//输出流</span>    <span class="token keyword">private</span> <span class="token class-name">PipedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">PipedWriter</span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>writer <span class="token operator">=</span> writer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 读取线程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment">//输入流</span>    <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">PipedReader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> reader<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cbuf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"管道流中的数据为: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPipedReaderWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 管道流通信核心是,Writer和Reader公用一块缓冲区,缓冲区在Reader中申请,     * 由Writer调用和它绑定的Reader的Receive方法进行写.     *     * 线程间通过管道流通信的步骤为     * 1 建立输入输出流     * 2 绑定输入输出流     * 3 Writer写     * 4 Reader读     */</span>    <span class="token class-name">PipedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PipedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印读写：PrintWriter"><a href="#打印读写：PrintWriter" class="headerlink" title="打印读写：PrintWriter"></a>打印读写：PrintWriter</h3><p>构造方法：</p><table><thead><tr><th>构造方法</th><th>释义</th></tr></thead><tbody><tr><td>public PrintWriter(OutputStream out) <br>public PrintWriter(OutputStream out, boolean autoFlush) <br>public PrintWriter(OutputStream out, boolean autoFlush, String encoding)</td><td>//打印输出流，是否自动刷新，编码方式</td></tr><tr><td>public PrintStream(String fileName) <br>public PrintStream(String fileName, String csn)</td><td>//打印输出文件名</td></tr><tr><td>public PrintWriter(File file) <br>public PrintWriter(File file, String csn)</td><td>//打印输出File文件名地址</td></tr></tbody></table><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>boolean checkError();<br>void clearError<br>protected void setError()</td><td>流未关闭则刷新流并检查其错误状态<br>清除此流的错误状态。<br>发生了错误</td></tr><tr><td>format (String formatObject… args)<br>format(Locale l,String format,Object… agrs)</td><td>使用指定的格式字符串和参数将格式化的字符串写入此writer。</td></tr><tr><td>Print();<br>Println();</td><td>//打印任意数值类型数据并终止</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Sender</span> sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Receiver</span> receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PipedWriter</span> pipedWriter<span class="token operator">=</span> sender<span class="token punctuation">.</span><span class="token function">getPipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PipedReader</span> pipedReader <span class="token operator">=</span> receiver<span class="token punctuation">.</span><span class="token function">getPipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pipedReader<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>pipedWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    receiver<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">PipedWriter</span> pipedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PipedWriter</span> <span class="token function">getPipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pipedWriter<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      pipedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是一段测试文字当你看到这段文字说明程序运转正常"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pipedWriter<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"呀呀呀！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pipedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> pipedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">PipedReader</span> <span class="token function">getPipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pipedReader<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     pipedReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     pipedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reader父类API："><a href="#Reader父类API：" class="headerlink" title="Reader父类API："></a>Reader父类API：</h2><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td><font color="red">void  close()</font></td><td>//关闭该流并释放与之关联的所有资源。</td></tr><tr><td><font color="red">mark(int readAheadLimit)<br>boolean markSupported</font></td><td>//标记流中的当前位置。<br>判断此流是否支持mark（）操作。</td></tr><tr><td><font color="red">int  read()<br>int  read(char[] cbuf)<br>int  read(char[] cbuf, int off, int len)</font></td><td>//读取字符</td></tr><tr><td><font color="red">int  read(CharBuffer target)<br>boolean reset()&nbsp;</font>;</td><td>将字符读入指定的字符缓冲区。<br>重置流。</td></tr><tr><td><font color="red">boolean  ready()</font></td><td>//判断是否准备读取此流。</td></tr><tr><td><font color="red">void  reset()</font></td><td>//重置该流。</td></tr><tr><td><font color="red">long  skip(long n)</font></td><td>//跳过字符。</td></tr></tbody></table><h3 id="文件读取：FileReader"><a href="#文件读取：FileReader" class="headerlink" title="文件读取：FileReader"></a>文件读取：FileReader</h3><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*para@file：给出的File文件中读取para@fd：给予FileDescriptionpara@fileName：给定要读取文件名称*/</span><span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> 创建一个新的 <span class="token class-name">FileReader</span> ，给出 <span class="token class-name">File</span>读取。 <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token class-name">FileDescriptor</span> fd<span class="token punctuation">)</span> 创建一个新的 <span class="token class-name">FileReader</span> ，给予 <span class="token class-name">FileDescriptor</span>从中读取。 <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> 创建一个新的 <span class="token class-name">FileReader</span> ，给定要读取的文件的名称<span class="token comment">//示例：</span><span class="token class-name">File</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> read <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> read <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> read <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承于Reader类</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">File</span>类练习<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayOutputStreamTest</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"鹰仓杏铃.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"测试文件夹\n，不准涩涩\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileReader</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    fd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> demo<span class="token operator">:</span>buff<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fd<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强读取：BufferedReader"><a href="#增强读取：BufferedReader" class="headerlink" title="增强读取：BufferedReader"></a>增强读取：BufferedReader</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*in：Reader类构造函数sz：指定大小的输入缓冲区*/</span><span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span> 创建使用默认大小的输入缓冲区的缓冲字符输入流。 <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span> 创建使用指定大小的输入缓冲区的缓冲字符输入流。<span class="token comment">//示例：</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>int read()<br>int read(char[] cbuf, int off, int len)</td><td>//继承于父类</td></tr><tr><td>String readLine();</td><td>//读一行文字。</td></tr><tr><td>Stream&lt; String&gt; lines()</td><td>//返回 <code>Stream</code> ，其元素是从此 <code>BufferedReader</code>读取的行。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"buf.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> bufr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bufr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bufr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符数组读取：CharArrayReader"><a href="#字符数组读取：CharArrayReader" class="headerlink" title="字符数组读取：CharArrayReader"></a>字符数组读取：CharArrayReader</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从指定的字符数组创建CharArrayReader</span><span class="token comment">//代码示例</span><span class="token class-name">CharArrayReader</span>  arrayreader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承于Reader</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">File</span>类练习<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayOutputStreamTest</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'添'</span><span class="token punctuation">,</span><span class="token string">'砖'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">CharArrayReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> off<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span>off<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程管流读取：PipedReader"><a href="#线程管流读取：PipedReader" class="headerlink" title="线程管流读取：PipedReader"></a>线程管流读取：PipedReader</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">//使用默认大小构造pr</span><span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token keyword">int</span> pipeSize<span class="token punctuation">)</span>       <span class="token comment">//使用指定大小构造pr</span><span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token class-name">PipedWriter</span> src<span class="token punctuation">)</span>   <span class="token comment">//使用默认的buf的大小和传入的pw构造pr</span><span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token class-name">PipedWriter</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> pipeSize<span class="token punctuation">)</span>   <span class="token comment">// //使用指定的buf的大小和传入的pw构造pr</span><span class="token comment">//代码示例</span><span class="token class-name">PipedWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PipedReader</span> pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span>pw<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void connect(PipedWriter src)</td><td>使此管道读取器连接到管道写入器 <code>src</code> 。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Sender</span> sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Receiver</span> receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PipedWriter</span> pipedWriter<span class="token operator">=</span> sender<span class="token punctuation">.</span><span class="token function">getPipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PipedReader</span> pipedReader <span class="token operator">=</span> receiver<span class="token punctuation">.</span><span class="token function">getPipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pipedReader<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>pipedWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    receiver<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">PipedWriter</span> pipedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PipedWriter</span> <span class="token function">getPipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pipedWriter<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      pipedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是一段测试文字当你看到这段文字说明程序运转正常"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pipedWriter<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"呀呀呀！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pipedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> pipedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">PipedReader</span> <span class="token function">getPipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pipedReader<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     pipedReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     pipedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件过滤读取：FilterReader"><a href="#文件过滤读取：FilterReader" class="headerlink" title="文件过滤读取：FilterReader"></a>文件过滤读取：FilterReader</h3><p>构造方法；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span>  <span class="token class-name">FilterWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">)</span>    <span class="token comment">//代码示例</span><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FilterWriter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：继承于Reader</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterReaderDemo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token class-name">Reader</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token string">"这是一段分隔的测试文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FilterReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterReader</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每个字为: "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他类："><a href="#其他类：" class="headerlink" title="其他类："></a>其他类：</h2><h3 id="文件描述符：FileDescriptor"><a href="#文件描述符：FileDescriptor" class="headerlink" title="文件描述符：FileDescriptor"></a>文件描述符：FileDescriptor</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">FileDescriptor</span> describe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void sync();</td><td>强制所有系统缓冲区与底层设备同步。</td></tr><tr><td>boolean valid();</td><td>测试此文件描述符对象是否有效。</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">File</span>类练习<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileDescriptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDescriptorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">FileName</span> <span class="token operator">=</span> <span class="token string">"考试.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">OutText</span> <span class="token operator">=</span> <span class="token string">"文件中的测试内容"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">testWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testStandFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment">//System.out.println(OutText);</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * FileDescriptor.out 的测试程序     *     * 该程序的效果 等价于 System.out.println(OutText);     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStandFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">FileDescriptor</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">OutText</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * FileDescriptor写入示例程序     *     * (01) 为了说明，"通过文件名创建FileOutputStream"与“通过文件描述符创建FileOutputStream”对象是等效的     * (02) 该程序会在“该源文件”所在目录新建文件"file.txt"，并且文件内容是"Aa"。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 新建文件“file.txt”对应的FileOutputStream对象</span>            <span class="token class-name">FileOutputStream</span> out1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">FileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取文件“file.txt”对应的“文件描述符”</span>            <span class="token class-name">FileDescriptor</span> fdout <span class="token operator">=</span> out1<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 根据“文件描述符”创建“FileOutputStream”对象</span>            <span class="token class-name">FileOutputStream</span> out2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fdout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> out3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fdout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> out4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fdout<span class="token punctuation">)</span><span class="token punctuation">;</span>            out1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'J'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out3<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out4<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fdout<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fdout(%s) is %s\n"</span><span class="token punctuation">,</span>fdout<span class="token punctuation">,</span> fdout<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out4<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * FileDescriptor读取示例程序     *     * 为了说明，"通过文件名创建FileInputStream"与“通过文件描述符创建FileInputStream”对象是等效的     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">FileInputStream</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token class-name">FileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileDescriptor</span> fdin <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileInputStream</span> in2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fdin<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in1.read():"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>in1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in2.read():"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>in2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fdin<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fdin(%s) is %s\n"</span><span class="token punctuation">,</span> fdin<span class="token punctuation">,</span> fdin<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常规操作总结："><a href="#常规操作总结：" class="headerlink" title="常规操作总结："></a>常规操作总结：</h1><h2 id="字符串写入文件："><a href="#字符串写入文件：" class="headerlink" title="字符串写入文件："></a>字符串写入文件：</h2><ol><li>FileWriter：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"这是一段文字"</span><span class="token punctuation">;</span><span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//地址</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>FileOutputStream</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">exsists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    text<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>buff<span class="token punctuation">.</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buff<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buyes<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>FileOutputStream追加写入文件</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:/log.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true表示在文件末尾追加  </span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流文件操作 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图形化界面</title>
      <link href="posts/8092df15.html"/>
      <url>posts/8092df15.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JAVASwing GUI图形化编程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>  <span class="token comment">//事件监听</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="语言特性："><a href="#语言特性：" class="headerlink" title="语言特性："></a>语言特性：</h2><ol><li>继承GUI通用特点，类似容器层层嵌套（套娃）</li><li>一些公共类控件前加J，例如JButton、JTextField，为java专有。</li><li>JAVA语言强项：在于分布式、服务器端、微服务和众多数据操作API。</li></ol><h2 id="控件：-Component"><a href="#控件：-Component" class="headerlink" title="控件：(Component)"></a>控件：(Component)</h2><h3 id="公共类控件（public-Component）"><a href="#公共类控件（public-Component）" class="headerlink" title="公共类控件（public Component）"></a>公共类控件（public Component）</h3><h4 id="JLabel（标签）："><a href="#JLabel（标签）：" class="headerlink" title="JLabel（标签）："></a>JLabel（标签）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  构造方法中参数含义：  text：标签显示的文本  image：标签显示的图片  horizontalAlignment标签内容（在标签内）的水平对其方式（竖直方向默认居中, 可通过方法设置）*/</span><span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> horizontalAlignment<span class="token punctuation">)</span><span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token class-name">Icon</span> image<span class="token punctuation">)</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token class-name">Icon</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> horizontalAlignment<span class="token punctuation">)</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">Icon</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> horizontalAlignment<span class="token punctuation">)</span>    <span class="token comment">//代码示例：</span><span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"显示的文字"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setHorizontalTextPosition(int textPosition)<br>void setVerticalTextPosition(int textPosition)</td><td>// 设置文本相对于图片的位置（文本默认在图片右边垂直居中）</td></tr><tr><td>void setHorizontalAlignment(int alignment)<br>void setVerticalAlignment(int alignment)</td><td>// 设置标签内容（在标签内）的对其方式（默认左对齐并垂直居中）</td></tr><tr><td>void setIconTextGap(int iconTextGap)</td><td>// 设置图片和文本之间的间隙</td></tr><tr><td><font color="red">void setPreferredSize(Dimension preferredSize)<br><br>void setMinimumSize(Dimension minimumSize)<br><br>void setMaximumSize(Dimension maximumSize)</font></td><td>// 设置组件的 首选 大小<br>/ 设置组件的 最小 大小<br>/ 设置组件的 最大 大小<br></td></tr><tr><td>void setForeground(Color fg)<br>void setFont(Font font)<br>void setBackground(Color bg)</td><td>// 设置字体颜色<br>// 设置文本的字体类型、样式 和 大小<br>/ 设置组件的背景<br></td></tr><tr><td>void setToolTipText(String text)</td><td>// 当鼠标移动到组件上时显示的提示文本</td></tr><tr><td>void setOpaque(boolean isOpaque)</td><td>// 设置组件是否为 不透明，JLabel默认为透明，设置为不透明后才能显示背景</td></tr></tbody></table><p>Icon实例化用法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法一: 通过 java.awt.Toolkit 工具类来读取本地、网络 或 内存中 的 图片（支持 GIF、JPEG 或 PNG）</span><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imageData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法二: 通过 javax.imageio.ImageIO 工具类读取本地、网络 或 内存中 的 图片（BufferedImage 继承自 Image）</span><span class="token class-name">BufferedImage</span> bufImage <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">File</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedImage</span> bufImage <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">URL</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedImage</span> bufImage <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//例如</span><span class="token class-name">BufferedImage</span> image <span class="token operator">=</span><span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">BorderLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Font</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"JLabel测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只显示文本</span><span class="token class-name">JLabel</span> testLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"显示的文本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testLabel<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置字体，null表示使用默认字体</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>testLabel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只显示图片</span><span class="token class-name">JLabel</span> <span class="token class-name">Pnglabel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Pnglabel</span><span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"鹰仓杏铃.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Pnglabel</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同时显示文字和图片</span><span class="token class-name">JLabel</span> label03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>label03<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"文本和图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>label03<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"鹰仓杏铃.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>label03<span class="token punctuation">.</span><span class="token function">setHorizontalTextPosition</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 水平方向文本在图片中心</span>label03<span class="token punctuation">.</span><span class="token function">setVerticalTextPosition</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 垂直方向文本在图片下方</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label03<span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label03<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JButton（按钮）："><a href="#JButton（按钮）：" class="headerlink" title="JButton（按钮）："></a>JButton（按钮）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建不带有设置文本或图标的按钮</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按钮带有文本</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token class-name">Icon</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//带有图标</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"测试按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"文字"</span><span class="token punctuation">,</span><span class="token function">newImageIcon</span><span class="token punctuation">(</span><span class="token string">"这里填图片地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setText(String text);  <br>void setFont(Font font);  <br>void setForeground(Color fg);</td><td>//设置按钮文本、字体、颜色</td></tr><tr><td>void setEnabled(boolean enable);</td><td>//设置按钮是否可用</td></tr><tr><td>void setIcon(Icon defaultIcon);<br>void setPressIcon(Icon pressIcon);<br>void setDisabledIcon(Icon disabledIcon);</td><td>//设置按钮在默认、按下、不可用显示的图片</td></tr><tr><td>void setBorderPainted(boolean b);</td><td>//是否绘制边框：</td></tr></tbody></table><p>常用监听器：</p><ol><li>addActionListener(new ActionListener)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//按钮按下执行代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"DemoButton功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EIXT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"测试按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JRadioButton（按钮）："><a href="#JRadioButton（按钮）：" class="headerlink" title="JRadioButton（按钮）："></a>JRadioButton（按钮）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span><span class="token keyword">boolean</span> selected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">JRadioButton</span> radio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"显示的文字"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setText(String text)<br>void setFont(Font font)<br>void setForeground(Color fg)</td><td>// 设置单选按钮的 文本、字体 和 字体颜色</td></tr><tr><td>void setSelected(boolean b)</td><td>设置单选按钮是否选中状态</td></tr><tr><td>boolean isSelected()</td><td>判断单选按钮是否选中</td></tr><tr><td>void setEnabled(boolean enable)</td><td>设置单选按钮是否可用</td></tr><tr><td>void setIcon(Icon defaultIcon)<br>void setPressedIcon(Icon pressedIcon)<br>void setDisabledIcon(Icon disabledIcon)</td><td>设置单选按钮在 默认、被选中、不可用 时显示的图片</td></tr><tr><td>void setIconTextGap(int iconTextGap)</td><td>设置图片和文本的间距</td></tr><tr><td>ButtonGroup btnGroup = new ButtonGroup();</td><td>创建一个按钮组</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加状态改变监听器</span><span class="token keyword">void</span> <span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token class-name">ChangeListener</span> l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JRadioButton</span> radio1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JRadioButton</span> radio2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ButtonGroup</span> btnGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btnGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radio1<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radio2<span class="token punctuation">)</span><span class="token punctuation">;</span>        radioBtn01<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radio1<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>radio2<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JToggleButton（单选按钮）："><a href="#JToggleButton（单选按钮）：" class="headerlink" title="JToggleButton（单选按钮）："></a>JToggleButton（单选按钮）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无文本，默认未选中</span><span class="token class-name">JToggleButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 有文本，默认未选中</span><span class="token class-name">JToggleButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token comment">// 有文本，并指定是否选中</span><span class="token class-name">JToggleButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">boolean</span> selected<span class="token punctuation">)</span>    <span class="token comment">//代码示例：</span><span class="token class-name">JToggleButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JToggleButton</span><span class="token punctuation">(</span><span class="token string">"测试按钮"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setText(String text)<br>void setFont(Font font)<br>void setForeground(Color fg)</td><td>// 设置开关按钮的 文本、字体 和 字体颜色</td></tr><tr><td>void setSelected(boolean b)</td><td>设置开关按钮是否选中状态</td></tr><tr><td>boolean isSelected()</td><td>// 判断开关按钮是否选中</td></tr><tr><td>void setEnabled(boolean enable)</td><td>// 设置开关按钮是否可用</td></tr><tr><td>void setIcon(Icon defaultIcon)<br>void setPressedIcon(Icon pressedIcon)<br>void setDisabledIcon(Icon disabledIcon)</td><td>// 设置开关按钮在 默认(关)、被选中(开)、不可用 时显示的图片</td></tr><tr><td>void setIconTextGap(int iconTextGap)</td><td>// 设置图片和文本之间的间距</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加状态改变监听器</span><span class="token keyword">void</span> <span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token class-name">ChangeListener</span> l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JToggleButton</span> toggleBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JToggleButton</span><span class="token punctuation">(</span><span class="token string">"开关按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toggleBtn<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token class-name">JToggleButton</span> toggleBtn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JToggleButton</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>toggleBtn<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 是否选中: "</span> <span class="token operator">+</span> toggleBtn<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toggleBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JCheckBox（复选框）："><a href="#JCheckBox（复选框）：" class="headerlink" title="JCheckBox（复选框）："></a>JCheckBox（复选框）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//无文本，默认未选中==》</span><span class="token class-name">JCheckBox</span> checkbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//有文本</span><span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span><span class="token keyword">boolean</span> selected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例：</span><span class="token class-name">JCheckBox</span> check <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"复选框中的文字"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setText(String text)<br>void setFont(Font font)<br>void setForeground(Color fg)</td><td>// 设置复选框的 文本、字体 和 字体颜色</td></tr><tr><td>void setSelected(boolean b)</td><td>// 设置复选框是否选中状态</td></tr><tr><td>boolean isSelected()</td><td>// 判断复选框是否选中</td></tr><tr><td>void setEnabled(boolean enable)</td><td>// 设置复选框是否可用</td></tr><tr><td>void setIconTextGap(int iconTextGap)</td><td>// 设置图片和文本的间距</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JCheckBox</span> checkbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>checkbox<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeClistener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ChangeEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ChangeListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>     frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建复选框</span>        <span class="token class-name">JCheckBox</span> checkBox01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"菠萝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"雪梨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"荔枝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox05 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JCheckBox</span> checkBox06 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkBox01<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">JCheckBox</span> checkBox <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JCheckBox</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>checkBox<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 是否选中: "</span> <span class="token operator">+</span> checkBox<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkBox01<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox01<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox02<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox03<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox04<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox05<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkBox06<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JTextField（文本框）："><a href="#JTextField（文本框）：" class="headerlink" title="JTextField（文本框）："></a>JTextField（文本框）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 参数说明: *     text: 默认显示的文本 *     columns: 用来计算首选宽度的列数；如果列设置为 0，则首选宽度将是组件实现的自然结果 */</span><span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">JTextField</span> textfield <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token keyword">int</span> columns<span class="token punctuation">)</span><span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> columns<span class="token punctuation">)</span>    <span class="token comment">//代码示例：</span><span class="token class-name">JTextField</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"初始文字"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>String getText()</td><td>// 获取文本框中的文本</td></tr><tr><td>void setText(String text)<br>void setFont(Font font)<br>void setForeground(Color fg)</td><td>设置文本框的 文本、字体 和 字体颜色</td></tr><tr><td>void setCaretColor(Color c)<br>void setSelectionColor(Color c)<br>void setSelectedTextColor(Color c)<br>void setDisabledTextColor(Color c)</td><td>光标颜色<br>、<br>呈现选中部分的背景颜色<br>、<br>选中部分文本的颜色、<br>不可用时文本的颜色</td></tr><tr><td>void setHorizontalAlignment(int alignment)</td><td>// 设置文本内容的水平对齐方式</td></tr><tr><td>void setEditable(boolean b)</td><td>// 设置文本框是否可编辑</td></tr><tr><td>boolean isFocusOwner()</td><td>// 判断组件当前是否拥有焦点</td></tr><tr><td>void setEnabled(boolean b)</td><td>// 设置组件是否可用</td></tr></tbody></table><p>复制相关：</p><table><thead><tr><th>复制相关</th><th>释义</th></tr></thead><tbody><tr><td>void setSelectionStart(int selectionStart)</td><td>// 设置光标开始位置，selectionStart &gt;= 0</td></tr><tr><td>void setSelectionEnd(int selectionEnd)</td><td>// 设置光标结束位置，selectionEnd &gt;= selectionStart</td></tr><tr><td>void copy<br>void cut<br>void paste()</td><td>// 复制选中部分文本<br>/ 剪切选中部分文本<br>/ 粘贴文本到文本框<br></td></tr></tbody></table><p>监听器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//焦点监听器</span><span class="token class-name">JTextField</span> textField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textfield<span class="token punctuation">.</span><span class="token function">addFoucusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FocusListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FocusListener</span><span class="token punctuation">(</span><span class="token class-name">FocusEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按键监听器：</span><span class="token keyword">void</span> <span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token class-name">KeyListener</span> listener<span class="token punctuation">)</span><span class="token comment">//改变监听器</span>textField<span class="token punctuation">.</span><span class="token function">getDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addDocumentListener</span><span class="token punctuation">(</span><span class="token class-name">DocumentListener</span> listener<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">JTextField</span> textField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textField<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textField<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交的内容为"</span> <span class="token operator">+</span> textField<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JTextArea（文本域）："><a href="#JTextArea（文本域）：" class="headerlink" title="JTextArea（文本域）："></a>JTextArea（文本域）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 参数说明: *      text: 默认显示的文本 *      rows: 默认可见的行数 *      columns: 默认可见的列数 *       * 默认由 rows 和 columns 决定首选大小 */</span><span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> columns<span class="token punctuation">)</span><span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> columns<span class="token punctuation">)</span><span class="token comment">//代码示例：</span><span class="token class-name">JTextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token string">"初始文字"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setLineWrap(boolean wrap)</td><td>// 是否自动换行，默认为 false</td></tr><tr><td>void setWrapStyleWord(boolean word)</td><td>// 设置自动换行方式。如果为 true，则将在单词边界（空白）处换行; 如果为 false，则将在字符边界处换行。默认为 false。</td></tr><tr><td>String getText()<br>void append(String str)<br>void replaceRange(String str, int start, int end)</td><td>// 获取文本框中的文本<br>// 追加文本到文档末尾<br>// 替换部分文本</td></tr><tr><td>void setText(String text)<br>void setFont(Font font)<br>void setForeground(Color fg)</td><td>// 设置文本框的 文本、字体 和 字体颜色</td></tr><tr><td>int getLineCount()<br>int getLineEndOffset(int line)<br>int getLineOfOffset(int offset)</td><td>// 获取内容的行数（以换行符计算，满行自动换下一行不算增加行数）<br>// 获取指定行（行数从0开始）的行尾（包括换行符）在全文中的偏移量<br>// 获取指定偏移量所在的行数（行数从0开始）</td></tr><tr><td>void setCaretColor(Color c)<br>void setSelectionColor(Color c)<br>void setSelectedTextColor(Color c)<br>void setDisabledTextColor(Color c)</td><td>设置颜色，分别为: 光标颜色、呈现选中部分的背景颜色、选中部分文本的颜色、不可用时文本的颜色</td></tr><tr><td>void setEditable(boolean b)</td><td>// 设置文本框是否可编辑</td></tr><tr><td>boolean isFocusOwner()</td><td>// 判断组件当前是否拥有焦点</td></tr><tr><td>void setEnabled(boolean b)</td><td>// 设置组件是否可用</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">JTextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交: "</span> <span class="token operator">+</span> textArea<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JPasswordField（密码框）："><a href="#JPasswordField（密码框）：" class="headerlink" title="JPasswordField（密码框）："></a>JPasswordField（密码框）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPassWrodField</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPassWrodField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * 参数说明: *     text: 默认显示的文本 *     columns: 用来计算首选宽度的列数；如果列设置为 0，则首选宽度将是组件实现的自然结果 */</span><span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token keyword">int</span> columns<span class="token punctuation">)</span><span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> columns<span class="token punctuation">)</span>    <span class="token comment">//代码示例：</span><span class="token class-name">JPassField</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPassField</span><span class="token punctuation">(</span><span class="token string">"初始文字"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>String getPassword()</td><td>// 获取密码框输入的密码</td></tr><tr><td>void setText(String text)<br>void setFont(Font font)<br>void setForeground(Color fg)</td><td>// 设置密码框的 密码文本、字体 和 字体颜色</td></tr><tr><td>void setHorizontalAlignment(int alignment)</td><td>// 设置密码框输入内容的水平对齐方式</td></tr><tr><td>void setEchoChar(char c)</td><td>// 设置密码框默认显示的密码字符</td></tr><tr><td>void setEditable(boolean b)</td><td>// 设置密码框是否可编辑</td></tr><tr><td>boolean isFocusOwner()</td><td>// 判断组件当前是否拥有焦点</td></tr><tr><td>void setEnabled(boolean b)</td><td>// 设置组件是否可用</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPassWrodField</span> passwrod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPassWrodField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//焦点监听器</span>password<span class="token punctuation">.</span><span class="token function">addFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FoucusListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FoucusGained</span><span class="token punctuation">(</span><span class="token class-name">FoucusEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//  </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FocusLost</span><span class="token punctuation">(</span><span class="token class-name">FoucusEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加文本框内的 文本改变 监听器</span>password<span class="token punctuation">.</span><span class="token function">getDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addDocumentListener</span><span class="token punctuation">(</span><span class="token class-name">DocumentListener</span> listener<span class="token punctuation">)</span>    <span class="token comment">// 添加按键监听器</span>password<span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token class-name">SetDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">JTextField</span> textfield <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textfield<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交的密码为"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>textfield<span class="token punctuation">.</span><span class="token function">getWrod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">do_actionListener</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">do_actionListener</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> context <span class="token operator">=</span> textfield<span class="token punctuation">.</span><span class="token function">getword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入文件保存地址</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>        fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> set <span class="token operator">=</span><span class="token string">"attrib + E"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//字符串转byte写入文件中 str==&gt;byte</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JList（列表框）："><a href="#JList（列表框）：" class="headerlink" title="JList（列表框）："></a>JList（列表框）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">==</span><span class="token operator">&gt;</span><span class="token class-name">JList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JList</span><span class="token punctuation">(</span><span class="token class-name">ListModel</span> dataModel<span class="token punctuation">)</span><span class="token class-name">JList</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listData<span class="token punctuation">)</span><span class="token class-name">JList</span><span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> listData<span class="token punctuation">)</span><span class="token comment">//代码示例</span><span class="token class-name">JList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setListData(Object[] listData)</td><td>// 以数组形式设置选项数据，内部将自动封装成 ListModel</td></tr><tr><td>void setListData(Vector&lt;?&gt; listData)</td><td>// 以集合形式设置选项数据，内部将自动封装成 ListModel</td></tr><tr><td>void setSelectionMode(int selectionMode)<br>void setSelectedIndex(int index)<br>void setSelectedIndices(int[] indices)</td><td>//设置选择模式，有三个模式: 只能单选、可间隔多选、可连续多选<br>//设置某个选项选中<br>//设置某一些选项选中</td></tr><tr><td>int getSelectedIndex()<br>int[] getSelectedIndices()</td><td>// 获取第一个选中的选项索引<br>// 获取所有选中的选项索引</td></tr><tr><td>void setFont(Font font)<br>void setForeground(Color fg)<br>void setSelectionForeground(Color selectionForeground)<br>void setSelectionBackground(Color selectionBackground)</td><td>// 设置字体<br>// 设置字体颜色（未选中时）<br>// 设置选中选项的字体颜色<br>// 设置选中条的颜色</td></tr></tbody></table><p>监听器：（特有）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addListSelectionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListSelectionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token class-name">ListSelectionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token class-name">ListSelectionEvent</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ListSelectionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ListSelectionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">JList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>               list<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">setSelectionMode</span><span class="token punctuation">(</span><span class="token class-name">ListSelectionModel</span><span class="token punctuation">.</span>MULTIPLE_INTERVAL_SELECTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">setListData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span> <span class="token string">"雪梨"</span><span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> <span class="token string">"荔枝"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             list<span class="token punctuation">.</span><span class="token function">addListSelectionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListSelectionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token class-name">ListSelectionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indices <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getSelectedIndices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token class-name">ListModel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listModel <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">:</span> indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选中: "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> listModel<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">setSelectedIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JProgressBar（进度条）："><a href="#JProgressBar（进度条）：" class="headerlink" title="JProgressBar（进度条）："></a>JProgressBar（进度条）：</h4><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 构造方法中的参数含义: *     orient: 进度条的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL，默认为水平方向 *     min: 最小进度值 *     max: 最大进度值 */</span><span class="token class-name">JProgressBar</span> progress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token keyword">int</span> orient<span class="token punctuation">)</span><span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span><span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token keyword">int</span> orient<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span>    <span class="token comment">//代码示例：</span><span class="token class-name">JProgressBar</span> progress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setMinimum(int min)<br>void setMaximum(int max)<br>void setValue(int n)</td><td>// 设置 最小进度值、最大进度值、当前进度值</td></tr><tr><td>int getValue()</td><td>// 获取当前进度值</td></tr><tr><td>double getPercentComplete()</td><td>// 获取当前进度的百分比</td></tr><tr><td>void setStringPainted(boolean b)</td><td><em>是否绘制百分比文本（进度条中间显示的百分数）</em></td></tr><tr><td>void setIndeterminate(boolean newValue)</td><td>//设置进度条进度是否为不确定模式</td></tr><tr><td>void setOrientation(int newOrientation)</td><td>//设置进度条的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加进度条的进度改变监听器</span><span class="token keyword">void</span> <span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token class-name">ChangeListener</span> l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ChangeEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ChangeListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_PROGRESS <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_PROGRESS<span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> currentProgress <span class="token operator">=</span>MIN_PROGRESS<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">JProgressBar</span> progress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值设定</span>progress<span class="token punctuation">.</span><span class="token function">setMinimum</span><span class="token punctuation">(</span>MIN_PROGRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>progress<span class="token punctuation">.</span><span class="token function">setMaximum</span><span class="token punctuation">(</span>MAX_PROGRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>progress<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>currentProgress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绘制百分比文本（进度条中间显示的百分数）</span>progress<span class="token punctuation">.</span><span class="token function">setStringPainted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>progress<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前的进度值是"</span> <span class="token operator">+</span> progress<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"进度百分比"</span> <span class="token operator">+</span> progress<span class="token punctuation">.</span><span class="token function">getPercentComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span><span class="token punctuation">;</span>  frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currentProgress<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>currentProgress<span class="token operator">&gt;</span>MAX_PROGRESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currentProgress<span class="token operator">=</span>MAX_PROGRESS<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      progress<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>currentProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JTabble（表格）："><a href="#JTabble（表格）：" class="headerlink" title="JTabble（表格）："></a>JTabble（表格）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建空表格，后续再添加相应数据</span><span class="token class-name">JTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建指定行列数的空表格，表头名称默认使用大写字母（A, B, C ...）依次表示</span><span class="token class-name">JTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">,</span> <span class="token keyword">int</span> numColumns<span class="token punctuation">)</span> <span class="token comment">// 创建表格，指定 表格行数据 和 表头名称</span><span class="token class-name">JTable</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rowData<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames<span class="token punctuation">)</span><span class="token comment">// 使用表格模型创建表格</span><span class="token class-name">JTable</span><span class="token punctuation">(</span><span class="token class-name">TableModel</span> dm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>字体网格颜色设置</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建表格</span><span class="token class-name">JTable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 设置表格相关数据 */</span><span class="token comment">// 设置滚动面板视口大小（超过该大小的行数据，需要拖动滚动条才能看到）</span>table<span class="token punctuation">.</span><span class="token function">setPreferredScrollableViewportSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建滚动面板，把 表格 放到 滚动面板 中（表头将自动添加到滚动面板顶部）</span><span class="token class-name">JScrollPane</span> scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 再把滚动面板 scrollPane 添加到其他容器中显示 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>表头设置</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取表头</span><span class="token class-name">JTableHeader</span> jTableHeader <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置表头名称字体样式</span>jTableHeader<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span> font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置表头名称字体颜色</span>jTableHeader<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token class-name">Color</span> fg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置用户是否可以通过在头间拖动来调整各列的大小。</span>jTableHeader<span class="token punctuation">.</span><span class="token function">setResizingAllowed</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> resizingAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置用户是否可以拖动列头，以重新排序各列。</span>jTableHeader<span class="token punctuation">.</span><span class="token function">setReorderingAllowed</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> reorderingAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>行列设置：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置所有行的行高</span><span class="token keyword">void</span> <span class="token function">setRowHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowHeight<span class="token punctuation">)</span><span class="token comment">// 设置指定行的行高</span><span class="token keyword">void</span> <span class="token function">setRowHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> rowHeight<span class="token punctuation">)</span><span class="token comment">/** * 设置当手动改变某列列宽时，其他列的列宽自动调整模式，可选值: *     JTable.AUTO_RESIZE_ALL_COLUMNS 在所有的调整大小操作中，按比例调整所有的列。 *     JTable.AUTO_RESIZE_LAST_COLUMN 在所有的调整大小操作中，只对最后一列进行调整。 *     JTable.AUTO_RESIZE_NEXT_COLUMN 在 UI 中调整了一个列时，对其下一列进行相反方向的调整。 *     JTable.AUTO_RESIZE_OFF 不自动调整列的宽度；使用滚动条。 *     JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS 在 UI 调整中，更改后续列以保持总宽度不变；此为默认行为。 */</span><span class="token keyword">void</span> <span class="token function">setAutoResizeMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token comment">/* * 调整列宽 */</span><span class="token comment">// 先获取到某列</span><span class="token class-name">TableColumn</span> tableColumn <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getColumnModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColumn</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置列的宽度、首选宽度、最小宽度、最大宽度</span>tableColumn<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>tableColumn<span class="token punctuation">.</span><span class="token function">setPreferredWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> preferredWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>tableColumn<span class="token punctuation">.</span><span class="token function">setMinWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> minWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>tableColumn<span class="token punctuation">.</span><span class="token function">setMaxWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调整该列的列宽，以适合其标题单元格的宽度。</span>tableColumn<span class="token punctuation">.</span><span class="token function">sizeWidthToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否允许手动改变该列的列宽</span>tableColumn<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isResizable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置该列的表头名称</span>tableColumn<span class="token punctuation">.</span><span class="token function">setHeaderValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> headerValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>数据相关操作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 表格数据的简单设置和获取 */</span><span class="token comment">// 设置表格中指定单元格的数据</span>jTable<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValueAt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> aValue<span class="token punctuation">,</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取表格中指定单元格的数据</span><span class="token class-name">Object</span> value <span class="token operator">=</span> jTable<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 表头（列名）</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> columnNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"序号"</span><span class="token punctuation">,</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"语文"</span><span class="token punctuation">,</span> <span class="token string">"数学"</span><span class="token punctuation">,</span> <span class="token string">"英语"</span><span class="token punctuation">,</span> <span class="token string">"总分"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 表格所有行数据</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rowData <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Sue"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Joe_05"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"Joe_06"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"Joe_07"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"Joe_08"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"Joe_09"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Joe_10"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"Joe_11"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"Joe_12"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"Joe_13"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"Joe_14"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">"Joe_15"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"Joe_16"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">"Joe_17"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"Joe_18"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"Joe_19"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"Joe_20"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个表格，指定 表头 和 所有行数据</span>        <span class="token class-name">JTable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTable</span><span class="token punctuation">(</span>rowData<span class="token punctuation">,</span> columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置表格内容颜色</span>        table<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 字体颜色</span>        table<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 字体样式</span>        table<span class="token punctuation">.</span><span class="token function">setSelectionForeground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>DARK_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 选中后字体颜色</span>        table<span class="token punctuation">.</span><span class="token function">setSelectionBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>LIGHT_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 选中后字体背景</span>        table<span class="token punctuation">.</span><span class="token function">setGridColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 网格颜色</span>        <span class="token comment">// 设置表头</span>        table<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置表头名称字体样式</span>        table<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置表头名称字体颜色</span>        table<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResizingAllowed</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 设置不允许手动改变列宽</span>        table<span class="token punctuation">.</span><span class="token function">getTableHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReorderingAllowed</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 设置不允许拖动重新排序各列</span>        <span class="token comment">// 设置行高</span>        table<span class="token punctuation">.</span><span class="token function">setRowHeight</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一列列宽设置为40</span>        table<span class="token punctuation">.</span><span class="token function">getColumnModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColumn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPreferredWidth</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置滚动面板视口大小（超过该大小的行数据，需要拖动滚动条才能看到）</span>        table<span class="token punctuation">.</span><span class="token function">setPreferredScrollableViewportSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把 表格 放到 滚动面板 中（表头将自动添加到滚动面板顶部）</span>        <span class="token class-name">JScrollPane</span> scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加 滚动面板 到 内容面板</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSlider（滑块）："><a href="#JSlider（滑块）：" class="headerlink" title="JSlider（滑块）："></a>JSlider（滑块）：</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 参数说明: *     orientation: 滑块的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL，默认为水平方向 *     min: 滑块的最小值 *     max: 滑块的最大值 *     value: 滑块的初始值（默认为 最小值 和 最大值 之间的 中间值） */</span><span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">)</span>    <span class="token comment">// 默认的最小值、最大值、初始值值 分别为 0, 100, 50</span><span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span>   <span class="token comment">// 默认初始值为 min 和 max 之间的 中间值</span><span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token comment">//代码示例：</span><span class="token class-name">JSlider</span> slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>// 设置滑块的 最小值、最大值、当前值<br>void setMinimum(int min)<br>void setMaximum(int max)<br>void setValue(int n)</td><td>// 设置滑块的 最小值、最大值、当前值</td></tr><tr><td>int getValue()</td><td>// 获取滑块的当前值</td></tr><tr><td>void setMajorTickSpacing(int n)</td><td>// 设置 主刻度标记间隔</td></tr><tr><td>void setMinorTickSpacing(int n)</td><td>// 设置单个主刻度内的 次刻度标记间隔</td></tr><tr><td>void setPaintTicks(boolean b)</td><td>// 设置是否绘制 刻度线</td></tr><tr><td>void setPaintLabels(boolean b)</td><td>// 设置是否绘制 刻度标签（刻度值文本）</td></tr><tr><td>void setPaintTrack(boolean b)</td><td>// 设置是否绘制 滑道</td></tr><tr><td>void setOrientation(int orientation)</td><td>// 设置滑块的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL</td></tr><tr><td>void setSnapToTicks(boolean b)</td><td>// 设置滑块是否对齐到刻度。设置为 true，则滑块最终只能在有刻度的位置取值，即滑块取值不连续。</td></tr><tr><td>void setLabelTable(Dictionary&lt;Integer, JComponent&gt; labels)</td><td>// 用于指定将在 给定值处 绘制 对应的标签 来替代刻度数值文本的显示</td></tr><tr><td>void setInverted(boolean b)</td><td>// 设置是否颠倒刻度值（刻度值从大到小）</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加滑块的值改变监听器</span><span class="token keyword">void</span> <span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token class-name">ChangeListener</span> l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ChangeEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ChangeListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SliderDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"JSlider功能测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">JSlider</span> slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSlider</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        slider<span class="token punctuation">.</span><span class="token function">setMajorTickSpacing</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        slider<span class="token punctuation">.</span><span class="token function">setMinorTickSpacing</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        slider<span class="token punctuation">.</span><span class="token function">setPaintTicks</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        slider<span class="token punctuation">.</span><span class="token function">setPaintLabels</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加刻度改变监听器</span>        slider<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前值: "</span> <span class="token operator">+</span> slider<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>slider<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JTree（树）："><a href="#JTree（树）：" class="headerlink" title="JTree（树）："></a>JTree（树）：</h4><p><code>JTree</code>，树。将分层数据显示为树状轮廓的组件。</p><p>一颗树由若干节点，通过层级关系组成，一个节点由<code>TreeNode</code>实例来表示，节点在树中的位置（路径）由<code>TreePath</code>实例来表示（定位）。</p><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式一: 指定一个根节点创建树</span><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二: 先创建一个树模型（自定义树模型或使用已实现的默认树模型），再用指定树模型创建树</span><span class="token class-name">TreeModel</span> treeModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTreeModel</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span>treeModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式三: 先创建一个空树，在设置树模型</span><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token class-name">TreeModel</span> newModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TreePath（路径）："><a href="#TreePath（路径）：" class="headerlink" title="TreePath（路径）："></a>TreePath（路径）：</h5><p>TreePath：表示某节点的路径</p><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>Object[] paths = treePath.getPath();</td><td>// 获取此树路径上的所有节点，返回数组的元素为节点对象</td></tr><tr><td>int getPathCount()</td><td>//获取此树路径上的节点数量</td></tr><tr><td>TreePath getParentPath()</td><td>//获取此树路径表示的节点的父节点的树路径</td></tr><tr><td>boolean isDescendant(TreePath aTreePath);</td><td>//判断指定树路径是否为此树路径的“子孙”树路径</td></tr><tr><td>TreeNode[] getPath()</td><td>//获取节点的路径（从根节点到此节点沿路径的所有节点集）</td></tr></tbody></table><h5 id="DefaultMutableTreeNode（节点）："><a href="#DefaultMutableTreeNode（节点）：" class="headerlink" title="DefaultMutableTreeNode（节点）："></a>DefaultMutableTreeNode（节点）：</h5><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">&gt;</span><span class="token class-name">DefaultMutableTreeNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 参数说明: *     userObject: 节点的用户对象（节点显示的名称） *     allowsChildren: 是否允许有子节点 */</span><span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> userObject<span class="token punctuation">)</span><span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> userObject<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowsChildren<span class="token punctuation">)</span><span class="token comment">//代码示例：</span><span class="token class-name">DefaultMutableTreeNode</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"这是一个节点"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void add(MutableTreeNode newChild);</td><td>// 添加一个子节点在末尾</td></tr><tr><td>void insert(MutableTreeNode newChild, int childIndex)</td><td>// 在指定位置插入一个子节点</td></tr><tr><td>void remove(int childIndex);<br>void remove(MutableTreeNode aChild);<br>void removeAllChildren();</td><td>// 移除子节点</td></tr><tr><td>int getChildCount();<br>int getLeafCount();</td><td>// 获取子节点数量<br>// 获取叶子节点的数量</td></tr><tr><td>TreeNode getChildAt(int index);<br>TreeNode getChildAfter(TreeNode aChild);<br>TreeNode getChildBefore(TreeNode aChild);</td><td>// 获取指定索引位置的子节点<br>// 获取指定子节点之后的子节点<br>// 获取指定子节点之前的子节点<br></td></tr><tr><td>boolean isNodeChild(TreeNode aNode);</td><td>// 判断某节点是否为此节点的子节点</td></tr><tr><td>TreeNode getParent();</td><td>// 获取此节点的父节点，没有父节点则返回 null</td></tr><tr><td>boolean isRoot();<br>boolean isLeaf();</td><td>// 判断此节点是否为根节点<br>// 判断是否为叶节点（没有子节点即为叶节点，则返回 true）</td></tr><tr><td>Enumeration children();<br>Enumeration breadthFirstEnumeration();<br>Enumeration depthFirstEnumeration();</td><td>// 遍历子节点（只包括直接子节点，不包括孙节点）<br>// 按广度优先的顺序遍历以此节点为根的子树（包含此节点下的所有节点）<br>// 按深度优先的顺序遍历以此节点为根的子树（包含此节点下的所有节点）<br></td></tr><tr><td>int getLevel();</td><td>// 返回此节点上的级数，从根到此节点的距离。如果此节点为根，则返回 0。</td></tr><tr><td>TreeNode[] getPath();</td><td>// 返回从根到此节点的路径。该路径中第一个元素是根节点，最后一个元素是此节点。</td></tr><tr><td>void setUserObject(Object userObject);</td><td>// 设置节点的用户对象（节点显示的名称）</td></tr><tr><td>Object getUserObject();</td><td>// 获取节点的用户对象（节点显示的名称）</td></tr></tbody></table><p>监听器：（特有）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultMutableTreeNode</span> treeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    节点展开/折叠监听器  */</span>    tree<span class="token punctuation">.</span><span class="token function">addTreeExpansionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeExpansionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeExpanded</span><span class="token punctuation">(</span><span class="token class-name">TreeExpansionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"展开的节点: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeCollapsed</span><span class="token punctuation">(</span><span class="token class-name">TreeExpansionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠的节点: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * 节点展开/折叠监听器（比上一个监听器先执行） */</span>tree<span class="token punctuation">.</span><span class="token function">addTreeWillExpandListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeWillExpandListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeWillExpand</span><span class="token punctuation">(</span><span class="token class-name">TreeExpansionEvent</span> event<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExpandVetoException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"展开的节点: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeWillCollapse</span><span class="token punctuation">(</span><span class="token class-name">TreeExpansionEvent</span> event<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExpandVetoException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠的节点: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * 节点被选中的监听器 */</span>tree<span class="token punctuation">.</span><span class="token function">addTreeSelectionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSelectionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token class-name">TreeSelectionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取被选中的相关节点</span>        <span class="token class-name">TreePath</span> path <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreePath</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreePath</span> newLeadPath <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getNewLeadSelectionPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreePath</span> oldLeadPath <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getOldLeadSelectionPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 节点增删改监听器</span>tree<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTreeModelListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeModelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeNodesChanged</span><span class="token punctuation">(</span><span class="token class-name">TreeModelEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点改变: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getTreePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeNodesInserted</span><span class="token punctuation">(</span><span class="token class-name">TreeModelEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点插入: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getTreePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeNodesRemoved</span><span class="token punctuation">(</span><span class="token class-name">TreeModelEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点移除: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getTreePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treeStructureChanged</span><span class="token punctuation">(</span><span class="token class-name">TreeModelEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结构改变: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getTreePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">TreeSelectionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">TreeSelectionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 创建根节点</span>      <span class="token class-name">DefaultMutableTreeNode</span> rootNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"JAVA GUI编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Component</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"控件(Component)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"布局管理器(Layout)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Panel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"面板选择(Panel)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Listener</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"监听机制(Listener）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rootNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      rootNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span>      rootNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Panel</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      rootNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Listener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//控件栏</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Label</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"Label（标签）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Button</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"Button（按钮）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//布局管理：</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">FlowLayout</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"流式布局(FlowLayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">GridLayout</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"网格布局(GridLayout)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      layout<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      layout<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">GridLayout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//面板栏</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Panel1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"Panel（面板）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">Splitpane</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"Splitpane（分隔面板)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Panel</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Panel1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Panel</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Splitpane</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//监听器</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">ActionListener</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"事件处理机制(ActionListener)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DefaultMutableTreeNode</span> <span class="token class-name">MouseMotionListener</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span><span class="token string">"鼠标移动处理机制(MouseMotionListener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Listener</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ActionListener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Listener</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MouseMotionListener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>          tree<span class="token punctuation">.</span><span class="token function">setShowsRootHandles</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tree<span class="token punctuation">.</span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tree<span class="token punctuation">.</span><span class="token function">addTreeSelectionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSelectionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token class-name">TreeSelectionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前被选中的节点: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">JScrollPane</span> scrollpane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>         panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollpane<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>            frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>            frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JAVA特有控件：-private-Component"><a href="#JAVA特有控件：-private-Component" class="headerlink" title="JAVA特有控件：(private Component)"></a>JAVA特有控件：(private Component)</h3><h4 id="文件选择器：JFileChooser"><a href="#文件选择器：JFileChooser" class="headerlink" title="文件选择器：JFileChooser"></a>文件选择器：JFileChooser</h4><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 参数说明: *     currentDirectory: 打开文件选取器时默认显示的文件夹（默认为用户文件夹） *     currentDirectoryPath: 打开文件选取器时默认显示的文件夹（默认为用户文件夹） */</span><span class="token class-name">JFileChooser</span> chooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token class-name">File</span> currentDirectory<span class="token punctuation">)</span><span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token class-name">String</span> currentDirectoryPath<span class="token punctuation">)</span><span class="token comment">//代码示例</span><span class="token class-name">JFileChooser</span> chooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token string">"D:\\eclipse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setCurrentDirectory(File dir)</td><td>// 设置默认显示的文件夹</td></tr><tr><td>void setMultiSelectionEnabled(boolean b)</td><td>// 设置是否允许同时选择多个（默认为不允许）</td></tr><tr><td>void addChoosableFileFilter(FileFilter filter)<br>void setFileFilter(FileFilter filter)</td><td>// 添加可供用户选择的文件过滤器<br>// 添加可供用户选择的文件过滤器</td></tr><tr><td>void setSelectedFile(File file)<br>void setSelectedFiles(File[] selectedFiles)</td><td>// 设置默认被选中的文件</td></tr><tr><td>File getSelectedFile()<br>File[] getSelectedFiles()</td><td>// 获取选择的文件（一般在用户选择完文件点击了确认或保存后通过该方法获取选中的文件）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JFileChooser</span> chooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置文件选择模式, 可选值如下:</span><span class="token comment">//     JFileChooser.FILES_ONLY: 只能选文件</span><span class="token comment">//     JFileChooser.DIRECTORIES_ONLY: 只能选文件夹</span><span class="token comment">//     JFileChooser.FILES_AND_DIRECTORIES: 文件和文件夹都可以选</span><span class="token keyword">void</span> <span class="token function">setFileSelectionMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token comment">/* * 参数:  *     parent: 文件选取器对话框的父组件, 对话框将会尽量显示在靠近 parent 的中心; 如果传 null, 则显示在屏幕中心。 *  * 返回值: *     JFileChooser.CANCEL_OPTION: 点击了取消或关闭 *     JFileChooser.APPROVE_OPTION: 点击了确认或保存 *     JFileChooser.ERROR_OPTION: 出现错误 */</span><span class="token keyword">int</span> <span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parent<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">showSaveDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"功能测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//窗体居中</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//创建文本区域</span>        <span class="token keyword">final</span> <span class="token class-name">JTextArea</span> area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        area<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">showFileOpenDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">JButton</span> <span class="token class-name">Save</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"保存文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Save</span><span class="token punctuation">.</span><span class="token function">addActtionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">showFileSaveDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//打开文件</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showFileSaveDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parent<span class="token punctuation">,</span><span class="token class-name">JTextArea</span> area<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFileChooser</span> chooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       chooser<span class="token punctuation">.</span><span class="token function">setCurrentDirectory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        chooser<span class="token punctuation">.</span><span class="token function">setFileSelectionMode</span><span class="token punctuation">(</span><span class="token class-name">JFileChooser</span><span class="token punctuation">.</span>FILE_AND_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 添加可用的文件过滤器（FileNameExtensionFilter 的第一个参数是描述, 后面是需要过滤的文件扩展名 可变参数）</span>        fileChooser<span class="token punctuation">.</span><span class="token function">addChoosableFileFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileNameExtensionFilter</span><span class="token punctuation">(</span><span class="token string">"zip(*.zip, *.rar)"</span><span class="token punctuation">,</span> <span class="token string">"zip"</span><span class="token punctuation">,</span> <span class="token string">"rar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置默认使用的文件过滤器</span>        fileChooser<span class="token punctuation">.</span><span class="token function">setFileFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileNameExtensionFilter</span><span class="token punctuation">(</span><span class="token string">"image(*.jpg, *.png, *.gif)"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token string">"gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chooser<span class="token punctuation">.</span><span class="token function">setMultiSelectionEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> option <span class="token operator">=</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token operator">==</span><span class="token class-name">JFileChooser</span><span class="token punctuation">.</span>APPROVE_OPTION<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//获取选择文件路径</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> chooser<span class="token punctuation">.</span><span class="token function">getSelectedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果允许选择多个文件，则通过下面方法获取所有文件</span>            <span class="token comment">//File[] files =chooser.getSelectedFiles();</span>                        area<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"打开文件"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showFileSaveDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parent<span class="token punctuation">,</span><span class="token class-name">JTextArea</span> area<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">JFileChooser</span> chooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          chooser<span class="token punctuation">.</span><span class="token function">setSelectedFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"测试文件.zip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> result <span class="token operator">=</span>chooser<span class="token punctuation">.</span><span class="token function">shwoSaveDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token class-name">JFileChooser</span><span class="token punctuation">.</span>APPROVE_OPTION<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">File</span> file <span class="token operator">=</span> chooser<span class="token punctuation">.</span><span class="token function">getSelectedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         area<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"保存到文件"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token class-name">AbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="颜色选择器：JColorChooser"><a href="#颜色选择器：JColorChooser" class="headerlink" title="颜色选择器：JColorChooser"></a>颜色选择器：JColorChooser</h4><p>常用API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 显示一个颜色选取器对话框（线程将被阻塞, 直到对话框被关闭） *  * 参数说明: *     component: 对话框的父组件, 对话框将紧靠 component 的中心显示; 如果传 null, 则对话框显示在屏幕中心。 *     title: 对话框标题。 *     initialColor: 初始选中的颜色; 如果传 null, 则默认为非透明白色。 * * 返回: *     返回选择的颜色; 如果点击了取消或关闭, 则返回 null。 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Color</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">Color</span> initialColor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        label<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token class-name">JColorChooser</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span><span class="token string">"选择颜色"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>            label<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 获取颜色的 ARGB 各个分量值</span>                <span class="token keyword">int</span> alpha <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">getAlpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> red <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">getRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> green <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">getGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> blue <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">getBlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                label<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"A="</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> alpha<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span>                        <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"#%02x%02x%02x"</span><span class="token punctuation">,</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="布局管理器（Layout）"><a href="#布局管理器（Layout）" class="headerlink" title="布局管理器（Layout）"></a>布局管理器（Layout）</h2><h3 id="流式布局：FlowLayout"><a href="#流式布局：FlowLayout" class="headerlink" title="流式布局：FlowLayout"></a>流式布局：FlowLayout</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认 居中对齐的，水平和垂直间隙是 5 个单位</span><span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 指定对齐方式，默认的水平和垂直间隙是 5 个单位</span><span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> align<span class="token punctuation">)</span><span class="token comment">// 指定对其方式，水平 和 竖直 间隙</span><span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> align<span class="token punctuation">,</span> <span class="token keyword">int</span> hgap<span class="token punctuation">,</span> <span class="token keyword">int</span> vgap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>LEFT <span class="token operator">:</span> 左对齐<span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER <span class="token operator">:</span> 居中对齐（默认）<span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>RIGHT <span class="token operator">:</span> 右对齐<span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>LEADING <span class="token operator">:</span> 与容器方向的开始边对齐，例如，对于从左到右的方向，则与左边对齐<span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>TRAILING <span class="token operator">:</span> 与容器方向的结束边对齐，例如，对于从左到右的方向，则与右边对齐。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiets<span class="token punctuation">.</span>swing</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建内容面板，指定使用 流式布局</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn05 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn01<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn02<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn03<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn04<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn05<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绝对布局：setLayout-null"><a href="#绝对布局：setLayout-null" class="headerlink" title="绝对布局：setLayout(null);"></a>绝对布局：setLayout(null);</h3><p>常用方法：</p><p>容器使用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个容器，指定内容管理器为 null, 即使用绝对布局</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或<span class="token comment">// 创建一个容器</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置内容管理器为 null, 即使用绝对布局</span>panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API:</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setLocation(int x, int y)<br>void setLocation(Point p)</td><td><em>// 设置组件的坐标</em></td></tr><tr><td>void setSize(int width, int height)<br>void setSize(Dimension d)</td><td><em>// 设置组件的宽高</em></td></tr><tr><td>void setBounds(int x, int y, int width, int height)<br>void setBounds(Rectangle rect)</td><td><em>/ 设置组件的界限（一次性设置组件的 坐标 和 宽高）</em></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IternalFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn01<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn01<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建按钮</span>        <span class="token class-name">JButton</span> btn02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn02<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 显示窗口</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 也可以在 jf.setVisible(true) 之后添加按钮         *         * PS_01: jf.setVisible(true) 之后，内容面板才有宽高;         * PS_02: 使用其他布局时, jf.setVisible(true) 之后添加的组件, 也会被当做是绝对布局来布置该组件（即需要手动指定坐标和宽高）;         * PS_03: 使用其他布局时, jf.setVisible(true) 之前添加的组件, 如果在 jf.setVisible(true) 之后手动设置该组件的坐标和宽高,         *        会将该组件当做绝对布局来对待（即设置坐标和宽高会生效）。         */</span>        <span class="token class-name">JButton</span> btn03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把按钮位置设置在内容面板右下角, 并且设置按钮宽高为 100, 50</span>        btn03<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>panel<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> panel<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn03<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网格布局：GridLayout"><a href="#网格布局：GridLayout" class="headerlink" title="网格布局：GridLayout"></a>网格布局：GridLayout</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认构造, 每个组件占据一行一列</span><span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指定 行数 和 列数 的网格布局</span><span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">)</span><span class="token comment">// 指定 行数 和 列数 的网格布局, 并指定 水平 和 竖直 网格间隙</span><span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">int</span> hgap<span class="token punctuation">,</span> <span class="token keyword">int</span> vgap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 3 行 3 列 的网格布局</span>        <span class="token class-name">GridLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置 水平 和 竖直 间隙</span>        <span class="token comment">// layout.setHgap(10);</span>        <span class="token comment">// layout.setVgap(10);</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn05 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn06 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮06"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn07 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮07"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮08"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn01<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn02<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn03<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn04<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn05<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn06<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn07<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn08<span class="token punctuation">)</span><span class="token punctuation">;</span>               frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网格袋布局：GridBagLayout"><a href="#网格袋布局：GridBagLayout" class="headerlink" title="网格袋布局：GridBagLayout"></a>网格袋布局：GridBagLayout</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> voidm <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"网格袋布局测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="箱式布局：BoxLayout"><a href="#箱式布局：BoxLayout" class="headerlink" title="箱式布局：BoxLayout"></a>箱式布局：BoxLayout</h3><p>构造方法：</p><ol><li>创建水平/垂直箱容器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个 水平方向胶状 的不可见组件，用于撑满水平方向剩余的空间（如果有多个该组件，则平分剩余空间）</span><span class="token class-name">Component</span> hGlue <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createHorizontalGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 垂直方向胶状 的不可见组件，用于撑满垂直方向剩余的空间（如果有多个该组件，则平分剩余空间）</span><span class="token class-name">Component</span> vGlue <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createVerticalGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 水平和垂直方向胶状 的不可见组件，用于撑满水平和垂直方向剩余的空间（如果有多个该组件，则平分剩余空间）</span><span class="token class-name">Component</span> glue <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建胶状不可见组件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个 水平方向胶状 的不可见组件，用于撑满水平方向剩余的空间（如果有多个该组件，则平分剩余空间）</span><span class="token class-name">Component</span> hGlue <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createHorizontalGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 垂直方向胶状 的不可见组件，用于撑满垂直方向剩余的空间（如果有多个该组件，则平分剩余空间）</span><span class="token class-name">Component</span> vGlue <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createVerticalGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 水平和垂直方向胶状 的不可见组件，用于撑满水平和垂直方向剩余的空间（如果有多个该组件，则平分剩余空间）</span><span class="token class-name">Component</span> glue <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建固定高度不可见组件</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个 固定宽度 的不可见组件（用于水平箱）</span><span class="token class-name">Component</span> hStrut <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createHorizontalStrut</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 固定高度 的不可见组件（用于垂直箱）</span><span class="token class-name">Component</span> vStrut <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createVerticalStrut</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 固定宽高 的不可见组件</span><span class="token class-name">Component</span> rigidArea <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createRigidArea</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demp</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"BoxLayout测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JButton</span> btn01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn05 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建第一个水平箱容器</span>        <span class="token class-name">Box</span> hBox01 <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createHorizontalBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hBox01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn01<span class="token punctuation">)</span><span class="token punctuation">;</span>        hBox01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn02<span class="token punctuation">)</span><span class="token punctuation">;</span>        hBox01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn03<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建第二水平箱容器</span>        <span class="token class-name">Box</span> hBox02 <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createHorizontalBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hBox02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn04<span class="token punctuation">)</span><span class="token punctuation">;</span>        hBox02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createHorizontalGlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加一个水平方向胶状的不可见组件，撑满剩余水平空间</span>        hBox02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn05<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个垂直箱容器，放置上面两个水平箱（Box组合嵌套）</span>        <span class="token class-name">Box</span> vBox <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createVerticalBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vBox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hBox01<span class="token punctuation">)</span><span class="token punctuation">;</span>        vBox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hBox02<span class="token punctuation">)</span><span class="token punctuation">;</span>                frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>vBox<span class="token punctuation">)</span><span class="token punctuation">;</span>         frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组布局：GroupLayout"><a href="#分组布局：GroupLayout" class="headerlink" title="分组布局：GroupLayout"></a>分组布局：GroupLayout</h3><ul><li>串<code>GroupLayout</code>支持两种组:<ul><li>串行组 (sequential group)：按顺序沿指定方向（水平/垂直）逐个放置元素。</li><li>并行组 (parallel group)：沿指定方向（水平/垂直）并行排列元素，能够以四种不同方式对齐其子元素。</li></ul></li><li>行组 (sequential group)：按顺序沿指定方向（水平/垂直）逐个放置元素。</li><li>并行组 (parallel group)：沿指定方向（水平/垂直）并行排列元素，能够以四种不同方式对齐其子元素。</li></ul><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">GroupLayout</span><span class="token punctuation">(</span>panel panel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例：</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GroupLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupLayout</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"GroupLayout布局测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>     frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="卡片布局：CardLayout"><a href="#卡片布局：CardLayout" class="headerlink" title="卡片布局：CardLayout"></a>卡片布局：CardLayout</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个间距大小为 0 的卡片布局</span><span class="token class-name">CardLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建一个指定水平/垂直间距大小的卡片布局。</span><span class="token class-name">CardLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> hgap<span class="token punctuation">,</span> <span class="token keyword">int</span> vgap<span class="token punctuation">)</span> <span class="token comment">//代码示例：10*10间距大小</span><span class="token class-name">CardLayout</span> card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CardLayout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void first(Container parent);<br><br>void last(Container parent);<br><br>void next(Container parent);<br><br>void previous(Container parent);</td><td>// 显示第一张卡片<br>/ 显示最后一张卡片<br>// 显示下一张卡片（自动循环显示）<br>// 显示上一张卡片（自动循环显示）<br></td></tr><tr><td>void show(Container parent, String name);</td><td>// 显示指定名称的组件（添加组件到容器时，可同时添加组件的名称）</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试CardLayout窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">CardLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CardLayout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn01<span class="token punctuation">,</span> <span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn02<span class="token punctuation">,</span> <span class="token string">"btn02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn03<span class="token punctuation">,</span> <span class="token string">"btn03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 先显示第二个</span>        layout<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token string">"btn02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                layout<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="边界布局：BorderLayout"><a href="#边界布局：BorderLayout" class="headerlink" title="边界布局：BorderLayout"></a>边界布局：BorderLayout</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 构造一个组件之间没有间距的新边框布局</span><span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 构造一个具有指定组件间距的边框布局</span><span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> hgap<span class="token punctuation">,</span> <span class="token keyword">int</span> vgap<span class="token punctuation">)</span> <span class="token comment">//代码示例：</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JMenuBar</span> menubar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menubar<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH      <span class="token comment">// 容器的北边</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH      <span class="token comment">// 容器的南边</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST       <span class="token comment">// 容器的西边</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>EAST       <span class="token comment">// 容器的东边</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER     <span class="token comment">// 容器的中心</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">BorderLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"BoderLayout测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建 5 个按钮</span>    <span class="token class-name">JButton</span> btnN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button_North"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> btnS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button_South"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> btnW <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button_West"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> btnE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button_East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> btnC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button_Center"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把 5 个按钮添加到容器中的 5 个方位</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnN<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnS<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnW<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnE<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnC<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹性布局：SpringLayout"><a href="#弹性布局：SpringLayout" class="headerlink" title="弹性布局：SpringLayout"></a>弹性布局：SpringLayout</h3><p>开发中计算相对位置数值过于冗杂不推荐使用</p><h4 id="SpringLayout："><a href="#SpringLayout：" class="headerlink" title="SpringLayout："></a>SpringLayout：</h4><p>表示一个布局管理器，通过该布局管理器可以获取组件或容器的约束对象，如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建 弹性布局管理器 和 容器，容器 使用 弹性布局</span><span class="token class-name">SpringLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 按钮组件，并添加到 容器</span><span class="token class-name">JButton</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取 按钮组件 的 约束对象（如果没有，会自动创建）</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span><span class="token class-name">Constraints</span> btnCons <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getConstraints</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取 容器组件 的 约束对象（如果没有，会自动创建）</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span><span class="token class-name">Constraints</span> panelCons <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getConstraints</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SpringLayout-Constrains："><a href="#SpringLayout-Constrains：" class="headerlink" title="SpringLayout.Constrains："></a>SpringLayout.Constrains：</h4><p>表示对 <strong>组件位置和尺寸的约束</strong>，每个组件实例都对应着一个约束对象，通过该约束可以 <em>获取和设置</em> 组件四条边的 <em>坐标和宽高</em>，常用方法如下:</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void    setX(Spring x)<br>void    setY(Spring y)<br>Spring  getX()<br>Spring  getY()</td><td>组件左上角坐标的设置（这里 X 相当于 WEST，Y 相当于 NORTH）</td></tr><tr><td>void    setWidth(Spring w)<br>void    setHeight(Spring h)<br>Spring  getHeight()<br>Spring  getWidth()</td><td>组件宽高的设置</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 组件指定边的的坐标或长度设置 * edgeName 的值为如下常量之一: *      SpringLayout.NORTH, SpringLayout.SOUTH, SpringLayout.EAST, SpringLayout.WEST *      SpringLayout.HORIZONTAL_CENTER, SpringLayout.VERTICAL_CENTER *      SpringLayout.BASELINE *      SpringLayout.WIDTH, SpringLayout.HEIGHT */</span><span class="token class-name">Spring</span>  <span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">String</span> edgeName<span class="token punctuation">)</span><span class="token keyword">void</span>    <span class="token function">setConstraint</span><span class="token punctuation">(</span><span class="token class-name">String</span> edgeName<span class="token punctuation">,</span> <span class="token class-name">Spring</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring："><a href="#Spring：" class="headerlink" title="Spring："></a>Spring：</h4><p>Spring 可以看做是在 SpringLayout 中对 <strong>距离的度量</strong>。一个 Spring 实例，表示一段距离或长度，并且支持简单的算术运算（通过 Spring 提供的静态方法进行计算），常用方法如下:</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>static Spring constant(int pref)</td><td>// 创建一个指定长度的 spring</td></tr><tr><td>int   getValue()<br>void  setValue(int value)</td><td>// 对 spring 所表示的数值大小的获取和设置</td></tr><tr><td>static Spring max(Spring s1, Spring s2)<br>static Spring sum(Spring s1, Spring s2)</td><td>// 计算两个 spring 之间的较大者<br>// 两个 spring 相加，得到新的一个 spring</td></tr><tr><td>static Spring scale(Spring s, float factor)</td><td>// 对 spring 的缩放</td></tr><tr><td>static Spring width(Component c)<br>static Spring height(Component c)</td><td>// 计算指定组件的宽度所表示的 spring<br>// 计算指定组件的高度所表示的 spring</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiets<span class="token punctuation">.</span>swing</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建窗口</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SpringLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"Test JLabel: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"Btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JTextField</span> textField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"Text Field"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 组件的约束设置（弹性布局设置的关键）         */</span>        <span class="token comment">// 标签组件约束: 设置标签的左上角坐标为 (5, 5)</span>        <span class="token class-name">SpringLayout</span><span class="token punctuation">.</span><span class="token class-name">Constraints</span> labelCons <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getConstraints</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从布局中获取指定组件的约束对象（如果没有，会自动创建）</span>        labelCons<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        labelCons<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 按钮组件约束: 设置左上角 水平坐标为5, 垂直坐标为 标签的南边坐标；设置东边坐标为 标签的东边坐标</span>        <span class="token class-name">SpringLayout</span><span class="token punctuation">.</span><span class="token class-name">Constraints</span> btnCons <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getConstraints</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnCons<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btnCons<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span>labelCons<span class="token punctuation">.</span><span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btnCons<span class="token punctuation">.</span><span class="token function">setConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">,</span> labelCons<span class="token punctuation">.</span><span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 文本框约束: 设置左上角 水平坐标为 标签的东边坐标 + 5, 垂直坐标为 5</span>        <span class="token class-name">SpringLayout</span><span class="token punctuation">.</span><span class="token class-name">Constraints</span> textFieldCons <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getConstraints</span><span class="token punctuation">(</span>textField<span class="token punctuation">)</span><span class="token punctuation">;</span>        textFieldCons<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span>                <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>                        labelCons<span class="token punctuation">.</span><span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        textFieldCons<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 内容面板（容器）的约束设置，即确定 组件 和 容器的右边和底边 之间的间隙大小         */</span>        <span class="token class-name">SpringLayout</span><span class="token punctuation">.</span><span class="token class-name">Constraints</span> panelCons <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getConstraints</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取容器的约束对象</span>        <span class="token comment">// 设置容器的 东边坐标 为 文本框的东边坐标 + 5</span>        panelCons<span class="token punctuation">.</span><span class="token function">setConstraint</span><span class="token punctuation">(</span>                <span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">,</span>                <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>                        textFieldCons<span class="token punctuation">.</span><span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算出 按钮 和 文本框 的 南边坐标 的 值较大者</span>        <span class="token class-name">Spring</span> maxHeightSpring <span class="token operator">=</span> <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>                btnCons<span class="token punctuation">.</span><span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">,</span>                textFieldCons<span class="token punctuation">.</span><span class="token function">getConstraint</span><span class="token punctuation">(</span><span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置容器的 南边坐标 为 maxHeightSpring + 5</span>        panelCons<span class="token punctuation">.</span><span class="token function">setConstraint</span><span class="token punctuation">(</span>                <span class="token class-name">SpringLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">,</span>                <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>                        maxHeightSpring<span class="token punctuation">,</span>                        <span class="token class-name">Spring</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 显示窗口</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面板选择（JPanel）"><a href="#面板选择（JPanel）" class="headerlink" title="面板选择（JPanel）"></a>面板选择（JPanel）</h2><h3 id="窗口：JFrame："><a href="#窗口：JFrame：" class="headerlink" title="窗口：JFrame："></a>窗口：JFrame：</h3><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//窗口带有文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setTitle(String title)</td><td>// 设置窗口的 标题</td></tr><tr><td>void setIconImage(Image image)</td><td>// 设置窗口的 图标</td></tr><tr><td>void setResizable(boolean resizable)</td><td>// 设置窗口是否可放大缩小</td></tr><tr><td>void setLocation(int x, int y)<br>void setLocation(Point p)</td><td>// 设置窗口的 位置（相对于屏幕左上角）</td></tr><tr><td>void setSize(int width, int height)<br>void setSize(Dimension d)</td><td>// 设置窗口的 宽高</td></tr><tr><td>void setBounds(int x, int y, int width, int height)<br>void setBounds(Rectangle rect)</td><td>// 设置窗口的 位置 和 宽高</td></tr><tr><td>void pack()</td><td>// 调整窗口的大小, 以适合其子组件的首选大小和布局。</td></tr><tr><td>void dispose()</td><td>// 销毁窗口, 释放窗口及其所有子组件占用的资源, 之后再次调用 setVisible(true) 将会重构窗口</td></tr><tr><td>boolean isShowing()</td><td>// 判断窗口是否处于显示状态</td></tr><tr><td>void setVisible(boolean b)</td><td>设置窗口是否可见, 窗口对象刚创建和添加相应组件后通过 setVisible(true) 绘制窗口, 其内部组件可能要此时才有宽高值</td></tr><tr><td>void setContentPane(Container contentPane)</td><td>// 设置窗口的内容面板</td></tr><tr><td>Point getLocationOnScreen()<br>Point getLocation()</td><td>//获取窗口的位置坐标（相对于屏幕坐标空间）<br>//获取窗口的位置坐标（相对于父级坐标空间, 窗口的父级一般就是屏幕）<br></td></tr><tr><td>void setAlwaysOnTop(boolean alwaysOnTop)</td><td>// 设置将窗口 置顶 显示</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 设置窗口关闭按钮点击后的默认操作, 参考值: *     WindowConstants.DO_NOTHING_ON_CLOSE: 不执行任何操作。 *     WindowConstants.HIDE_ON_CLOSE: 隐藏窗口（不会结束进程）, 再次调用 setVisible(true) 将再次显示。 *     WindowConstants.DISPOSE_ON_CLOSE: 销毁窗口, 如果所有可显示的窗口都被 DISPOSE, 则可能会自动结束进程。 *     WindowConstants.EXIT_ON_CLOSE: 退出进程。 */</span><span class="token keyword">void</span> <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> operation<span class="token punctuation">)</span><span class="token comment">/** * 设置窗口的相对位置。 * 如果 comp 整个显示区域在屏幕内, 则将窗口放置到 comp 的中心; * 如果 comp 显示区域有部分不在屏幕内, 则将该窗口放置在最接近 comp 中心的一侧; * comp 为 null, 表示将窗口放置到屏幕中心。 */</span><span class="token keyword">void</span> <span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token class-name">Component</span> comp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"frame功能测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"设置窗体标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"展示一个新窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">shwoNewWindow</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showNewWindow</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span> releative<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">JFrame</span> newframe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"新的窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     newframe<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     newframe<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span>relative<span class="token punctuation">)</span><span class="token punctuation">;</span>     newframe<span class="token punctuation">.</span>setDefaultCloseOperationWindowConstants<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>   newframe<span class="token punctuation">.</span><span class="token function">setResiable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Jpanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">GridLayout</span>          <span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是新窗体显示的文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   label<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span> label<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    label<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>         newframe<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    newframe<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内置窗口：JIternalFrame"><a href="#内置窗口：JIternalFrame" class="headerlink" title="内置窗口：JIternalFrame"></a>内置窗口：JIternalFrame</h4><p>构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">boolean</span> resizable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">boolean</span> resizable<span class="token punctuation">,</span><span class="token keyword">boolean</span> closable<span class="token punctuation">)</span><span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">boolean</span> resizable<span class="token punctuation">,</span><span class="token keyword">boolean</span> closable<span class="token punctuation">,</span><span class="token keyword">boolean</span> maximizable<span class="token punctuation">)</span> <span class="token comment">//可最大化，但不可最小化的Internal Frame.</span>　　<span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">boolean</span> resizable<span class="token punctuation">,</span><span class="token keyword">boolean</span> closable<span class="token punctuation">,</span><span class="token keyword">boolean</span> maximizable<span class="token punctuation">,</span><span class="token keyword">boolean</span> iconifiable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可最大化与最小化的Internal Frame.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：(与JFrame类似)</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">PropertyVetoException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IternalFrame</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JDesktopPane</span> desktopPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDesktopPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JInternalFrame</span> internalFrame <span class="token operator">=</span> <span class="token function">createInternalFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        desktopPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>internalFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>desktopPane<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 设置 内部窗口 被选中</span>            internalFrame<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PropertyVetoException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JInternalFrame</span> <span class="token function">createInternalFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JInternalFrame</span> internalFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JInternalFrame</span><span class="token punctuation">(</span>                <span class="token string">"内部窗口"</span><span class="token punctuation">,</span>  <span class="token comment">// title</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// resizable</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// closable</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// maximizable</span>                <span class="token boolean">true</span>        <span class="token comment">// iconifiable</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>               internalFrame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        internalFrame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 内部窗口的关闭按钮动作默认就是销毁窗口，所有不用设置</span>        <span class="token comment">// internalFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"Label001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"JButton001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        internalFrame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        internalFrame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> internalFrame<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面板：JPanel"><a href="#面板：JPanel" class="headerlink" title="面板：JPanel"></a>面板：JPanel</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建默认使用流式布局：</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建指定布局器的面板：</span><span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token class-name">LayoutManager</span> layout<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例：</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"功能测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JLanel</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JTetField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JPanel</span> panel03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JPanel03</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JPanel03</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"注册"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个垂直盒子容器储存面板</span>    <span class="token class-name">Box</span> box <span class="token operator">=</span><span class="token class-name">Box</span><span class="token punctuation">.</span><span class="token function">createVerticalBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel01<span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel02<span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel03<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="滚动面板：JScrollPane"><a href="#滚动面板：JScrollPane" class="headerlink" title="滚动面板：JScrollPane"></a>滚动面板：JScrollPane</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 参数说明: *     view: 需要滚动显示的视图组件 *     vsbPolicy: 垂直滚动条的显示策略 *     hsbPolicy: 水平滚动条的显示策略 */</span><span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token class-name">Component</span> view<span class="token punctuation">)</span><span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token class-name">Component</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> vsbPolicy<span class="token punctuation">,</span> <span class="token keyword">int</span> hsbPolicy<span class="token punctuation">)</span><span class="token class-name">JScrollPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> vsbPolicy<span class="token punctuation">,</span> <span class="token keyword">int</span> hsbPolicy<span class="token punctuation">)</span><span class="token comment">//代码示例：</span><span class="token class-name">JTextArea</span> area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token string">"初始文字"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>VERTICAL_SCROLLBAR_AS_NEEDED<span class="token punctuation">,</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>HORIZONTAL_SCROLLBAR_AS_NEEDED<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚动条取值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 垂直滚动条（vsbPolicy） */</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>VERTICAL_SCROLLBAR_AS_NEEDED    <span class="token comment">// 需要时显示（默认）</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>VERTICAL_SCROLLBAR_NEVER        <span class="token comment">// 从不显示</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>VERTICAL_SCROLLBAR_ALWAYS       <span class="token comment">// 总是显示</span><span class="token comment">/* * 水平滚动条（hsbPolicy） */</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>HORIZONTAL_SCROLLBAR_AS_NEEDED  <span class="token comment">// 需要时显示（默认）</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>HORIZONTAL_SCROLLBAR_NEVER      <span class="token comment">// 从不显示</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>HORIZONTAL_SCROLLBAR_ALWAYS     <span class="token comment">// 总是显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setVerticalScrollBarPolicy(int policy)<br><br>void setHorizontalScrollBarPolicy(int policy)</td><td>// 设置垂直滚动条的显示策略<br>// 设置水平滚动条的显示策略<br></td></tr><tr><td>void setViewportView(Component view)</td><td>// 设置滚动显示视图内容组件</td></tr><tr><td>void setWheelScrollingEnabled(boolean handleWheel)</td><td>// 是否响应鼠标滚动事件，默认响应</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JTextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JScorllPane</span> scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">,</span><span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>VERTICAL_SCROLLBAR_ALWAYS<span class="token punctuation">,</span>                <span class="token class-name">ScrollPaneConstants</span><span class="token punctuation">.</span>HORIZONTAL_SCROLLBAR_NEVER        <span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分隔面板：JSpiltPane"><a href="#分隔面板：JSpiltPane" class="headerlink" title="分隔面板：JSpiltPane"></a>分隔面板：JSpiltPane</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 参数说明: *     orientation: 分隔的方向，取值 JSplitPane.HORIZONTAL_SPLIT（水平左右分隔）  *                  或 JSplitPane.VERTICAL_SPLIT（垂直上下分隔），默认水平左右分隔。 *                   *     continuousLayout: 拖动分隔条时，是否连续重绘组件，如果为flase，则拖动分隔条停止后才重绘组件。 *      *     leftComponent: 左边/上面 显示的组件 *      *     rightComponent: 右边/下面 显示的组件 */</span><span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">)</span><span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">,</span> <span class="token keyword">boolean</span> continuousLayout<span class="token punctuation">)</span><span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">,</span> <span class="token keyword">boolean</span> continuousLayout<span class="token punctuation">,</span> <span class="token class-name">Component</span> leftComponent<span class="token punctuation">,</span> <span class="token class-name">Component</span> rightComponent<span class="token punctuation">)</span><span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">,</span> <span class="token class-name">Component</span> leftComponent<span class="token punctuation">,</span> <span class="token class-name">Component</span> rightComponent<span class="token punctuation">)</span><span class="token comment">//代码示例：</span><span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token class-name">JSplitPane</span><span class="token punctuation">.</span>HORIZONTAL_SPLIT<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"左边测试按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"右边测试按钮"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void setOrientation(int orientation)</td><td>// 设置分隔的方向，水平(左右) 或 垂直(上下) 分隔</td></tr><tr><td>void setLeftComponent(Component comp)<br>void setTopComponent(Component comp)void <br>void setRightComponent(Component comp)<br>void setBottomComponent(Component comp)</td><td>// 设置 左边/上面 显示的组件（下面两个方法完全一致）<br>// 设置 左边/下面 显示的组件（下面两个方法完全一致）</td></tr><tr><td>void setContinuousLayout(boolean continuousLayout)</td><td>// 设置 拖动分隔条 时是否 连续重绘 组件</td></tr><tr><td>void setOneTouchExpandable(boolean newValue)</td><td>// 分隔条上是否显示快速 折叠/展开 两边组件的小按钮</td></tr><tr><td>void setDividerSize(int newSize)</td><td>// 设置分隔条的大小（宽度）</td></tr><tr><td>void setDividerLocation(int location)</td><td>// 设置分隔条的位置，相对于 左边/顶部 的像素长度</td></tr><tr><td>void setDividerLocation(double proportionalLocation)</td><td>// 设置分隔条的位置，相对于 宽度/高度 的比例 [0.0 ~ 1.0]（该方法必须要先确保 JSplitPane 已经有宽高值，否则无效）</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSplitPane</span> splitpane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSpliyPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    splitpane<span class="token punctuation">.</span><span class="token function">setLeftComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"左边的按钮"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    splitpane<span class="token punctuation">.</span><span class="token function">setRightComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"右边的按钮"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拖动分隔条连续重绘组件</span>    splitPane<span class="token punctuation">.</span><span class="token function">setContinuousLayout</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分隔条上显示 折叠/展开 两边组件小按钮</span>    splitPane<span class="token punctuation">.</span><span class="token function">setOneTouchExpanable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置初始位置</span>    splitPane<span class="token punctuation">.</span><span class="token function">setDividerLocation</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>splitpane<span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选项卡面板：JTabbedPane"><a href="#选项卡面板：JTabbedPane" class="headerlink" title="选项卡面板：JTabbedPane"></a>选项卡面板：JTabbedPane</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 参事说明: *     tabPlacement: 选项卡标题的位置, 值为 JTabbedPane.TOP、JTabbedPane.BOTTOM、 *                   JTabbedPane.LEFT 或 JTabbedPane.RIGHT, 默认为 TOP * *     tabLayoutPolicy: 选项卡位置不能放入所有的选项卡时，放置选项卡的策略， *                      值为 JTabbedPane.WRAP_TAB_LAYOUT 或 JTabbedPane.SCROLL_TAB_LAYOUT */</span><span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> tabPlacement<span class="token punctuation">)</span><span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token keyword">int</span> tabPlacement<span class="token punctuation">,</span> <span class="token keyword">int</span> tabLayoutPolicy<span class="token punctuation">)</span><span class="token comment">//代码示例：</span><span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token class-name">JTabbedPane</span><span class="token punctuation">.</span>TOP<span class="token punctuation">,</span><span class="token class-name">JTabbedPane</span><span class="token punctuation">.</span>WRAP_TAB_LAYOUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//================================创建选项卡相关================================</span><span class="token comment">/** * 参数说明: *     title: 选项卡的标题 *     icon: 选项卡的图标 *     tip: 当鼠标移到该选项卡时，悬浮提示的文本 *     component: 选中该选项卡时显示的内容组件 */</span>table<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">"选项卡1"</span><span class="token punctuation">,</span>icon<span class="token punctuation">,</span>panel<span class="token punctuation">,</span><span class="token string">"这是一段提示语"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">addTab</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">addTab</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">Icon</span> icon<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">addTab</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">Icon</span> icon<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">String</span> tip<span class="token punctuation">)</span><span class="token comment">/** * 在指定索引位置插入一个选项卡 */</span><span class="token keyword">void</span> <span class="token function">insertTab</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">Icon</span> icon<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">String</span> tip<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token comment">//==============================移除选项卡相关===================================</span><span class="token comment">// 移除指定位置的选项（下面两个方法完全一致）</span><span class="token keyword">void</span> <span class="token function">removeTabAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token comment">// 移除指定内容控件的选项卡</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span><span class="token comment">// 移除所有选项卡</span><span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//=============================选项卡相关操作====================================</span>    <span class="token comment">// 设置当前选中的选项卡</span><span class="token keyword">void</span> <span class="token function">setSelectedIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token comment">// 获取当前选中的选项卡索引</span><span class="token keyword">int</span> <span class="token function">getSelectedIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取当前选中的选项卡对应的内容组件</span><span class="token class-name">Component</span> <span class="token function">getSelectedComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置 index 位置的选项卡的标题</span><span class="token keyword">void</span> <span class="token function">setTitleAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token comment">// 设置 index 位置的选项卡的图标</span><span class="token keyword">void</span> <span class="token function">setIconAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Icon</span> icon<span class="token punctuation">)</span><span class="token comment">// 设置 index 位置的选项卡是否可用</span><span class="token keyword">void</span> <span class="token function">setEnabledAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span><span class="token comment">// 将 index 位置的内容组件设置为 component</span><span class="token keyword">void</span> <span class="token function">setComponentAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Component</span> component<span class="token punctuation">)</span><span class="token comment">// 获取选项卡的数量</span><span class="token keyword">int</span> <span class="token function">getTabCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/** * 自定义选项卡标题位置的组件, 这里的 titleComponent 将放到选项卡标题位置。 * 应用场景: 例如, 在选项卡标题位置添加一个关闭按钮, 点击按钮移除选项卡。 */</span><span class="token keyword">void</span> <span class="token function">setTabComponentAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Component</span> titleComponent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//==================状态监听器===================</span><span class="token class-name">JTabbledPane</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTabbledPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//监听后具体处理操作      </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">JTabbedPane</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建选项卡</span>table<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">"Tab1"</span><span class="token punctuation">,</span> <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token string">"Tab01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">"Tab02"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"bb.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token string">"TAB 02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建第 3 个选项卡（选项卡包含 标题、图标 和 tip提示）</span>        table<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">"Tab03"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"bb.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token string">"TAB 03"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"This is a tab."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">addChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateChanged</span><span class="token punctuation">(</span><span class="token class-name">ChangeEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前选中的选项卡"</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">getSelectedIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">setSelectedIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Component</span> <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>label<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>label<span class="token punctuation">.</span><span class="token function">setHorizontalTextPosition</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> panel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="层级面板：JLayredPane"><a href="#层级面板：JLayredPane" class="headerlink" title="层级面板：JLayredPane"></a>层级面板：JLayredPane</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个层及面部</span><span class="token class-name">JLayeredPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//代码示例</span><span class="token class-name">JLayeredPane</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLayeredPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*添加组件到指定的层（默认放到层内最底部），参数说明: *     comp: 待添加的组件 *     layer: 所在的层, 层数是int类型, 由于该方法与另一个 add(Component, int) 方法类似, 直接使用会有冲突, 所以使 *            用该方法传递 layer 参数时, 必须使用 Integer 类型来明确调用的是下面 add(Component, Object) 方法。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void add(Component comp, Object layer)<br>void add(Component comp, Object layer, int position)</td><td><em>// 添加组件到指定的层和层内的位置</em></td></tr><tr><td>void setLayer(Component c, int layer)<br>void setLayer(Component c, int layer, int position)</td><td>// 设置组件所在层（默认放到层内最底部）<br>// 设置组件所在层，以及在层内的位置</td></tr><tr><td>void moveToFront(Component c)<br>void moveToBack(Component c)</td><td>// 移动组件到其所在层的最顶部位置<br>// 移动组件到其所在层的最底部位置</td></tr><tr><td>void setPosition(Component c, int position)</td><td>// 设置组件在其所在层的位置，其中 position 取值范围为: [-1, n - 1]，n 表示层内组件数量，其中 -1 表示最底，0 表示最顶</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JLayeredPane</span> layeredPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLayeredPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 层数: 100</span>        <span class="token class-name">JPanel</span> panel_100_1 <span class="token operator">=</span> <span class="token function">createPanel</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">,</span> <span class="token string">"L=100, P=1"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layeredPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel_100_1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 层数: 200, 层内位置: 0（层内顶部）</span>        <span class="token class-name">JPanel</span> panel_200_0 <span class="token operator">=</span> <span class="token function">createPanel</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GREEN<span class="token punctuation">,</span> <span class="token string">"L=200, P=0"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layeredPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel_200_0<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 层数: 200, 层内位置: 1</span>        <span class="token class-name">JPanel</span> panel_200_1 <span class="token operator">=</span> <span class="token function">createPanel</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>CYAN<span class="token punctuation">,</span> <span class="token string">"L=200, P=1"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layeredPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel_200_1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 层数: 300</span>        <span class="token class-name">JPanel</span> panel_300 <span class="token operator">=</span> <span class="token function">createPanel</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>YELLOW<span class="token punctuation">,</span> <span class="token string">"L=300"</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layeredPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel_300<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>layeredPane<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建一个面板容器（容器内包含一个水平方向居中, 垂直方向顶部对其的标签）     *     * @param bg 容器背景     * @param text 容器内标签显示的文本     * @param x 容器的横轴坐标     * @param y 容器的纵坐标     * @param width 容器的宽度     * @param height 容器的高度     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JPanel</span> <span class="token function">createPanel</span><span class="token punctuation">(</span><span class="token class-name">Color</span> bg<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        label<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        label<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>TOP<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> panel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对话框（JOptionPane）"><a href="#对话框（JOptionPane）" class="headerlink" title="对话框（JOptionPane）"></a>对话框（JOptionPane）</h2><p>父类构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 子类名<span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span>object message<span class="token punctuation">,</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="消息对话框：（showMessageDialog"><a href="#消息对话框：（showMessageDialog" class="headerlink" title="消息对话框：（showMessageDialog)"></a>消息对话框：（showMessageDialog)</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token keyword">public</span> staitc<span class="token punctuation">)</span> <span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span>object message<span class="token punctuation">,</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>parentComponent：用于确定显示消息对话框父窗口。并在父窗口中间显示</li><li>message：显示对话框提示信息</li><li>title：设置对话框标题栏内容</li><li>messageType：指定显示消息类型</li></ol><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"您输入了错误的字符"</span><span class="token punctuation">,</span><span class="token string">"消息对话框"</span><span class="token punctuation">,</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输入对话框：-showInputDialog"><a href="#输入对话框：-showInputDialog" class="headerlink" title="输入对话框：(showInputDialog)"></a>输入对话框：(showInputDialog)</h3><p>构造方法：方法的返回值是用户输入的字符串内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">static</span> string<span class="token punctuation">)</span><span class="token class-name">ShowInputDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span>object message<span class="token punctuation">,</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>parentComponent：用于确定显示消息对话框父窗口。并在父窗口中间显示</li><li>message：显示对话框提示信息</li><li>title：设置对话框标题栏内容</li><li>messageType：指定显示消息类型</li></ol><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"输入数字，用空格分隔"</span><span class="token punctuation">,</span><span class="token string">"这是标题"</span><span class="token punctuation">,</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>PLAIN_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="确认对话框：-showConfirmDialog"><a href="#确认对话框：-showConfirmDialog" class="headerlink" title="确认对话框：(showConfirmDialog)"></a>确认对话框：(showConfirmDialog)</h3><p>返回一个整数值常量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">static</span> string<span class="token punctuation">)</span><span class="token class-name">ShowConfirmDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span>object message<span class="token punctuation">,</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>parentComponent：用于确定显示消息对话框父窗口。并在父窗口中间显示</li><li>message：显示对话框提示信息</li><li>title：设置对话框标题栏内容</li><li>messageType：指定显示消息类型</li></ol><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">BorderLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"BoderLayout测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> demo <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showConfirmDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"确认是否正确"</span><span class="token punctuation">,</span><span class="token string">"标题"</span><span class="token punctuation">,</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>ERROR_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="颜色对话框：-JColorChooser-showDialog"><a href="#颜色对话框：-JColorChooser-showDialog" class="headerlink" title="颜色对话框：(JColorChooser.showDialog)"></a>颜色对话框：(JColorChooser.showDialog)</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Color</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token class-name">Color</span> initialColor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>parentComponent：用于确定显示消息对话框父窗口。并在父窗口中间显示</li><li>message：显示对话框提示信息</li><li>title：设置对话框标题栏内容</li><li>messageType：指定显示消息类型</li></ol><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">BorderLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"ColorDialog测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token class-name">JColorChooser</span><span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"测试标题"</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义对话框：-JDialog"><a href="#自定义对话框：-JDialog" class="headerlink" title="自定义对话框：(JDialog)"></a>自定义对话框：(JDialog)</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义的对话框 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDialog</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> textField<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> button<span class="token punctuation">;</span><span class="token comment">/** * 自定义构造函数必须有JFrame参数，否则窗口没有依托将不会显示 *  * @param frame * @param s */</span><span class="token keyword">public</span> <span class="token class-name">MyDialog</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span> frame<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// GUI部分</span><span class="token keyword">super</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显式调用父类构造函数</span>textField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>textField<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setModal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置为有模式对话框</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// setVisible(true);对话框事先不设置可视性，不可视。</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyDialog</span><span class="token punctuation">(</span><span class="token class-name">MyDialog</span> myDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myDialog <span class="token operator">=</span> myDialog<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">MyDialog</span> myDialog<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 开启这个自定义对话框</span>myDialog<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleWindow</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> button<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SimpleListener</span> listener<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">MyDialog</span> myDialog<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">SimpleWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//GUI部分</span> <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> button<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打开自定义窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span> myDialog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"这是一个自定义对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化这个自定义对话</span>框，虽然还未显示 <span class="token comment">//设置监听器</span> listener<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> listener<span class="token punctuation">.</span><span class="token function">setMyDialog</span><span class="token punctuation">(</span>myDialog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加监听器</span> button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SimpleWindow</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件处理机制：（Listener）"><a href="#事件处理机制：（Listener）" class="headerlink" title="事件处理机制：（Listener）"></a>事件处理机制：（Listener）</h2><h3 id="监听器三种写法-适配器Adapter："><a href="#监听器三种写法-适配器Adapter：" class="headerlink" title="监听器三种写法/适配器Adapter："></a>监听器三种写法/适配器Adapter：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//所有事件处理通用获取事件源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//监听器写法一：匿名类（最常用）</span><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformamed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//your code</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//监听器写法二：全称</span><span class="token comment">//创建一个自定义监听器</span> <span class="token keyword">private</span> btnlistener btnl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">btnlistener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>btnl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">class</span> btnlistener <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//Your Code Here   </span>        <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//监听器写法三：lamda表达式</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token comment">//your code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动作监听（ActionListener）："><a href="#动作监听（ActionListener）：" class="headerlink" title="动作监听（ActionListener）："></a>动作监听（ActionListener）：</h3><p>如果有多个组件都需要设置动作监听器，可以为它们设置同一个实例，再为组件绑定不同的动作命令（ActionCommand）来区分当前触发事件的组件。</p><ol><li>重写actionPerformed方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">String</span> COMMAND_OK <span class="token operator">=</span><span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> COMMAND_CANCEL<span class="token operator">=</span><span class="token string">"Cancel"</span><span class="token punctuation">;</span><span class="token class-name">ActionListener</span> listen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//e.getSource();  获取事件源，即触发事件按钮</span><span class="token class-name">String</span> command <span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>COMMAND_OK<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK按钮被点击"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>COMMAND_CANCEL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cancel按钮被点击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="焦点监听（FocusListener）："><a href="#焦点监听（FocusListener）：" class="headerlink" title="焦点监听（FocusListener）："></a>焦点监听（FocusListener）：</h3><p>支持组件：所有组件</p><ol><li>重写focusGained：（焦点聚焦时）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusGained</span><span class="token punctuation">(</span><span class="token class-name">FoucusEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>重写focusLost：（失去焦点时）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusLost</span><span class="token punctuation">(</span><span class="token class-name">FocusEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FocusListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusGained</span><span class="token punctuation">(</span><span class="token class-name">FocusEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得焦点: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusLost</span><span class="token punctuation">(</span><span class="token class-name">FocusEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"失去焦点: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JTextField</span> textField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textField<span class="token punctuation">.</span><span class="token function">addFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FocusListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusGained</span><span class="token punctuation">(</span><span class="token class-name">FocusEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得焦点: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focusLost</span><span class="token punctuation">(</span><span class="token class-name">FocusEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"失去焦点: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标监听（MouseListener）："><a href="#鼠标监听（MouseListener）：" class="headerlink" title="鼠标监听（MouseListener）："></a>鼠标监听（MouseListener）：</h3><p>监听鼠标的所在位置。</p><ol><li>重写方法：mouseEntered</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重写方法：mouseExited</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>重写方法：mousePressed</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>重写方法：mouseReleased</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>重写方法：mouseClicked</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标进入组件区域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标离开组建区域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取按下的坐标（相对于组件）</span>        e<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取按下的坐标（相对于屏幕）</span>        e<span class="token punctuation">.</span><span class="token function">getLocationOnScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">getXOnScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">getYOnScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断按下的是否是鼠标右键</span>        e<span class="token punctuation">.</span><span class="token function">isMetaDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标按下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标释放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 鼠标在组件区域内按下并释放（中间没有移动光标）才识别为被点击</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标点击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标移动-拖动监听（MouseMotionListener）："><a href="#鼠标移动-拖动监听（MouseMotionListener）：" class="headerlink" title="鼠标移动/拖动监听（MouseMotionListener）："></a>鼠标移动/拖动监听（MouseMotionListener）：</h3><p>监听鼠标移动和拖动</p><ol><li>重写方法：mouseDragged：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重写方法：mouseMoved：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseMotionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 鼠标保持按下状态移动即为拖动</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标拖动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标滚轮监听（MouseWheelListener）："><a href="#鼠标滚轮监听（MouseWheelListener）：" class="headerlink" title="鼠标滚轮监听（MouseWheelListener）："></a>鼠标滚轮监听（MouseWheelListener）：</h3><p>监听鼠标上下滚轮滑动情况：</p><ol><li>重写方法：mouseWheelMoved</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseWheelMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseWheelEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">addMouseWheelListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseWheelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseWheelMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseWheelEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// e.getWheelRotation() 为滚轮滚动多少的度量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mouseWheelMoved: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getWheelRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘监听器（KeyListener）："><a href="#键盘监听器（KeyListener）：" class="headerlink" title="键盘监听器（KeyListener）："></a>键盘监听器（KeyListener）：</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取键值，和 KeyEvent.VK_XXXX 常量比较确定所按下的按键</span>        <span class="token keyword">int</span> keyCode <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按下: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// e.getKeyChar() 获取键入的字符</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键入: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getKeyChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="窗口监听（WindowListener）："><a href="#窗口监听（WindowListener）：" class="headerlink" title="窗口监听（WindowListener）："></a>窗口监听（WindowListener）：</h3><p>支持组件：窗体类（JFrame、JDialog）</p><ol><li>重写方法：windowOpened（窗体打开时）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重写方法；windowClosing（窗体）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvente</span><span class="token operator">=</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>重写方法：windowClosed（窗体关闭时）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span>windowEvent e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>重写方法：windowIconified（窗体最小化==》正常状态）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowIconified</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>重写方法：windowActivated（窗体被激活时）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span>windowEvent e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>重写方法：windowDeactivated（窗体不再是活动状态时）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeactivated</span><span class="token punctuation">(</span>windowEvent e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowOpened: 窗口首次变为可见时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowClosing: 用户试图从窗口的系统菜单中关闭窗口时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowClosed: 窗口调用 dispose 而将其关闭时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowIconified</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowIconified: 窗口从正常状态变为最小化状态时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeiconified</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowDeiconified: 窗口从最小化状态变为正常状态时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowActivated: 窗口变为活动状态时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeactivated</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowDeactivated: 窗口变为不再是活动状态时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 窗口焦点监听器</span>frame<span class="token punctuation">.</span><span class="token function">addWindowFocusListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowFocusListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowGainedFocus</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowGainedFocus: 窗口得到焦点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowLostFocus</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowLostFocus: 窗口失去焦点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 窗口状态监听器</span>frame<span class="token punctuation">.</span><span class="token function">addWindowStateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowStateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowStateChanged</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"windowStateChanged: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getNewState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拖拽监听（DropTargetListener）："><a href="#拖拽监听（DropTargetListener）：" class="headerlink" title="拖拽监听（DropTargetListener）："></a>拖拽监听（DropTargetListener）：</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"测试窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">final</span> <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">JTextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea<span class="token punctuation">.</span><span class="token function">setLineWrap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DropTargetListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DropTargetListenerDemo</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建拖拽目标监听器</span>        <span class="token class-name">DropTargetListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DropTargetListener</span><span class="token punctuation">(</span>textArea<span class="token punctuation">,</span>ACTION_COPY_OR_MOVE<span class="token punctuation">,</span>listener<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token class-name">SetContentPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        fream<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DropTargetListenerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">DropTargetListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">JTextArea</span> textArea<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DropTargetListenerDemo</span><span class="token punctuation">(</span><span class="token class-name">JTextArea</span> textArea<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textArea <span class="token operator">=</span> textArea<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//自动生成的方法</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dragEnter</span><span class="token punctuation">(</span><span class="token class-name">DropTargetDragEvent</span> dtde<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dragEnter: 拖拽目标进入组件区域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dragOver</span><span class="token punctuation">(</span><span class="token class-name">DropTargetDragEvent</span> dtde<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dragOver: 拖拽目标在组件区域内移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dragExit</span><span class="token punctuation">(</span><span class="token class-name">DropTargetEvent</span> dte<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dragExit: 拖拽目标离开组件区域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dropActionChanged</span><span class="token punctuation">(</span><span class="token class-name">DropTargetDragEvent</span> dtde<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dropActionChanged: 当前 drop 操作被修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drop</span><span class="token punctuation">(</span><span class="token class-name">DropTargetDropEvent</span> dtde<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 一般情况下只需要关心此方法的回调</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"drop: 拖拽目标在组件区域内释放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">/*                 * 1. 文件: 判断拖拽目标是否支持文件列表数据（即拖拽的是否是文件或文件夹, 支持同时拖拽多个）                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dtde<span class="token punctuation">.</span><span class="token function">isDataFlavorSupported</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>javaFileListFlavor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 接收拖拽目标数据</span>                    dtde<span class="token punctuation">.</span><span class="token function">acceptDrop</span><span class="token punctuation">(</span><span class="token class-name">DnDConstants</span><span class="token punctuation">.</span>ACTION_COPY_OR_MOVE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    isAccept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment">// 以文件集合的形式获取数据</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> dtde<span class="token punctuation">.</span><span class="token function">getTransferable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransferData</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>javaFileListFlavor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 把文件路径输出到文本区域</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">StringBuilder</span> filePaths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            filePaths<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"文件: "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>filePaths<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">/*                 * 2. 文本: 判断拖拽目标是否支持文本数据（即拖拽的是否是文本内容, 或者是否支持以文本的形式获取）                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dtde<span class="token punctuation">.</span><span class="token function">isDataFlavorSupported</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>stringFlavor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 接收拖拽目标数据</span>                    dtde<span class="token punctuation">.</span><span class="token function">acceptDrop</span><span class="token punctuation">(</span><span class="token class-name">DnDConstants</span><span class="token punctuation">.</span>ACTION_COPY_OR_MOVE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    isAccept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> dtde<span class="token punctuation">.</span><span class="token function">getTransferable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransferData</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>stringFlavor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"文本: "</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">/*                 * 3. 图片: 判断拖拽目标是否支持图片数据。注意: 拖拽图片不是指以文件的形式拖拽图片文件,      *          而是指拖拽一个正在屏幕上显示的并且支持拖拽的图片（例如网页上显示的图片）。                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dtde<span class="token punctuation">.</span><span class="token function">isDataFlavorSupported</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>imageFlavor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 接收拖拽目标数据</span>                    dtde<span class="token punctuation">.</span><span class="token function">acceptDrop</span><span class="token punctuation">(</span><span class="token class-name">DnDConstants</span><span class="token punctuation">.</span>ACTION_COPY_OR_MOVE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    isAccept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment">// 以图片的形式获取数据</span>   <span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">)</span> dtde<span class="token punctuation">.</span><span class="token function">getTransferable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransferData</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>imageFlavor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取到 image 对象后, 可以对该图片进行相应的操作（例如: 用组件显示、图形变换、保存到本地等）,</span>                    <span class="token comment">// 这里只把图片的宽高输出到文本区域</span>       textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"图片: "</span> <span class="token operator">+</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" * "</span> <span class="token operator">+</span> image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 如果此次拖拽的数据是被接受的, 则必须设置拖拽完成（否则可能会看到拖拽目标返回原位置, 造成视觉上以为是不支持拖拽的错误效果）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAccept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                dtde<span class="token punctuation">.</span><span class="token function">dropComplete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特殊类："><a href="#特殊类：" class="headerlink" title="特殊类："></a>特殊类：</h2><h3 id="操作桌面应用：Desktop类："><a href="#操作桌面应用：Desktop类：" class="headerlink" title="操作桌面应用：Desktop类："></a>操作桌面应用：Desktop类：</h3><p>常用API：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>static boolean isDesktopSupported()</td><td>// 判断当前平台是否支持此类</td></tr><tr><td>static Desktop getDesktop()</td><td>// 获取与当前平台关联的 Desktop 实例</td></tr><tr><td>void browse(URI uri)<br>void open(File file)<br>void edit(File file)<br>void print(File file)</td><td>// 启动默认浏览器来显示 URI<br>// 启动关联应用程序来打开文件<br>// 启动关联编辑器应用程序并打开用于编辑的文件<br>// 使用关联应用程序的打印命令, 用本机桌面打印设备来打印文件</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 判断当前平台是否支持某一操作, 参数为以下值之一: *     Desktop.Action.OPEN: 打开动作 *     Desktop.Action.EDIT: 编辑动作 *     Desktop.Action.PRINT: 打印动作 *     Desktop.Action.MAIL: 邮件动作 *     Desktop.Action.BROWSE: 浏览器动作 */</span><span class="token keyword">boolean</span> <span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token class-name">Desktop</span><span class="token punctuation">.</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Desktop</span><span class="token punctuation">.</span>isDesktopSupport<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">Desktop</span> desktop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Desktop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          desktop<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span>URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"url地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          desktop<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打开文件地址</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前平台不支持Desktop类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="机器人：Robot类："><a href="#机器人：Robot类：" class="headerlink" title="机器人：Robot类："></a>机器人：Robot类：</h3><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建实例，如果平台不支持Robot，将抛出异常</span><span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给屏幕设备创建一个Robot（关于同时使用多个显示设备情况）</span><span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token class-name">GraphicsDevice</span> screen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代码示例</span><span class="token class-name">Robot</span> robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>void keyPress(int keycode)<br>void keyRelease(int keycode)</td><td>按下/释放键盘按键, 参数说明:<br> keycode: 键盘键值常量, 定义在 KeyEvent.VK_XXX 中</td></tr><tr><td>Color getPixelColor(int x, int y)</td><td>// 获取指定屏幕坐标处的像素颜色</td></tr><tr><td>BufferedImage createScreenCapture(Rectangle screenRect)</td><td>// 截屏, 截取指定的矩形区域</td></tr><tr><td>void mouseMove(int x, int y)</td><td>// 将鼠标指针移动到指定屏幕坐标</td></tr><tr><td>void mouseWheel(int wheelAmt)</td><td>// 在配有滚轮的鼠标上旋转滚轮</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 按下/释放一个或多个鼠标按钮, 参数说明: *     buttons: 鼠标按钮掩码, 一个或多个以下标志的组合: *              InputEvent.BUTTON1_MASK 鼠标左键 *              InputEvent.BUTTON2_MASK 鼠标中键 *              InputEvent.BUTTON3_MASK 鼠标右键 */</span><span class="token keyword">void</span> <span class="token function">mousePress</span><span class="token punctuation">(</span><span class="token keyword">int</span> buttons<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">mouseRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> buttons<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Robot</span> robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        robot<span class="token punctuation">.</span><span class="token function">setAutoWaitForIdle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//移动鼠标到指定屏幕坐标</span>        robot<span class="token punctuation">.</span><span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按下鼠标左键</span>        robot<span class="token punctuation">.</span><span class="token function">mousePress</span><span class="token punctuation">(</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span><span class="token class-name">Button1_MASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放鼠标左键</span>        robot<span class="token punctuation">.</span><span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span>BUTTON1_MASK<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统托盘：SystemTray："><a href="#系统托盘：SystemTray：" class="headerlink" title="系统托盘：SystemTray："></a>系统托盘：SystemTray：</h3><p>常用方法：</p><table><thead><tr><th>常用API</th><th>释义</th></tr></thead><tbody><tr><td>SystemTray.isSupported();</td><td>// 判断当前平台是否支持系统托盘</td></tr><tr><td>SystemTray.getSystemTray();</td><td>// 获取到当前平台的系统托盘</td></tr><tr><td>TrayIcon(Image image, String tooltip, PopupMenu popup);</td><td>// 创建一个托盘图标（这个图标就表示最小化后的应用），其中 popup 是点击托盘图标时弹出的菜单列表</td></tr><tr><td>trayIcon.setImageAutoSize(true);</td><td>// 设置自动调整图标大小以适应当前平台的托盘图标显示</td></tr><tr><td>tray.add(trayIcon);</td><td>// 添加托盘图标到系统托盘（一个应用程序可添加多个托盘图标）</td></tr><tr><td>// tray.remove(trayIcon);</td><td>从系统托盘移除图标</td></tr></tbody></table><p>监听器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加托盘图标的动作监听器（鼠标右键的点击监听）</span>trayIcon<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token class-name">ActionListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加托盘图标的鼠标监听器（包括鼠标所有按键的监听）</span>trayIcon<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token class-name">MouseListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">MenuItem</span> openitem<span class="token punctuation">,</span>exitItem<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PopupMenu</span> popupMenu<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token class-name">SwingUtilities</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">createGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createGUUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">900.900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">SystemTray</span><span class="token punctuation">.</span>isSupported<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//获取当前平台托盘</span>       <span class="token class-name">SystemTray</span> tray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemTray</span><span class="token punctuation">.</span><span class="token function">getSystemTray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       popupMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PopupMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       openItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       exitItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//创建托盘图标</span>    <span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TrayIcon</span> trayicon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrayIcon</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"默认显示文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trayicon<span class="token punctuation">.</span><span class="token function">setImageAutoSize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trayicon<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"托盘图标被点击"</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trayicon<span class="token punctuation">.</span><span class="token function">addMouseListenr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MoueseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//如不懂见上文事件处理机制</span>                <span class="token keyword">case</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">.</span>BUTTON1<span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"托盘图标被右击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">.</span>BUTTON2<span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"托盘图标被中击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">.</span>BUTTON3<span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"托盘图标被左击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">{</span>         tray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trayicon<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前系统不支持系统托盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="截屏：-CaptureScreen"><a href="#截屏：-CaptureScreen" class="headerlink" title="截屏：(CaptureScreen)"></a>截屏：(CaptureScreen)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiets<span class="token punctuation">.</span>capturedemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span></span><span class="token class-name">ImageIO</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">BufferedImage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取屏幕尺寸</span>        <span class="token class-name">Dimension</span> screenSize <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScreenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建需要截取的矩形区域</span>        <span class="token class-name">Rectangle</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> screenSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> screenSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 截屏操作</span>        <span class="token class-name">BufferedImage</span> bufImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createScreenCapture</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保存截取的图片</span>        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufImage<span class="token punctuation">,</span> <span class="token string">"PNG"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"capture.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剪切板（ClipBoard"><a href="#剪切板（ClipBoard" class="headerlink" title="剪切板（ClipBoard)"></a>剪切板（ClipBoard)</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Toolkit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span><span class="token class-name">Clipboard</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span><span class="token class-name">DataFlavor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span><span class="token class-name">StringSelection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>datatransfer<span class="token punctuation">.</span></span><span class="token class-name">Transferable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token function">setClipboardString</span><span class="token punctuation">(</span><span class="token string">"Hello System Clipboard!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token function">getClipboardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"text: "</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 把文本设置到剪贴板（复制）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setClipboardString</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Clipboard</span> clipboard <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transferable</span> trans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringSelection</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        clipboard<span class="token punctuation">.</span><span class="token function">setContents</span><span class="token punctuation">(</span>trans<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 从剪贴板中获取文本（粘贴）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getClipboardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取系统剪贴板</span>        <span class="token class-name">Clipboard</span> clipboard <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取剪贴板中的内容</span>        <span class="token class-name">Transferable</span> trans <span class="token operator">=</span> clipboard<span class="token punctuation">.</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 判断剪贴板中的内容是否支持文本</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trans<span class="token punctuation">.</span><span class="token function">isDataFlavorSupported</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>stringFlavor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// 获取剪贴板中的文本内容</span>                    <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> trans<span class="token punctuation">.</span><span class="token function">getTransferData</span><span class="token punctuation">(</span><span class="token class-name">DataFlavor</span><span class="token punctuation">.</span>stringFlavor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> text<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="制作软件技巧与经验："><a href="#制作软件技巧与经验：" class="headerlink" title="制作软件技巧与经验："></a>制作软件技巧与经验：</h2><h3 id="背景图片添加："><a href="#背景图片添加：" class="headerlink" title="背景图片添加："></a>背景图片添加：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> createImage<span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JPanel</span> <span class="token function">createBgImgJpanel</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">,</span><span class="token class-name">String</span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">JPanel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>l       panel<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ImageIcon</span> imageicon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>imgsrc<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>imageicon<span class="token punctuation">)</span><span class="token punctuation">;</span>       label<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>       panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> panel<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//使用方法：</span>  <span class="token class-name">JPanel</span> panel <span class="token operator">=</span><span class="token function">createBgImgpanel</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"这是一段文字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作者的话："><a href="#作者的话：" class="headerlink" title="作者的话："></a>作者的话：</h2><ol><li>完成Swing的图形化界面学习不过两个月，但是完成这份笔记和知识的输出则耗费长达一个月时间。暑假期间不定期更新博客。</li><li>创作之初还是考虑只写关键改动部分代码来节约读者阅读时间。考虑到大部分读者像我当初刚入门的模样，还是方便读者学习代码使用把代码贴上去。</li><li>熟能生巧固无错，但是整个逻辑结构要牢固。像编程一样敲码之初就应该有思路想法。</li><li>Swing已经属于被淘汰的技术，为什么要学，一口吃不成胖子。在学习其他语言GUI界面或者接触框架时仍能从Swing的学习中获取灵感与相似点。</li><li>更新博客内容后续会引入公告栏后续的内容添加方便读者阅读</li></ol><p>引用材料：</p><ol><li><a href="https://blog.csdn.net/xietansheng/article/details/72814492"></a>Java Swing 图形界面开发（目录）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 图形化界面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于站长</title>
      <link href="posts/d7480a9.html"/>
      <url>posts/d7480a9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网站简介："><a href="#网站简介：" class="headerlink" title="网站简介："></a>网站简介：</h1><p>网站定位：</p><ul><li>技术型博客：将晦涩知识转变为通俗易懂的知识，同时分享工作中复用性高的代码。提高工作效率</li><li>实用性博客：制作软件、信息采集、制作个性化智能家居，让读者能切身感受编程带来便利。</li><li>成长型博客：阶梯式的教程，助力萌新程序员快速融入圈子。</li></ul><h2 id="站长个人技能树："><a href="#站长个人技能树：" class="headerlink" title="站长个人技能树："></a>站长个人技能树：</h2><p>专业性学科：计算机导论、linux操作系统、计算机图形学、数据结构与算法、设计模式</p><p>编程语言：</p><ul><li>前端语言：HTML、CSS、JavaScript、JSP、JQuery</li><li>后端语言：JAVA、C#、lua、Arduino、STM32、Python</li></ul><p>引擎：</p><p>mysql、中间件</p><p>SSM（Spring + SpringMVC + Mybatis）、Springboot、</p><p>Unity（Animation、ShaderLab、Mesh）</p><p>辅助性工具：</p><p>图像工具：PS、Live2D</p><p>视频工具：PR</p><h2 id="项目进展："><a href="#项目进展：" class="headerlink" title="项目进展："></a>项目进展：</h2><h3 id="JAVA："><a href="#JAVA：" class="headerlink" title="JAVA："></a>JAVA：</h3><ol><li>java批量添加水印：</li><li>捕鱼达人游戏：</li></ol><h3 id="C-："><a href="#C-：" class="headerlink" title="C#："></a>C#：</h3><h3 id="Unity："><a href="#Unity：" class="headerlink" title="Unity："></a>Unity：</h3><ol><li>2048：</li><li></li></ol><h2 id="关于站长："><a href="#关于站长：" class="headerlink" title="关于站长："></a>关于站长：</h2><p>前置要求：在做到尊重他人、不情绪化表达条件下，先阅读《提问的智慧》</p><p><a href="https://lug.ustc.edu.cn/wiki/doc/smart-questions/#q8">提问的智慧 - LUG @ USTC</a></p><h3 id="技术问题："><a href="#技术问题：" class="headerlink" title="技术问题："></a>技术问题：</h3><h3 id="项目Issue："><a href="#项目Issue：" class="headerlink" title="项目Issue："></a>项目Issue：</h3><ol><li>Github提issue或添加新功能的需求</li><li>将问题整理后确认现有搜索引擎无法解决你的问题发送到QQ邮箱</li></ol><h3 id="禁区红线："><a href="#禁区红线：" class="headerlink" title="禁区红线："></a>禁区红线：</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 站长个人简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML知识体系</title>
      <link href="posts/b110a111.html"/>
      <url>posts/b110a111.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML知识体系："><a href="#HTML知识体系：" class="headerlink" title="HTML知识体系："></a>HTML知识体系：</h1><p>基本形式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>这是元素标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--网页主题内容--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Font：字体（完成）"><a href="#Font：字体（完成）" class="headerlink" title="Font：字体（完成）"></a>Font：字体（完成）</h2><p>常用API：</p><ol><li>color：文字显示颜色</li><li>size：文字显示大小</li></ol><h3 id="基于物理样式的文本元素："><a href="#基于物理样式的文本元素：" class="headerlink" title="基于物理样式的文本元素："></a>基于物理样式的文本元素：</h3><ol><li>加粗文字：<b> bold 加粗</b></li><b><li>放大元素：<big> </big></li><big><li>缩小元素：<small></small></li><small><li>斜体元素：<i> italics</i></li><i><li>下标元素：<sub></sub></li><li>上标元素：<sup></sup></li><li>等框元素：<tt></tt></li><tt><li>删除字：&lt; del&gt;</li></tt></i></small></big></b></ol><b><big><small><i><tt><h3 id="基于内容样式的文本元素："><a href="#基于内容样式的文本元素：" class="headerlink" title="基于内容样式的文本元素："></a>基于内容样式的文本元素：</h3><ol><li>强调元素：&lt; em&gt;</li><li>文字加粗：&lt; strong&gt;</li><li>提取元素：&lt; samp&gt;</li><li>首字母缩写符：&lt; acronym&gt;</li><li>变量显示元素：&lt; var&gt;</li><li>文献参考元素：&lt; cite&gt;</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--复制这一段代码到编译器或者txt文本上试一试效果吧!--&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>  这是网页显示标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>这是一段加粗文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>这同样也是一段加粗文字哦！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>这是一段斜体文字哦！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>这是一段被加粗的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>这是上标元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>这是下标元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span>这是等框元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Image：图片（完成）"><a href="#Image：图片（完成）" class="headerlink" title="Image：图片（完成）"></a>Image：图片（完成）</h2><h3 id="图像元素-lt-img-gt-："><a href="#图像元素-lt-img-gt-：" class="headerlink" title="图像元素< img>："></a>图像元素&lt; img&gt;：</h3><ol><li>border：边框</li><li>align：对齐方式</li><li>src ：文件地址</li><li>alt：图片未加载替换文本</li><li>style：浮动图像位置（可用css替换） style = “float:left” / style = “float:right”</li><li>usemap：定义图像名称  </li><li>href 图像链接</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这里填url图片地址<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span>  <span class="token punctuation">"</span>文件url地址<span class="token punctuation">"</span></span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>330px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>测试<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图像地图：-lt-map-gt"><a href="#图像地图：-lt-map-gt" class="headerlink" title="图像地图：< map>"></a>图像地图：&lt; map&gt;</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planets.gif<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>145<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>126<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Planets<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#planetmap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planetmap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,82,126<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sun<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sun.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90,58,3<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mercury<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mercur.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>124,58,8<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Venus<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>venus.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可点击图像-lt-area-gt-："><a href="#可点击图像-lt-area-gt-：" class="headerlink" title="可点击图像< area>："></a>可点击图像&lt; area&gt;：</h3><p>特殊属性：</p><ol><li>coords：规定区域坐标</li><li>shape：规定区域的形状</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planets.gif<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>145<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>126<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Planets<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#planetmap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planetmap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,82,126<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sun<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sun.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90,58,3<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mercury<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mercur.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>124,58,8<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Venus<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>venus.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="href：链接（完成）"><a href="#href：链接（完成）" class="headerlink" title="href：链接（完成）"></a>href：链接（完成）</h2><p>&lt; a&gt; 标签定义超链接，用于从一个页面链接到另一个页面。</p><p>&lt; a&gt; 元素最重要的属性是 href 属性，它指定链接的目标。</p><p>在所有浏览器中，链接的默认外观如下：</p><ul><li>未被访问的链接带有下划线而且是蓝色的</li><li>已被访问的链接带有下划线而且是紫色的</li><li>活动链接带有下划线而且是红色的</li></ul><p>父类属性：</p><ol><li>href 规定链接目标url</li><li>download：指定下载链接</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>图像url<span class="token punctuation">"</span></span> <span class="token attr-name">download</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>图像url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>网址url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="video：音频（完成）"><a href="#video：音频（完成）" class="headerlink" title="video：音频（完成）"></a>video：音频（完成）</h2><h3 id="视频元素：-lt-video-gt"><a href="#视频元素：-lt-video-gt" class="headerlink" title="视频元素：< video>"></a>视频元素：&lt; video&gt;</h3><ol><li>src： 文件地址</li><li>controls：提供添加播放、暂停音量插件。</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>movie.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>movie.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="音频元素：-lt-audio-gt"><a href="#音频元素：-lt-audio-gt" class="headerlink" title="音频元素：< audio>"></a>音频元素：&lt; audio&gt;</h3><ol><li>autoplay：音乐就绪后马上播放</li><li>loop：循环播放</li><li>controls：显示音频控件</li><li>src 文件url</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>horse.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> &lt;source src = “horse.mp3" type = "audio.mpeg"&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="音频元素：-lt-object-gt-lt-embed-gt"><a href="#音频元素：-lt-object-gt-lt-embed-gt" class="headerlink" title="音频元素：< object> < embed>"></a>音频元素：&lt; object&gt; &lt; embed&gt;</h3><ol><li>data：元素url位置</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>intro.swf<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>embed</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>intro.swf<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> &lt; embed&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="list：列表：（完成）"><a href="#list：列表：（完成）" class="headerlink" title="list：列表：（完成）"></a>list：列表：（完成）</h2><h3 id="有序列表：-lt-ol-gt"><a href="#有序列表：-lt-ol-gt" class="headerlink" title="有序列表：< ol>"></a>有序列表：&lt; ol&gt;</h3><p>常用API：</p><ol><li>start：指定列表编号起始值</li><li>type：规定列表的类型，不赞成使用。请样式替代</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">start</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1. 测试元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2. 测试元素2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3. 测试元素3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>测试元素1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>测试元素2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>测试元素3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无序列表：-lt-ul-gt"><a href="#无序列表：-lt-ul-gt" class="headerlink" title="无序列表：< ul>"></a>无序列表：&lt; ul&gt;</h3><h3 id="列表项：-lt-li-gt"><a href="#列表项：-lt-li-gt" class="headerlink" title="列表项：< li>"></a>列表项：&lt; li&gt;</h3><p>常用API：</p><ol><li>compact：规定列表呈现效果比正常情况更小巧</li><li>type：规定列表的项目符号的类型<ul><li>disc：默认值，实心圆</li><li>circle：空心圆</li><li>square：实心方块</li></ul></li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>列表测试功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> circle</span><span class="token punctuation">&gt;</span></span>测试元素1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>测试元素2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>测试元素3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="marquee：滚动字幕"><a href="#marquee：滚动字幕" class="headerlink" title="marquee：滚动字幕"></a>marquee：滚动字幕</h2><p>常用API：</p><ol><li>direction：</li><li></li></ol><p>代码示例：</p><h1 id="GUI：表单-表格：（完成）"><a href="#GUI：表单-表格：（完成）" class="headerlink" title="GUI：表单/表格：（完成）"></a>GUI：表单/表格：（完成）</h1><h2 id="Form：表单"><a href="#Form：表单" class="headerlink" title="Form：表单"></a>Form：表单</h2><p>父类属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">type：规定显示<span class="token generics"><span class="token punctuation">&lt;</span>input<span class="token punctuation">&gt;</span></span> 元素控件name：用在<span class="token class-name">JavaScript</span>中引用元素，或者在表单提交后引用表单数据，   注意：只有设置name属性表单元素才能提交表单时传递他们的值<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>标记name是前端好习惯之一<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value <span class="token operator">=</span><span class="token string">"按钮显示文本"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>action：数据发送给指定服务器 <span class="token operator">&lt;</span>form action <span class="token operator">=</span> <span class="token string">"服务器名称"</span><span class="token operator">&gt;</span>value：初始显示文字width、height：控件长宽size：长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本类：-lt-text-gt"><a href="#文本类：-lt-text-gt" class="headerlink" title="文本类：< text>"></a>文本类：&lt; text&gt;</h3><h4 id="文本框-lt-textarea-gt-："><a href="#文本框-lt-textarea-gt-：" class="headerlink" title="文本框 < textarea>："></a>文本框 &lt; textarea&gt;：</h4><p>特殊属性：</p><ol><li>cols：文本区域长</li><li>rows：文本区域宽</li><li>disabled：被禁用文本区域既不可用，文本也不可选择，可以设置复选框。</li><li>wrap：换行     soft/hard</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">disabled</span> <span class="token attr-name">cols</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文本栏显示文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="文本条-lt-text-gt-："><a href="#文本条-lt-text-gt-：" class="headerlink" title="文本条 < text>："></a>文本条 &lt; text&gt;：</h4><p>常规属性：</p><ol><li>size / width：文本条长度</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Fist Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>fistName<span class="token punctuation">"</span></span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">height</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   Last Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>LastName<span class="token punctuation">"</span></span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">height</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="文本域-lt-textField-gt-："><a href="#文本域-lt-textField-gt-：" class="headerlink" title="文本域 < textField >："></a>文本域 &lt; textField &gt;：</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    这是一段默认显示文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textField<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">height</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="密码字段：-lt-password-gt"><a href="#密码字段：-lt-password-gt" class="headerlink" title="密码字段：< password>"></a>密码字段：&lt; password&gt;</h4><p>常规属性：</p><ol><li>size：密码框长度</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="按钮类：-lt-button-gt"><a href="#按钮类：-lt-button-gt" class="headerlink" title="按钮类：< button>"></a>按钮类：&lt; button&gt;</h3><h4 id="按钮：-lt-button-gt-："><a href="#按钮：-lt-button-gt-：" class="headerlink" title="按钮： < button>："></a>按钮： &lt; button&gt;：</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt; form action = ""&gt;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>按钮上的文字<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单选按钮：-lt-radio-gt-："><a href="#单选按钮：-lt-radio-gt-：" class="headerlink" title="单选按钮： < radio>："></a>单选按钮： &lt; radio&gt;：</h4><p>属性：</p><p>继承常规属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="复选框：-lt-checkbox-gt-："><a href="#复选框：-lt-checkbox-gt-：" class="headerlink" title="复选框：< checkbox>："></a>复选框：&lt; checkbox&gt;：</h4><p>常规属性：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vehicle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bike<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我喜欢自行车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vehicle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Car<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我喜欢小汽车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="标签元素：-lt-Label-gt"><a href="#标签元素：-lt-Label-gt" class="headerlink" title="标签元素：< Label>"></a>标签元素：&lt; Label&gt;</h4><p>特殊属性：</p><ol><li>for：规定label与哪个表单元素绑定</li><li>form：规定label字段所属一个或多个表单</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下拉列表：-lt-select-gt-嵌套-lt-option-gt"><a href="#下拉列表：-lt-select-gt-嵌套-lt-option-gt" class="headerlink" title="下拉列表：< select>嵌套 < option>"></a>下拉列表：&lt; select&gt;嵌套 &lt; option&gt;</h4><p>特殊属性：&lt; select name/multiple &gt;</p><ol start="2"><li>name：下拉列表的名称</li><li>multiple：多选  &lt; select name = “cars” size= “3”&gt;</li><li>size：下拉列表中可见选项数目</li><li>autofocus：自动聚焦</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">size</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>第一个元素<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 首个元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>第二个元素<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 次号元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML特有控件："><a href="#HTML特有控件：" class="headerlink" title="HTML特有控件："></a>HTML特有控件：</h3><h4 id="提交按钮：-lt-submit-gt"><a href="#提交按钮：-lt-submit-gt" class="headerlink" title="提交按钮： < submit>"></a>提交按钮： &lt; submit&gt;</h4><p>常规属性：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>Fist Name:&lt;input type = "submit" value <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="表单边框：-lt-fieldset-gt"><a href="#表单边框：-lt-fieldset-gt" class="headerlink" title="表单边框：< fieldset>"></a>表单边框：&lt; fieldset&gt;</h4><p>常规属性：</p><ol><li><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span> 表单外围文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--legend 标题--&gt;</span>    Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    E-mail:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>公共控件：&lt; input&gt;</p><h2 id="Table：表格（完成）"><a href="#Table：表格（完成）" class="headerlink" title="Table：表格（完成）"></a>Table：表格（完成）</h2><h3 id="表格：-lt-table-gt"><a href="#表格：-lt-table-gt" class="headerlink" title="表格：< table>"></a>表格：&lt; table&gt;</h3><ol><li>bordercolor：颜色边框</li><li>border：边框属性  </li><li>cols：列属性  </li><li>cellspacing：单元格空白</li><li>cellpadding：单元格间距</li><li>align：对齐方式</li><li>bgcolor 背景颜色</li></ol><h4 id="表格常用元素"><a href="#表格常用元素" class="headerlink" title="表格常用元素"></a>表格常用元素</h4><ol><li>&lt; th&gt;：表格表头   tabel head</li><li>&lt; tr&gt;：表格行  table row</li><li>&lt; td&gt; 单元格  table data<ul><li>colspan：单元格可横跨行数</li><li>rowspan：单元格可纵跨行数</li><li>align：对齐方式</li><li>width/ height：宽度</li><li>cellspacing：单元格空白</li><li>cellpadding：单元格间距</li></ul></li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>table测试功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span> 这是表头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>这是表头元素2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>这是单元格第一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>这是单元格第二行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他表格属性："><a href="#其他表格属性：" class="headerlink" title="其他表格属性："></a>其他表格属性：</h4><ol><li>&lt; thead&gt;  页眉thead {color:green}      <!--建议使用css布局--></li><li>&lt; tfoot&gt;  页脚 tfoot { color:red}</li><li>&lt; tbody&gt;  主体</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> 网站功能Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">thead</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">tbody</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">tfoot</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>Month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>Savings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Sum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$180<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>January<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>February<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Frames：内联框架"><a href="#Frames：内联框架" class="headerlink" title="Frames：内联框架"></a>Frames：内联框架</h2><h3 id="框架：-lt-frame-gt"><a href="#框架：-lt-frame-gt" class="headerlink" title="框架：< frame>"></a>框架：&lt; frame&gt;</h3><p>常用API：</p><ol><li>frameborder：框架周围是否显示边框<ul><li>0/1：frameborder =”1”</li></ul></li><li>marginheight：框架上方和下方的比啊努努</li><li>marginwidth：框架左侧和右侧边距</li><li>name：规定框架名称</li><li>noresize：规定无法调整框架大小</li><li>scrolling：框架中是否显示滚动滚动条<ul><li>yes/no/auto：</li></ul></li><li>src：规定框架中显示的文档的url</li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>frame框架功能测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20%,*<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.html<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--  &lt;frame src="01.html" /&gt; --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20%,*<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--此部分内容替换了上面frame的位置内容--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left.html<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right.html<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不支持框架显示文本-lt-noframe-gt"><a href="#不支持框架显示文本-lt-noframe-gt" class="headerlink" title="不支持框架显示文本< noframe>"></a>不支持框架显示文本&lt; noframe&gt;</h3><table><thead><tr><th>onclick</th><th><em>script</em></th><th>当鼠标被单击时执行脚本</th></tr></thead><tbody><tr><td>ondblclick</td><td><em>script</em></td><td>当鼠标被双击时执行脚本</td></tr><tr><td>onmousedown</td><td><em>script</em></td><td>当鼠标按钮被按下时执行脚本</td></tr><tr><td>onmousemove</td><td><em>script</em></td><td>当鼠标指针移动时执行脚本</td></tr><tr><td>onmouseout</td><td><em>script</em></td><td>当鼠标指针移出某元素时执行脚本</td></tr><tr><td>onmouseover</td><td><em>script</em></td><td>当鼠标指针悬停于某元素之上时执行脚本</td></tr><tr><td>onmouseup</td><td><em>script</em></td><td>当鼠标按钮被松开时执行脚本</td></tr><tr><td>onkeydown</td><td><em>script</em></td><td>当键盘被按下时执行脚本</td></tr><tr><td>onkeypress</td><td><em>script</em></td><td>当键盘被按下后又松开时执行脚本</td></tr><tr><td>onkeyup</td><td><em>script</em></td><td>当键盘被松开时执行脚本</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>框架显示文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frame</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx2.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frame</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noframe</span><span class="token punctuation">&gt;</span></span>该浏览器不支持框架显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noframe</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="框架集：-lt-frameset-gt"><a href="#框架集：-lt-frameset-gt" class="headerlink" title="框架集：< frameset>"></a>框架集：&lt; frameset&gt;</h3><p>常用API：</p><ol><li><p>cols：规定框架集中的列的数目和尺寸</p></li><li><p>rows：规定框架集中行的数目和尺寸</p><p>共有：</p><ul><li>pixels（像素点） 100px  </li><li>可用控件：5%，</li><li>*可用控件的剩余部分会分配给该列</li></ul></li></ol><p>代码示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>frameset测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25%,*,25%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>frame_a.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>frame_b.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>frame_c.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内联标签：-lt-iframe-gt"><a href="#内联标签：-lt-iframe-gt" class="headerlink" title="内联标签：< iframe>"></a>内联标签：&lt; iframe&gt;</h4><ol><li>限制大小：width height</li><li>对齐方式：align </li><li>边框大小； frameborder = “0”</li><li>下拉列表长宽：marginheight = “50” \ marginwidth = “50”</li><li>显示文档src： src = “url”</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Frame内联框架测试功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></tt></i></small></big></b>]]></content>
      
      
      <categories>
          
          <category> 前端编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端三件套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反叛公司经验</title>
      <link href="posts/b9f82a38.html"/>
      <url>posts/b9f82a38.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="阅读目录"><a href="#阅读目录" class="headerlink" title="阅读目录"></a>阅读目录</h1><ol><li><a href="#jump1">游戏元素</a></li><li><a href="#jump2">民生面板</a></li><li><a href="#jump3">政府面板</a></li><li><a href="#jump4">军事面板</a></li><li><a href="#jump5">叛军面板以及战术选择</a></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/2a20042bdb722943.png" alt="排行榜位置"></p><h2 id="游戏元素"><a href="#游戏元素" class="headerlink" title="游戏元素"></a><span id="jump1">游戏元素</span></h2><ul><li><strong>支持度</strong></li></ul><ol><li>全局支持度：（绿条）整个地区的支持度水平，无地区也会绿化就是因为全局支持度高。与公关水平有关</li><li>当地支持度：当项目落实到该地区会增加当地支持度，并逐步转向支持者。</li><li>支持度会在行动界面以绿色的数值显示来给玩家作为参考，支持度的主要作用以分区的当地支持度为准</li><li>维和行动中将中立者转化为支持者的速度，在游戏中用绿色数值表示。数值越高，中立者转化为支持者的速度越快。</li><li>敌对者会减慢支持者转化的速度，并且支持度对敌对者作用不大。（得投资对敌对者项目）</li></ol><ul><li><strong>腐败</strong></li></ul><ol><li>腐败风险:投资项目时可预览所滋生风险，投资高校采购可减少项目滋生腐败风险，并减少当前腐败风险，但后续投资项目价格+1。（除去蓝色计划项目和部分绿色计划项目）如普遍正义</li><li>腐败水平:腐败水平会跟随腐败风险逐渐上升。腐败水平按照百分比扣除当下支持度并缓慢扣除声望，腐败水平60%以上声望每月1点以上扣除</li></ol><ul><li><strong>通货膨胀</strong></li></ul><ol><li>影响计划项目价格的最主要因素之一，会随着玩家购买计划项目而增加，尤其是同一面板下的项目。民生、政府、军事（叛军）各个面板独立影响通货膨胀</li><li>一段时间内购买的越多，增加的通货膨胀水平也会越高。</li><li>会导致绿色的计划项目涨价，最好将通货膨胀控制在较低的水平</li></ol><ul><li><strong>敌意</strong></li></ul><ol><li>支持者《=》中立者《=》敌对者</li><li>敌对者显著影响着维稳难度，敌对者少意味维稳难度低。支持度对敌对者没什么作用，需投资针对敌对者的项目</li><li>叛军占领红区、正在攻击分区、附近分区敌意上涨敌对者增加，</li><li>敌意过高会导致原本绿区稳定进程倒退并扣除稳定声望</li></ol><ul><li><strong>地图基础属性</strong>（年收入属性） 颜色越深代表人口越多道路交通越好</li><li>红色为推荐开局地：</li></ul><p>考虑因素有：绿化难度以及周围绿化难度、情报收集度、当地交通</p><ul><li>黄色为堡垒推荐设置地：（难度越高，堡垒内置cd越长，堡垒选址尤为重要）</li></ul><p>考虑因素有：绿化难度、叛军营地位置最大限制、围剿叛军时位置</p><ul><li>军事恐吓：</li></ul><p>理由：在黄色区域没有碉堡的情况下，把联合军当碉堡使，吓唬对手营地放在你想让它出现的位置。</p><ol><li>昏黄平原（-20%)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/79d4ca26ee79ab1b.jpg"></p><ul><li>人口比例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgtp.apqiang.com/2022/03/27/9J4yuLZY.png"></p><ul><li>地区交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgtp.apqiang.com/2022/03/27/8EWhk9vx.jpg"></p><ul><li>推荐开局点</li></ul><ol><li>中间城市：有初始支持者（63），方便支援，是整个地图中最关键的地方，叛军占领此地可向两路分兵进攻。</li><li>最大城市，可守住左下角城市群避免叛军活动直接影响声望，且有初始支持者，维稳难度较高。</li><li>主干农村：维稳难度较低，且方便支援，是较为理想的开局地。</li></ol><ul><li>推荐堡垒点</li><li>为图中所示</li></ul><ol start="2"><li>险要山隘 (+0%)：所有图中叛军发难最晚的</li></ol><ul><li>人口比例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/4d46f49a82ef4243.png"></p><ul><li>道路交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/78d3ad99880501ba.jpg"></p><ul><li>推荐开局点：</li><li>中间位置1：</li></ul><ol><li>理由：开局点出二级眼后叛军到来前可获取所有地区的情报，在爆出第一波叛军就能通过肉眼察觉出叛军营地位置配合无人机空袭炸毁。而且绿化难度低，敌对人口占3%。推荐开局修高速</li></ol><ul><li>最大城市：</li></ul><p>理由：有初始支持者，且右边地区同样为易绿化地区，<del>防止对面不讲武德偷袭</del></p><ul><li>堡垒推荐点：</li></ul><p>理由：可最大程度限制叛军营地位置，当然也牺牲了通过堡垒民事支持来降低维稳的难度，得从长远考虑。</p><ol start="3"><li>南部沙漠（-10%)</li></ol><ul><li>人口比例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/f5542737290ee5ee.png"></p><ul><li>地区交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/9c5209f3b343e6e9.jpg"></p><ul><li>推荐开局地</li></ul><p>（1）理由：绿化难度低及周围绿化难度低，开局修主干道路便于支援。</p><ul><li>推荐堡垒地：</li></ul><p>（1）四个堡垒可完全检测叛军营地位置，尤其是山上的堡垒限制对手叛军在点出远端部署攻击两座城市后或者到偏远地区流窜。</p><ol start="4"><li>浅绿森林：（+13%)</li></ol><ul><li>人口比例：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/af1113cf2a36cf39.png"></p><ul><li>地区交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/4fdc3800d1555069.jpg"></p><ul><li>推荐开局地：</li></ul><p>（1）直接最大城市开局，人口比例22%以上，意味着即使1实力叛军骚扰都能直接影响声望。同时有初始支持者，推荐开局修主干。</p><ul><li>推荐堡垒地：</li></ul><p>理由：山上堡垒直接限制叛军打游击战的可能，总部附近两座堡垒可防止对手偷袭总部。</p><ol start="5"><li>边远草原(+8%)</li></ol><ul><li>人口比例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/03aa43947458e124.png"></p><ul><li>地区交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/a5db841b973f8cdd.jpg"></p><ul><li>推荐开局地：（推荐开局修高速路）</li></ul><ol><li>主干道路城市：绿化难度低且能保护大城市（约21%人口比例)</li><li>高速道路城市：绿化难度低，且能限制叛军左下角部署</li></ol><ul><li>推荐堡垒地</li></ul><ol><li><p>三座堡垒再加上总部可以最大限度限制叛军营地位置，主干道路堡垒所在地维稳难度不是很高。</p></li><li><p>黑暗洞穴：</p></li></ol><ul><li>人口比例:(+4%)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/281c40d0e8284c2a.png"></p><ul><li>地区交通：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/beef882bdbb8de48.jpg"></p><ul><li>推荐开局地：</li></ul><ol><li>中间农村：开局点出二级眼可获取全地图情报（除了左上角城市和山区)绿化难度也不是很高、推荐开局修高速路。</li><li>最大城市：防止叛军偷袭的基础上有初始支持者，且不容易被叛军控制分区附近周围敌意敌对者上涨属性影响。</li></ol><ul><li>堡垒推荐地</li></ul><ol><li><p>左下角堡垒可保障下边，如果生成叛军，建议往左下角城市赶，具体怎么赶，通过初始通勤度判断叛军溃逃位置。（控制得好再加上部署民兵完全可以玩成单机，对手全程不能操作叛军），这也是叛军营地高发点，如果点了远端部署可同时进攻三座城市使极其重要战略位置。</p></li><li><p>城市堡垒：可检测附近营地生成保障总部周围不生成叛军</p></li><li><p>蔚蓝堤坝（+10%)</p></li></ol><ul><li>人口比例：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/0741ba111676ace9.png"></p><ul><li>地区交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s3.bmp.ovh/imgs/2022/03/819c8ef850f848f3.jpg"></p><ul><li>推荐开局地</li></ul><ol><li>蔚蓝堤坝绿化难度低，尤其体现在左下角，标红的为测试中维稳难度最低的区域。</li><li>靠近大城市有利于防止偷袭，或者放置在堡垒位置充当堡垒作用。</li><li>修高速可快速回防下半路，修主干可快速回防上半路。</li><li>此外，如果叛军在上下半路交界位置放置地雷需要尽快拆除，不然加上极其恶劣的交通得绕非常远的距离，上半路可以说失守，叛军可以打得非常猖狂！</li></ol><ul><li>推荐堡垒地</li></ul><ol><li><p>最大程度检测叛军位置，而且最上方堡垒位置点敌对人口相当的少，容易绿化。</p></li><li><p>鸦片小道（+5%)</p></li></ol><ul><li>人口比例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic.imgdb.cn/item/623fead227f86abb2a51aa48.png"></p><ul><li>地区交通</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic.imgdb.cn/item/623feb5227f86abb2a548e77.jpg"></p><ul><li>推荐开局地：</li></ul><ol><li>右下角城市、敌对人口少、绿化难度低且拥有初始支持者，能检测周围一格叛军生成是最理想的开局地</li><li>最大城市：（保险）全地图最差交通，总部离城市较远，如果叛军进攻大城市再携带地雷将直接影响声望。但周围分区绿化难度普遍较高，后期可以插个碉堡。</li></ol><h3 id="民生面板"><a href="#民生面板" class="headerlink" title="民生面板"></a><span id="jump2">民生面板</span></h3><ul><li>稳定度</li></ul><ol><li>分区的稳定度受到支持者和敌对者的影响，敌对者越多，稳定分区需要的人数越多</li><li>民生方面计划项目不是立刻生效，而是需要时间在各个分区建设落实（地图上用锤子表示）</li><li>政府面板外展机构可以提高同时建设项目的线程和速度，即分区同时落实项目。</li><li>稳定度缺乏：玩家在一段时间内未有新地区进入稳定状态而扣除声望，扣除声望累加，直到新分区进入稳定后重置。</li></ol><ul><li>需求关切</li></ul><ol><li>特定分区民众会昌盛特定民生项目的强烈需求，在该分区的情报完全获取后其关切逐渐显现</li><li>该分区的区域关切如果迟迟未被建设和回应便会按比例扣除当地支持度</li><li>现版本的民生项目会优先实施该区域关切条目，解决关切只需要购买相对应的项目即可</li><li>已稳定分区仍然会产生关切，只不过无影响。</li><li>已经在分区落实该类的项目，之后该分区再次产生同类的诉求概率下降。</li></ol><h4 id="服务业"><a href="#服务业" class="headerlink" title="服务业"></a>服务业</h4><ol><li>父类特点：建设速度快且便宜，增加支持度较少，削减敌对者效率显著。</li><li>子类：教育线：实施速度快、落实进度快，通货膨胀和腐败涨幅低，但支持度较少。扫盲运动不产生通货膨胀</li><li>子类：水务线：产生通货膨胀低，但代价是产生腐败高</li><li>子类：医疗线：产生腐败风险低，但代码是通货膨胀高。</li></ol><h4 id="基础设施建设"><a href="#基础设施建设" class="headerlink" title="基础设施建设"></a>基础设施建设</h4><ol><li>父类特点：功能性辅助，如通勤率，情报收集速度和建设速度等，也能增加当支持度。但代价是腐败、通货膨胀涨幅较高</li><li>子类：道路修建：增加当地路况通勤率增加士兵移动速度并提高士兵在当地的战斗力。增加当地项目建设速度和加快</li><li>子类：电力供应：加快项目在当地的建设速度</li><li>子类：通讯项目：在每个分袂落实项目后额外向周围分区提供支持度</li></ol><h4 id="就业"><a href="#就业" class="headerlink" title="就业"></a>就业</h4><ol><li>特点：增加支持度较多，但代价是建设速度慢、项目滋生腐败高、通货膨胀涨幅大。且具</li><li>部分就业计划项目的支持度增加有明显的分区偏向性（对城市/农村/偏远地区增加更多）。</li><li>建设速度比较慢，且对敌对者的作用不大。</li></ol><h4 id="民生具体数据"><a href="#民生具体数据" class="headerlink" title="民生具体数据"></a>民生具体数据</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.328888.xyz/2022/03/25/9xkS7.jpg" alt=">民生项目具体数据"></p><h3 id="政府面板"><a href="#政府面板" class="headerlink" title="政府面板"></a><span id="jump3">政府面板</span></h3><ul><li>声望</li></ul><ol><li>是整个游戏基础，声望归零时游戏失败。</li><li>声望可以通过稳定区域、谈判、部分事件、普遍正义、民主选举获得</li><li>声望影响年度预算低声望下预算下降。</li><li>影响的主要因素有：<ul><li>稳定度缺乏：长期没有新的稳定区域，两年后开始出现稳定度缺乏，若没有稳定一定分区，新的分区进入稳定后重置稳定度缺乏时间为八个月。</li><li>腐败：（腐败水平过高）</li><li>叛军活动（所有与叛军活跃战士有关的活动），无叛军的红区不扣声望</li><li>政府行为：指一切事件决策，除联合军部署</li><li>联合军部署：联合军驻扎期到期时选择延期</li><li>交战中军队突然撤退</li><li>谈判（属于政府行为的范畴，主要是谈判中的表现，但最终签字扣除的声望属于叛军活动范畴）</li></ul></li></ol><ul><li>情报</li></ul><ol><li>分区若没有情报，建设项目就不能执行（除了民兵和疫苗只会建设速度下降),部分事件的选项也不能选择，已经执行的项目不受影响</li><li>让玩家充分了解当地情况以便于解决当地诉求</li><li>影响部队作战，情报低于大约五分之一的情况无法开展，部队在情报没有搜集完全的区域战斗时战力大降。</li><li>军事项目的“译员向导”和“人类地形系统”可以在有士兵驻扎的情况下加快情报搜集</li></ol><ul><li>安全度</li></ul><ol><li>主要分为民兵、警员招募和警队扩编</li><li>所有安保项目可以降低叛军攻击速度，叛军需要将地区安全度降为零才能完全占领该地区。而安保项目被摧毁时杀死一活跃战士。</li><li>滋生的腐败相对较高，而且警员招募部署速度约为每小时五公里</li><li>民兵项目会扣除当地支持度，但是建设速度很快，不需要情报。如果不想买，可以通过普遍正义解锁警员招募</li></ol><ul><li><p>公关水平</p><p> 组建宣传机构可以<strong>大幅度增加计划条目带来的支持度提升</strong>，并阻止叛军活动降低我方支持度。因此此项为必点项目。<del>然而前期太贵而且必须要点出情报才能点，关键效果也不是很好。还不如省下这笔费用打叛军</del></p></li></ul><h4 id="政府活动项目"><a href="#政府活动项目" class="headerlink" title="政府活动项目"></a>政府活动项目</h4><ul><li>普遍正义</li></ul><ol><li>可以获得3声望+不少支持度，6~7刀</li><li>能跳过民兵招募，直接解锁警员招募</li><li>点出普遍正义后，某些突发事件的选项可能会因司法伪善而招致民愤<del>牛皮先吹出去再说</del></li></ol><ul><li>民主过渡：</li></ul><ol><li>可以获得2点声望+ 少量支持度，8刀左右</li><li>购买此项后会弹出筹备民主选举，一年之内举办为18刀，三年之内为9刀。推迟则会扣除2点声望。推迟后还会弹出是否民主选举。筹备选举后不需要支付额外费用</li><li>弹出民主选举举行，视叛军占领情况决定被破坏的概率。</li></ol><ul><li>外务机构(对抗模式下无)</li></ul><ol><li>主要用于应对境外敌国暗地支持，随着时间推移效果会增强。省得每次反击浪费8刀。</li><li><del>好家伙，对抗模式某敌国明面上支持</del></li></ol><ul><li>外展机构</li></ul><ol><li>解锁全部政府活动项目</li><li>主要用于增加项目在特定分区的建设线程，可以增加分区同步实施项目数量以及部署速度。（城市2=&gt;4,乡村、偏远1=&gt;2)</li></ol><ul><li>国际援助：</li></ul><ol><li>购买此项后会得到国际慈善机构的额外资源，可以免费实施一些民生项目（通货腐败爆炸）<del>我TM谢谢啊，带善人</del>或增加年度预算(+3)，耗费7刀</li><li><del>7刀项目而且好几年才能回本，而且弹窗可能要很久才能弹出，对抗不建议点</del></li></ol><h3 id="军事面板"><a href="#军事面板" class="headerlink" title="军事面板"></a><span id="jump4">军事面板</span></h3><h4 id="0-己方军队"><a href="#0-己方军队" class="headerlink" title="0.己方军队"></a>0.己方军队</h4><ol><li>正常情况下，己方军队无敌（跟叛军苦战多久都不会被叛军歼灭）。</li><li>他们会跟地区内的叛军交战。如果占上风，叛军会被驱逐。反之，叛军该干啥干啥。开战需要一定量的情报，而没有完全搜集情报地区的友军效率大幅度降低。</li><li>如果部队目前不处于战斗状态，他们会优先协助附近分区与叛军交战友军。如果周围没有战斗但民事支援项目已被资助，部队会帮助当地人员部署计划并加支持度。</li><li>后勤耗费决定了单位移动到地区所需要的回合数 - 难度越高，这个数值越大。道路基建、堡垒、物流专家只影响稳定区，和国民军后勤机动可以削减这个数字。</li><li>一块分区里只能有一支玩家军队。</li><li>战斗最短时间为5回合，可以围剿时可以让部队先开战控制叛军，等其他部队到达。</li></ol><h4 id="1-国民军相关"><a href="#1-国民军相关" class="headerlink" title="1. 国民军相关"></a>1. 国民军相关</h4><ul><li>国民军：（解锁要塞项目）</li></ul><ol><li>情报搜集速度比联合军快，且引起民愤几率低</li><li>作为常备军，国民军不会撤军。</li><li>训练一支国民军需要很多时间估计要23个月训练 - 如果地图上有联合军，则训练时间减少大概7个月，而且开始训练时腐败风险会大幅度上涨。</li><li>对抗模式节奏飞快，显然等腐败回落再一支一支训练国民军不适合版本发展，建议只开一支国民军用于解锁要塞。</li><li>每个分区内只能有一个堡垒。</li><li>堡垒建设事件会随机刷在不存在堡垒的，叛军占领区或有叛军活动的周边区域（我方战斗点优先）</li><li>堡垒升级可以强化增援效果和分区支持度，并可以降低叛军攻占地区速度。但对抗模式下堡垒十分滴珍贵，用于稳定分区太奢侈了应该往后期考虑放在中心位置用于探营地。</li><li>叛军不能直接在堡垒的位置生成，也可建造在大城市用于防止偷袭。</li></ol><ul><li>要塞：</li></ul><ol><li>堡垒可以为部队提供增援并切断敌军逃跑路线也可以帮助部队拆营</li><li>堡垒升级可以强化增援效果和分区支持度，并可以降低叛军攻占地区速度。</li><li>堡垒可以探测到自己区域内的叛军营地，安保升级可以让它检测到周围一格距离的叛军营地（前提是有100%情报）。对抗可以用来限制对手营地安放位置，营地建造在周围马上显示并用空袭炸毁。叛军无法生成就能持续吃支持度加成。</li><li>每个分区内只能有一个堡垒。</li><li>堡垒建设事件会随机刷在不存在堡垒的，叛军占领区或有叛军活动的周边区域（我方战斗点优先）</li><li>堡垒升级可以强化增援效果和分区支持度，并可以降低叛军攻占地区速度。但对抗模式下堡垒十分滴珍贵，用于稳定分区太奢侈了应该往后期考虑放在中心位置用于探营地。</li><li>叛军不能直接在堡垒的位置生成，也可建造在大城市用于防止偷袭。</li></ol><ul><li>总部：</li></ul><ol><li>游戏一开始既可建造的建筑，全游戏只能有一个。</li><li>和堡垒一样也可以为部队提供增援并增加分区支持度和安保力量。</li><li>从困难开始，训练完成的军队需要从总部行进到目标区域，而非直接空降到目标区域。</li><li>实施民生计划一般以总部为中心向外放射式实施。根据这一点和上一点，请务必在开局认真考虑总部位置。</li><li>当它所在的分区沦陷时，叛军会试图摧毁该建筑 - 如果它被摧毁，玩家立即失败。</li><li>与堡垒不同，叛军在面对总部时即使遭到压制也会继续试图摧毁总部，因此通常试图拯救总部不太可能成功</li></ol><h4 id="2-联合军相关"><a href="#2-联合军相关" class="headerlink" title="2. 联合军相关"></a>2. 联合军相关</h4><ul><li>联合军：战斗力完爆国民军，但如果没有向导或者民事援助类项目容易引起民愤从而敌对者上升。</li></ul><ol><li>购买后支持度会下降</li><li>临时驻扎两年，到期后需要扣声望留下。送回家增加玩家支持度和叛军实力。<del>你真会挑时候走正需要的时候思乡</del></li><li>如果联合军长期陷入苦战，将其缩短驻扎时间。</li><li>如果联合军一支在行军路上则不消耗驻扎期，<del>所以可以用校长微操，让联合军保持一直在场状态直到所有分区稳定，干脆住这里得了。</del></li></ol><ul><li>空袭：对抗模式下手动控制</li></ul><ol><li>空袭有概率杀死地区内活动的叛军</li><li>轰炸时有概率触发误伤平民事件<del>别问，问就掩饰。还挺真实的</del></li><li>优先为地面正在苦战的部队提供强效支援，其次为可见的叛军营地</li><li>叛军营地必须要在地图上被显示出来才能被攻击，而一旦该分区被炸到，这个营地会立刻倒下。当某一分区内的叛军营地被摧毁且该分区内无军队驻扎，则该分区将会被叛军突袭。（对抗模式则不会爆1实力叛军）</li><li>多次轰炸的支援效果可叠加到战斗结束为止</li><li>升级可以削弱冷却时间，增加攻击力和平民伤亡概率以及精确度降低误伤概率，稍稍增加冷却时间，掩饰失败后当地会爆发少部分叛军。</li><li>联合军随时间推移所在分区支持度会持续下降，尽量别让联合军驻扎过久。</li></ol><h3 id="叛军面板"><a href="#叛军面板" class="headerlink" title="叛军面板"></a><span id="jump5">叛军面板</span></h3><h4 id="叛军属性"><a href="#叛军属性" class="headerlink" title="叛军属性"></a>叛军属性</h4><ol><li>叛军生成：叛军会固定从叛军营地所在分区和该分区周围出现，为一格距离，只要营地没有被摧毁，叛军就可以不断出现（直到达到叛军可维持上限），<ul><li>叛军营地：<ol><li>提供活跃战士战力加成，并且能在周围一格的地区部署叛军，一次部署活跃战士上限为4。</li><li>在情报探明的分区，叛军营地以问号的形式逐渐显示。</li></ol></li></ul></li><li>叛军溃逃：叛军不会跨越边缘地区和河流。且不往士兵和堡垒分区跑<ul><li>优先往叛军营地或者有叛军活动方向跑（解释了为什么叛军在两个城市之间反复跑不往山里跑的原因）</li><li>其次往通勤度低分区跑，高速路&gt;主干路&gt;分支路（解释了叛军为什么往山里跑)</li></ul></li><li>叛军进攻：（敌对者多的区域安全度掉得快），增加区域内的敌对者数量，叛军占领后可降低我方全局支持度。</li><li>叛军活动：活跃战士活动的分区人口比例越高，扣除声望越多。如大城市一回合扣一点。红区无叛军活动则不扣除声望<del>守住大城市，避免对手不讲武德用伏击偷袭</del></li><li>叛军占领红区属性：</li></ol><ul><li>叛军接管+1：当叛军再次控制该区域时，能更多扣除声望。扣除声望能叠加，所以不要反复丢失区域尤其是城市。</li><li>叛军进攻：如果叛军战斗中占上风（士兵战斗进程40%左右）分区的安全度会缓慢下降。</li><li>叛军红区属性<ol><li>使分区内支持者数量减少，并慢慢转换为敌对者。<del>我搞建设大半天才几点支持度，一占领就-10多点，真叛军得人心</del>，其附近地区敌意也上升，增加后续维稳难度</li></ol></li></ul><ol start="2"><li>会不定时摧毁占领分区内的建筑，一旦占领，正在建设中的项目便会停滞。</li><li>情报丢失：叛军控制分区会逐渐丧失情报，进而隐藏叛军营地等设施。</li><li>战力加成：一个地方的叛军如果周围有一个红区，战力<em>2，有两个</em>3，以此类推</li></ol><ul><li>叛军实力：主要有以下获得方式</li></ul><ol><li>叛军占地多且连接的情况下叛军实力逐渐增长（自力更生）</li><li>购买叛军资助项目叛军实力直接强化，且减营地冷却时间。附近红区为战斗中活跃战士提供战力加成。</li><li>叛军实力决定了他们可维持战士的数量，维持一名战士需要大概3%的实力。<strong>所以削弱叛军实力的宗教领袖显得尤为重要</strong></li></ol><ul><li>叛军击杀：叛军溃逃途中有一定几率能杀死活跃叛乱分子！</li></ul><p>小技巧：保证路况足够好的情况下，在叛军即将到达分区时，士兵恰好到达，则会杀死1叛乱分子。并重新选择溃逃分区，叛军下限为1.利用此技巧可以快速杀死多名叛乱分子，最后1实力交给当地民兵解决。</p><h4 id="叛军设施"><a href="#叛军设施" class="headerlink" title="叛军设施"></a>叛军设施</h4><ul><li>叛军资助：上限为6，直接增强叛军实力的同时显著缩短叛军营地冷却时间</li></ul><ol><li>叛军资助1：解锁地雷和苏式地堡</li><li>叛军资助2：解锁远端部署</li></ol><p>（1）苏式地堡：同地区特性苏式地堡，能耐受数次空袭。能换取前期的优势。但叛军面板解锁后正是出资训兵时，通货膨胀显著上升不建议前期点。</p><p>（2）远端部署：允许叛军在营地附近两格位置部署。将叛军放置在山区附近能让对手短时间内无法判断营地具体位置。</p><h4 id="叛军指令：（能在未稳定分区使用"><a href="#叛军指令：（能在未稳定分区使用" class="headerlink" title="叛军指令：（能在未稳定分区使用)"></a>叛军指令：（能在未稳定分区使用)</h4><ol><li><p>迅速占领：解锁堡垒破袭和伏击</p><p>加快当前叛军占领分区的速度，闪电战推荐技能点</p></li><li><p>堡垒破袭：摧毁指定分区内存在的堡垒</p></li></ol><ul><li>稳定度缺乏打击：当对手正在吃稳定度缺乏时，高稳定度分区建造带有民事支援的堡垒需要尽快炸毁，让对手持续吃稳定度缺乏</li><li>围剿突围：如果对手堡垒处没有士兵而是利用堡垒进行合围可以炸毁堡垒炸出一个缺口使对手不能完成围剿。</li></ul><ol start="3"><li>伏击：</li></ol><ul><li>在未稳定分区指定生成部分叛军，活跃战士取决于叛军实力。主要用于开辟第二战场是对手无法两头兼顾作战，或者是搭配叛军建筑来达到偷袭或者逃跑作用。</li></ul><h4 id="叛军建筑：（需要叛军所在处才能使用）"><a href="#叛军建筑：（需要叛军所在处才能使用）" class="headerlink" title="叛军建筑：（需要叛军所在处才能使用）"></a>叛军建筑：（需要叛军所在处才能使用）</h4><ol><li>洞穴：藏匿两实力叛军，如对手不能及时清理则会再次出来继续叛乱。</li></ol><ul><li>主要用于拖延对手一支部队无法短时间内移动，从而逼迫开出洞穴战术，或者是卡对手支援位无法及时支援。</li></ul><ol start="2"><li>隧道：允许叛军在隧道两头进行无后勤传送</li></ol><ul><li>主要用于拖延使对手无法短时间内歼灭叛军从而吃支持度加成，亦或者搭配伏击进攻重大城市！</li></ul><ol start="3"><li>地雷：固定增加16行军数，并改变部队前进方向。如部队在地雷所在分区的途中则不受地雷的影响。</li></ol><h3 id="对抗模式下战术选择"><a href="#对抗模式下战术选择" class="headerlink" title="对抗模式下战术选择"></a>对抗模式下战术选择</h3><ul><li><p>规则解读：（首先得先了解清楚具体规则才能展开具体战术的用法）</p></li><li><p>胜利：</p><ol><li>先于对手全稳定分区 </li><li>摧毁对方总部</li><li>对方声望归零</li></ol></li><li><p>支持加成：消灭我方区域全部叛乱分子并阻止叛军回溯，即可使我方区域支持度随时间推移显著增加（高难度下决定速歼战术）</p></li></ul><h4 id="骚扰战术："><a href="#骚扰战术：" class="headerlink" title="骚扰战术："></a>骚扰战术：</h4><p>适用范围：适用于高难度打低难度，或者对方重军事的对手：</p><p>主要思路：使对手持续在军事上投资无法忙于民生项目发展和政府反腐投资，或者是牵制联合军使其持续战斗从而早早回国。</p><ul><li>搭配组合：地雷+伏击+隧道+洞穴</li></ul><p>主要思路：地雷用于防守或阻碍对手围剿时间，亦或者发动围剿时就发起进攻扰乱对手的围剿路线，用伏击开辟第二战场后将围剿叛军传送并放置洞穴用于拖住一支部队。</p><h4 id="偷袭战术："><a href="#偷袭战术：" class="headerlink" title="偷袭战术："></a>偷袭战术：</h4><p>适用范围：适用于对手忙于前线作战而后方重大城市防守空缺：</p><ul><li><p>搭配组合：伏击+地雷+隧道</p><p>伏击开路使该区域存在叛军后使用地雷防止对手快速回防，后放置隧道以便于后续叛军重新夺回区域造成重大声望损失，同时也逼迫对手守该分区隧道。同时还可以用于进攻对手高稳定进度分区，从而让对手持续吃稳定度缺乏！</p></li></ul><h4 id="稳定输出："><a href="#稳定输出：" class="headerlink" title="稳定输出："></a>稳定输出：</h4><p>适用于对手稳扎稳打只防守不进攻：</p><ul><li><p>搭配组合：伏击+隧道</p></li><li><p>主要思路：在所控制分区事先放置一条隧道后，用伏击开辟第二战场，将大部分活跃战士通过隧道传送到目的地快速破防。留下的少部分叛军用于牵制对手踩红区造成叛军实力下降，或者是对手踩了红区光速进攻夺回造成声望损失，牵制对手无法及时回防。</p></li></ul><h4 id="拆家战术："><a href="#拆家战术：" class="headerlink" title="拆家战术："></a>拆家战术：</h4><ul><li>搭配组合：地雷+其余叛军牵制</li><li>主要思路：得看对手总部位置（如萌新总部建山上），利用其余叛军牵制主对手能控制的部队，集中力量进攻对手总部放置地雷拖延部队回防时间</li></ul><h3 id="我方战术："><a href="#我方战术：" class="headerlink" title="我方战术："></a>我方战术：</h3><p>明确一点高难度下无法通过正常途径维稳来赢，那么速歼叛军，并维稳便是唯一的手法。</p><ul><li>反叛军突围：可能叛军即将叛逃时秒起堡垒从而使对手无法及时炸堡垒突围。</li><li>如果对手不断在红区发起进攻导致无法合围，那么建议踩红区后在有盾的分区叛军无法短时间行动中围剿歼灭，对手如果分多个方向那么民兵就显得尤为重要</li></ul><h4 id="歼灭细节："><a href="#歼灭细节：" class="headerlink" title="歼灭细节："></a>歼灭细节：</h4><ul><li>关于围剿：<ol><li>一次清剿就要耗费大量的资源和驻军期，能一次剿灭就不拖到下一次。</li><li>行军数：联合军在附近区域一格一格走避免跨大分区时出现紧急情况而又无法取消，熟悉地图的通勤度便能掌握到相邻分区大概需要多少回合，已到达围剿地点的联合军可撤往其他位置但不能落地（减少驻军期消耗），带围剿的联合军到达后，其他围剿位置联合军全部取消。从而缩短驻军期消耗</li></ol></li><li>关于民生：<ol><li>民生面板：依次点医疗、教育、供水一项（防诉求）就业点职业培训（防诉求），后修一级路（具体得看地图）和通讯（绿化加成多）。</li><li>政府面板：开局点出民兵，因为开局就要歼灭对手叛军防止高难度叛军实力大从而导致局势失控。之后中期反腐（估计这个时候也没什么钱了），之后就是看情况开情报一级（用于开喇叭）和喇叭！</li><li>军事面板：一蓝一绿：（开出三大件：堡垒、空袭、无人机），联合军派出用于军事恐吓对手限制营地的放置，爆发叛军后便立刻前往且短时间击退，确定营地位置后开出空袭无人机及时炸毁防止叛军前期开花。蓝军建议部署四支，搭配上堡垒能短时间内速剿叛军，且每个重要分区伏击都落地一直联合军便让这支联合军一直在路上不消耗驻军期！</li></ol></li></ul><p>参考资料：</p><ol><li><p>[萌娘百科](<a href="https://zh.moegirl.org.cn/%E5%8F%8D%E5%8F%9B%E5%85%AC%E5%8F%B8">反叛公司 - 萌娘百科 万物皆可萌的百科全书 (moegirl.org.cn)</a>)</p></li><li><p>[反叛公司民生数据贴](<a href="https://tieba.baidu.com/p/7509407200">[图片]反叛数据贴（最全）[反叛公司吧]_百度贴吧 (baidu.com)</a>)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目实操经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反叛公司 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
